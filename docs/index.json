{"repository_name":"github.com/TheKingsJrester/cltk","body":"# cltk [![Build Status](https://api.travis-ci.org/ziprandom/cltk.svg)](https://travis-ci.org/ziprandom/cltk)\n\nThis is a port of the [Ruby Language Toolkit](https://github.com/chriswailes/RLTK) to the [Crystal Programming Language](http://crystal-lang.org/).\n\n**CLTK (like RLTK) is:** a collection of classes and methods designed to help programmers create languages in an easy to use and straightforward manner. This toolkit provides the following features:\n\n* 2 Lexer generators based on [PCRE Regexps from crystals STD Lib](https://ziprandom.github.io/cltk/CLTK/Lexer.html) and a [second faster one](https://ziprandom.github.io/cltk/CLTK/Scanner.html) based on the [crystal-dfa](https://github.com/ziprandom/crystal-dfa) DFA automaton implementation\n* Parser generator\n* AST node baseclass\n* Class for representing context free grammars\n\nIn addition, CLTK includes several ready-made lexers and parsers. As well as a [serialization mechanism](https://github.com/ziprandom/cltk/blob/master/src/cltk/parser/crystalize.cr#L24) that renders a finalized parser back into crystal syntax to compile it without having to be finalized again at startup (see [exp_lang_repl](examples/exp_lang/exp_lang_repl.cr) for a usage example).\n\nTo see what works have a look at the specs or run them with:\n\n```crystal\n$ crystal spec\n```\n\nThe Implementation has been strongly altered but the API is compatible to RLTK. The LLVM Bindings has not been ported. Instead crystals own LLVM Bindings were used in [`examples/kazoo/chapter 8/kcontractor.cr`](https://github.com/ziprandom/cltk/blob/master/examples/kazoo/chapter_8/kcontractor.cr)\n\n## Usage\n\nTo use the toolkit in your project add this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  cltk:\n    github: ziprandom/cltk\n```\n\n### Examples\n\nSee the example languages (and their specs):\n* **interpreted language EXP_LANG** (`examples/exp_lang`)\n* **kazoo**  (`examples/kazoo/chapter 8`) with LLVM IR generation\n* **brainfuck** (`examples/brainfuck`)\n* **json_parser** (`examples/json_parser`) example of a linter / xml converter\n\n## Documentation\n\ncan be found in the [docs](https://ziprandom.github.io/cltk/) directory\n\n## Contributing\n\n1. Fork it ( https://github.com/ziprandom/cltk/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [ziprandom](https://github.com/ziprandom)  - creator of the port, maintainer\n","program":{"html_id":"github.com/TheKingsJrester/cltk/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/TheKingsJrester/cltk","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[{"id":"yield_with(env,&block)-class-method","html_id":"yield_with(env,&amp;block)-class-method","name":"yield_with","doc":null,"summary":null,"abstract":false,"args":[{"name":"env","doc":null,"default_value":"","external_name":"env","restriction":""}],"args_string":"(env, &block)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer.cr#L13","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer.cr#L13","def":{"name":"yield_with","args":[{"name":"env","doc":null,"default_value":"","external_name":"env","restriction":""}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"with env yield"}}],"constructors":[],"instance_methods":[],"macros":[{"id":"def_parse(params_as_const=true)-macro","html_id":"def_parse(params_as_const=true)-macro","name":"def_parse","doc":null,"summary":null,"abstract":false,"args":[{"name":"params_as_const","doc":null,"default_value":"true","external_name":"params_as_const","restriction":""}],"args_string":"(params_as_const = true)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_macro.cr#L9","def":{"name":"def_parse","args":[{"name":"params_as_const","doc":null,"default_value":"true","external_name":"params_as_const","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"  \n{% if params_as_const == (:instance) %}\n    def parse(tokens : Array, opts : NamedTuple? = nil)\n      token_hooks = Hash(String, Array(Proc(Environment, Nil))).new\n      self.class._parse(@prod_procs, @lh_sides, @symbols, @states, token_hooks, tokens, opts)\n    end\n  {% else %}\n    def self.parse(tokens : Array, opts : NamedTuple? = nil)\n      {% if params_as_const %}\n        _parse(PROCS, LH_SIDES, SYMBOLS, STATES, TOKEN_HOOKS, tokens, opts)\n      {% else %}\n        _parse(@@procs, @@lh_sides, @@symbols, @@states, @@token_hooks, tokens, opts)\n      {% end %}\n    end\n  {% end %}\n\n\n  private def self.build_parse_opts(opts : NamedTuple)\n    build_parse_opts(nil).merge(opts)\n  \nend\n\n  private def self.build_parse_opts(opts : Nil)\n    \n{\n      accept:     :first,\n      \nenv:        \n{% if params_as_const %}Environment{% else %}@@env{% end %}\n.new,\n      parse_tree: nil,\n      verbose:    nil,\n    }\n  \nend\n\n  def self._parse(procs, lh_sides, symbols, states, token_hooks, tokens, opts : NamedTuple? = nil)\n    \n# Get the full options hash.\n\n    opts = build_parse_opts(opts)\n    \n{% if env(\"VERBOSE\") %}\n      v = STDOUT\n      v.puts(\"Input tokens:\")\n      v.puts(tokens.map { |t| t.type }.inspect)\n      v.puts\n    {% end %}\n\n\n      \n# Stack IDs to keep track of them during parsing.\n\n      stack_id = 0\n\n    \n# Error mode indicators.\n\n    \nerror_mode      = false\n    reduction_guard = false\n\n    \n# Our various list of stacks.\n\n    accepted   = [] of CLTK::Parser::ParseStack\n    moving_on  = [] of CLTK::Parser::ParseStack\n    processing = [CLTK::Parser::ParseStack.new(stack_id += 1)]\n    \n# Iterate over the tokens.  We don't procede to the\n\n    \n# next token until every stack is done with the\n\n    \n# current one.\n\n    tokens.each_with_index do |token, index|\n      \n# Check to make sure this token was seen in the\n\n      \n# grammar definition.\n\n      unless symbols.includes?(token.type.to_s)\n\traise CLTK::Parser::Exceptions::BadToken.new(token)\n      \nend\n\n      \n{% if env(\"VERBOSE\") %}\n        st = if token.value\n               \"(\" + token.value.to_s.as(String) + \")\"\n             else\n               \"\"\n             end\n\tv.print(\"Current token: \")\n        v.print(\"#{token.type}#{st}\\n\".colorize.mode(:underline).mode(:bold))\n      {% end %}\n\n\n        \n# Iterate over the stacks until each one is done.\n\n        while (processing.any?)\n          stack = processing.shift\n          \n{% if env(\"VERBOSE\") %}\n            color = COLORS[stack.id % COLORS.size]\n          {% end %}\n\n          \n# Execute any token hooks in this stack's environment.\n\n          token_hooks.fetch(\n            token.type.to_s, [] of Proc(Environment, Nil)\n          ).each \n{ |hook| hook.call(opts[:env]) }\n\n          \n# Get the available actions for\n\n          actions = states[stack.state].on?(token.type.to_s)\n          if actions.empty?\n            \n# If we are already in error mode and there\n\n            \n# are no actions we skip this token.\n\n            if \nerror_mode\n              \n{% if env(\"VERBOSE\") %}\n                st = if token.value\n                       \"(\" + token.value.to_s.as(String) + \")\"\n                     end\n\t        v.puts(\"Discarding token: #{token.type}#{st}\")\n              {% end %}\n\n                \n# Add the current token to the array\n\n                \n# that corresponds to the output value\n\n                \n# for the ERROR token.\n\n                stack.output_stack.last.as(Array) << token.value\n              moving_on << stack\n              next\n            \nend\n\n            \n# We would be dropping the last stack so we\n\n            \n# are going to go into error mode.\n\n            if accepted.empty? && moving_on.empty? && processing.empty?\n              \n{% if env(\"VERBOSE\") %}\n\t        v.puts\n\t        v.puts(\"Current stack:\".colorize(color))\n\t        v.puts(\"\\tID: #{stack.id}\".colorize(color))\n\t        v.puts(\"\\tState stack:\\t#{stack.state_stack.inspect}\".colorize(color))\n\t        v.puts(\"\\tOutput Stack:\\t#{stack.output_stack.map(&.inspect).join(\", \")}\".colorize(color))\n\t        v.puts\n              {% end %}\n\n\n\t        \n# Try and find a valid error state.\n\n\t        while stack.state_stack.any?\n\t          if (actions = states[stack.state].on?(:ERROR.to_s)).empty?\n\t            \n# This state doesn't have an\n\n\t            \n# error production. Moving on.\n\n                    stack.pop\n\t          \nelse\n\t            \n# Enter the found error state.\n\n\t            stack.push(actions.first.id, [token.value.as(CLTK::Type)], :ERROR.to_s, token.position)\n\t            break\n\t          \nend\n\t        \nend\n\t      if stack.state_stack.any?\n\t        \n# We found a valid error state.\n\n\t        \nerror_mode = reduction_guard = true\n\t        opts[:env].he = true\n\t        moving_on << stack\n\n                \n{% if env(\"VERBOSE\") %}\n\t          v.puts(\"Invalid input encountered.  Entering error handling mode.\".colorize(color))\n\t          v.puts(\"Discarding token: #{token.type}(#{token.value})\".colorize(color))\n                {% end %}\n\n\t      \nelse\n\t\t\n# No valid error states could be\n\n\t\t\n# found.  Time to print a message\n\n\t\t\n# and leave.\n\n                \n{% if env(\"VERBOSE\") %}\n                  v.puts(\"No more actions for stack #{stack.id}.  Dropping stack.\".colorize(color))\n                {% end %}\n\n\t      \nend\n\t    \nelse\n              \n{% if env(\"VERBOSE\") %}\n\t        v.puts(\"No more actions for stack #{stack.id}.  Dropping stack.\".colorize(color))\n              {% end %}\n\n\t    \nend\n\n\t    next\n\t  \nend\n\n\t  \n# Make (stack, action) pairs, duplicating the\n\n\t  \n# stack as necessary.\n\n\t  pairs = ([\n{stack, actions.pop}] + actions.map \n{|action| \n{stack.branch(stack_id += 1), action} })\n\t  pairs.each do |pair|\n            stack, action = pair\n            \n{% if env(\"VERBOSE\") %}\n              color = COLORS[stack.id % COLORS.size]\n            {% end %}\n\n\n            \n{% if env(\"VERBOSE\") %}\n\t      v.puts\n\t      v.puts(\"Current stack:\".colorize(color))\n\t      v.puts(\"\\tID:\\t\\t#{stack.id}\".colorize(color))\n\t      v.puts(\"\\tState stack:\\t#{stack.state_stack.inspect}\".colorize(color))\n              stack_string = stack.output_stack.map do |e|\n                e.is_a?(Array) ?\n                  \"[\" + e.map(&.inspect).join(\", \") + \"]\" :\n                  e.inspect\n              end.join(\", \")\n\t      v.puts(\"\\tOutput Stack:\\t[#{stack_string}]\".colorize(color))\n\t      v.puts\n\t      v.puts(\"Action taken: #{action.to_s}\".colorize(color))\n              {% if (env(\"VERBOSE\")) == \"procs\" %}\n                if action.is_a?(CLTK::Parser::Actions::Reduce)\n                  v.puts(procs[action.id][0].crystalized_block.try &.colorize(color))\n                end\n              {% end %}\n\t    {% end %}\n\n\n\t    if action.is_a?(CLTK::Parser::Actions::Accept)\n\t      accepted << stack\n              break unless opts[:accept] == :all\n\n\t    \nelsif action.is_a?(CLTK::Parser::Actions::Reduce)\n\t        \n# Get the production associated with this reduction.\n\n\t        production_proc, pop_size = procs[action.id]\n\t        if !production_proc\n\t\t  raise CLTK::Parser::Exceptions::InternalParserException.new \"No production #{action.id} found.\"\n\t        \nend\n\t        args, positions = stack.pop(pop_size)\n\t        opts[:env].set_positions(positions)\n\n \t        if !production_proc.selections.empty?\n                  args = production_proc.selections.map do |selection|\n                    args[selection].as(CLTK::Parser::StackType)\n                  \nend\n                \nend\n\n                result = \n{action.id, args.as(Array(CLTK::Parser::StackType)), positions}\n\n\t        if (goto = states[stack.state].on?(lh_sides[action.id]).first)\n                  \n{% if env(\"VERBOSE\") %}\n\t\t    v.puts(\"Going to state #{goto.id}.\\n\".colorize(color))\n                  {% end %}\n\n\t\t    pos0 = nil\n\t\t  if args.empty?\n\t\t    \n# Empty productions need to be\n\n\t\t    \n# handled specially.\n\n\t\t    pos0 = stack.position\n\n\t\t    pos0.stream_offset\t+= pos0.length + 1\n\t\t    pos0.line_offset\t+= pos0.length + 1\n\n\t\t    pos0.length = 0\n\t\t  \nelse\n\t\t    pos0 = opts[:env].pos( 0).as(CLTK::StreamPosition)\n\t\t    pos1 = opts[:env].pos(-1).as(CLTK::StreamPosition)\n\t\t    pos0.length = (pos1.stream_offset + pos1.length) - pos0.stream_offset\n\t\t  \nend\n\t\t  stack.push(goto.id, result.as(CLTK::Parser::StackType), lh_sides[action.id], pos0)\n\t        \nelse\n\t\t  raise CLTK::Parser::Exceptions::InternalParserException.new \"No GoTo action found in state #{stack.state} \" +\n\t\t\t\t\t                  \"after reducing by production #{action.id}\"\n\t        \nend\n\n\t        \n# This stack is NOT ready for the next\n\n\t        \n# token.\n\n\t        processing << stack\n\n\t        \n# Exit error mode if necessary.\n\n\t        \nerror_mode = false if \nerror_mode && !reduction_guard\n\n\t      \nelsif action.is_a?(CLTK::Parser::Actions::Shift)\n\t        stack.push(action.id, token.value, token.type, token.position)\n                \n# This stack is ready for the next\n\n\t        \n# token.\n\n\t        moving_on << stack\n\n\t        \n# Exit error mode.\n\n\t        \nerror_mode = false\n\t      \nend\n\t  \nend\n\t\nend\n      break if accepted.size > 0\n\n      \n{% if env(\"VERBOSE\") %}\n\tv.puts(\"\\n\\n\")\n      {% end %}\n\n\n      processing = moving_on\n      moving_on  = [] of CLTK::Parser::ParseStack\n\n      break if opts[:accept] == :first && accepted.size > 0\n      \n# If we don't have any active stacks at this point the\n\n      \n# string isn't in the language.\n\n      if opts[:accept] == :first && processing.size == 0\n        \n{% if env(\"VERBOSE\") %}\n          v.close unless v == STDOUT\n        {% end %}\n\n\t  raise CLTK::Parser::Exceptions::NotInLanguage.new(tokens[0...index], tokens[index], tokens[index+1..-1])\n      \nend\n      reduction_guard = false\n    \nend\n\n    \n# If we have reached this point we are accepting all parse\n\n    \n# trees.\n\n    \n{% if env(\"VERBOSE\") %}\n      v.puts(\"Accepting input with #{accepted.size} derivation(s).\")\n      v.close unless v == STDOUT\n    {% end %}\n\n\n    if opts[:parse_tree]?\n         accepted.each do |stack|\n           opts[:parse_tree].as(IO).puts(stack.tree)\n         \nend\n    \nend\n\n    results = accepted.map do |stack|\n      stack.resolve(opts[:env], procs).as(CLTK::Type)\n    \nend\n\n    results = if opts[:accept] == :all\n                results\n              \nelse\n                results.first\n              \nend.as CLTK::Type\n\n    if (opts[:env]).he\n      raise CLTK::Parser::Exceptions::HandledError.new(opts[:env].as(Environment).errors, results)\n    \nend\n\n    return results\n  \nend\n\n"}},{"id":"insert_output_of(code_file_name=\"generated___code.cr\",debug=false)-macro","html_id":"insert_output_of(code_file_name=&quot;generated___code.cr&quot;,debug=false)-macro","name":"insert_output_of","doc":"writes the contents of block to code_file_name, runs it\nand inserts the output into the file","summary":"<p>writes the contents of block to code_file_name, runs it and inserts the output into the file</p>","abstract":false,"args":[{"name":"code_file_name","doc":null,"default_value":"\"generated___code.cr\"","external_name":"code_file_name","restriction":""},{"name":"debug","doc":null,"default_value":"false","external_name":"debug","restriction":""}],"args_string":"(code_file_name = \"generated___code.cr\", debug = false)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/macros.cr#L3","def":{"name":"insert_output_of","args":[{"name":"code_file_name","doc":null,"default_value":"\"generated___code.cr\"","external_name":"code_file_name","restriction":""},{"name":"debug","doc":null,"default_value":"false","external_name":"debug","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"  \n{% called_from_path_abs = block.filename.gsub(/\\/[^\\/]+$/, \"/\")\nintermediate_program_path = (called_from_path_abs + \".___\") + (code_file_name.gsub(/(\\.cr)?$/, \".cr\"))\nsystem((\"cat << 'EOF' > #{intermediate_program_path}\\n\" + block.body.stringify) + \"\\nEOF\")\nresult = `crystal #{intermediate_program_path}`\nif debug\n  pp(result)\nelse\n  system(\"rm #{intermediate_program_path}\")\nend\n %}\n\n  \n{{ result }}\n\n\n"}}],"types":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK","path":"CLTK.html","kind":"module","full_name":"CLTK","name":"CLTK","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cltk/ast.cr","line_number":1,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/ast.cr"},{"filename":"cltk/lexer/exceptions.cr","line_number":1,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/exceptions.cr"},{"filename":"cltk/scanner.cr","line_number":3,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr"},{"filename":"cltk/streamposition.cr","line_number":1,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/streamposition.cr"},{"filename":"cltk/token.cr","line_number":8,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/token.cr"},{"filename":"cltk/lexers/ebnf.cr","line_number":16,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexers/ebnf.cr"},{"filename":"cltk/cfg/production.cr","line_number":2,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/production.cr"},{"filename":"cltk/cfg/item.cr","line_number":2,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/item.cr"},{"filename":"cltk/cfg.cr","line_number":12,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr"},{"filename":"cltk/version.cr","line_number":1,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/version.cr"},{"filename":"cltk/lexer/crystalize.cr","line_number":1,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/crystalize.cr"},{"filename":"cltk/parser/crystalize.cr","line_number":1,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/crystalize.cr"},{"filename":"cltk/crystalize.cr","line_number":5,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/crystalize.cr"},{"filename":"cltk/lexer/environment.cr","line_number":1,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/environment.cr"},{"filename":"cltk/lexer.cr","line_number":17,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer.cr"},{"filename":"cltk/parser/exceptions/bad_token_exception.cr","line_number":1,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/bad_token_exception.cr"},{"filename":"cltk/parser/exceptions/internal_parser_exception.cr","line_number":1,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/internal_parser_exception.cr"},{"filename":"cltk/parser/exceptions/parser_construction_exception.cr","line_number":1,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/parser_construction_exception.cr"},{"filename":"cltk/parser/exceptions/handled_error_exception.cr","line_number":1,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/handled_error_exception.cr"},{"filename":"cltk/parser/exceptions/not_in_language_exception.cr","line_number":1,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/not_in_language_exception.cr"},{"filename":"cltk/parser/exceptions/useless_parser_exception.cr","line_number":1,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/useless_parser_exception.cr"},{"filename":"cltk/parser/environment.cr","line_number":1,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/environment.cr"},{"filename":"cltk/parser/type.cr","line_number":2,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/type.cr"},{"filename":"cltk/parser/parse_stack.cr","line_number":1,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr"},{"filename":"cltk/parser/state.cr","line_number":1,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr"},{"filename":"cltk/parser/prod_proc.cr","line_number":1,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/prod_proc.cr"},{"filename":"cltk/parser/actions.cr","line_number":1,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr"},{"filename":"cltk/parser/msgpack.cr","line_number":5,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr"},{"filename":"cltk/parser.cr","line_number":36,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr"},{"filename":"cltk/lexers/calculator.cr","line_number":12,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexers/calculator.cr"},{"filename":"cltk/parser/parser_concern.cr","line_number":14,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parser_concern.cr"},{"filename":"cltk/parser/prod_proc_debug.cr","line_number":1,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/prod_proc_debug.cr"},{"filename":"cltk/parsers/infix_calc.cr","line_number":13,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr"},{"filename":"cltk/parsers/postfix_calc.cr","line_number":14,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr"},{"filename":"cltk/parsers/prefix_calc.cr","line_number":14,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr"},{"filename":"cltk.cr","line_number":3,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.1\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"The CLTK root module","summary":"<p>The CLTK root module</p>","class_methods":[{"id":"is_nonterminal?(sym)-class-method","html_id":"is_nonterminal?(sym)-class-method","name":"is_nonterminal?","doc":null,"summary":null,"abstract":false,"args":[{"name":"sym","doc":null,"default_value":"","external_name":"sym","restriction":""}],"args_string":"(sym)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L7","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L7","def":{"name":"is_nonterminal?","args":[{"name":"sym","doc":null,"default_value":"","external_name":"sym","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"sym && (sym.to_s == sym.to_s.downcase)"}},{"id":"is_terminal?(sym)-class-method","html_id":"is_terminal?(sym)-class-method","name":"is_terminal?","doc":null,"summary":null,"abstract":false,"args":[{"name":"sym","doc":null,"default_value":"","external_name":"sym","restriction":""}],"args_string":"(sym)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L3","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L3","def":{"name":"is_terminal?","args":[{"name":"sym","doc":null,"default_value":"","external_name":"sym","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"sym && ((s = sym.to_s) == s.upcase)"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/ASTNode","path":"CLTK/ASTNode.html","kind":"class","full_name":"CLTK::ASTNode","name":"ASTNode","abstract":true,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/ast.cr","line_number":2,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/ast.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VALUES","name":"VALUES","value":"[] of Tuple(Symbol, Object.class)","doc":null,"summary":null},{"id":"VISITS","name":"VISITS","value":"[] of Tuple(Symbol, Array(Symbol))","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK","kind":"module","full_name":"CLTK","name":"CLTK"},"doc":null,"summary":null,"class_methods":[{"id":"values-class-method","html_id":"values-class-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/ast.cr#L38","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/ast.cr#L38","def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"NamedTuple.new"}}],"constructors":[],"instance_methods":[{"id":"==(other)-instance-method","html_id":"==(other)-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/ast.cr#L46","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/ast.cr#L46","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class == other.class"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/ast.cr#L68","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/ast.cr#L68","def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nif clone.responds_to?(:finalize)\n  GC.add_finalizer(clone)\nend\nclone\n"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/ast.cr#L42","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/ast.cr#L42","def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"NamedTuple.new"}}],"macros":[{"id":"accessors(name,type,default)-macro","html_id":"accessors(name,type,default)-macro","name":"accessors","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(name, type, default)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/ast.cr#L166","def":{"name":"accessors","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        def \n\\{\n{name}}\n          @\n\\{\n{name}}\n        \nend\n\n        def \n\\{\n{name}}=(@\n\\{\n{name}} : \n\\{\n{type}}); \nend\n      \n"}},{"id":"make_value_methods-macro","html_id":"make_value_methods-macro","name":"make_value_methods","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/ast.cr#L3","def":{"name":"make_value_methods","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      macro accessors(name, type, default)\n        def \\\n\\{\n{name}}\n          @\\\n\\{\n{name}}\n        \nend\n\n        def \\\n\\{\n{name}}=(@\\\n\\{\n{name}} : \\\n\\{\n{type}}); \nend\n      \nend\n\n      macro traverse(name, *values)\n        \n\\{%\n          \nvisit = VISITS.find(&.[0].==(name))\n          unless visit\n            VISITS << \n{name, [] of Symbol}\n            visit = VISITS.find(&.[0].==(name))\n          \nend\n          values.map do |value|\n            visit[1] = visit[1] + [value]\n          \nend\n        %}\n      \nend\n\n      macro values(args)\n        \n\\{%\n          \nargs.keys.map do |k|\n            VALUES << \n{ k, args[k] }\n          \nend\n        %}\n        property \n\\{\n{args.keys.map\n{|k| \"#{k} : #{args[k]}\"}.join(\", \").id}}\n      \nend\n\n      macro inherited\n        make_value_methods\n      \nend\n    \n"}},{"id":"traverse(name,*values)-macro","html_id":"traverse(name,*values)-macro","name":"traverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(name, *values)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/ast.cr#L166","def":{"name":"traverse","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% visit = VISITS.find do |__arg0|\n  __arg0[0] == name\nend\nunless visit\n  VISITS << {name, [] of Symbol}\n  visit = VISITS.find do |__arg1|\n    __arg1[0] == name\n  end\nend\nvalues.map do |value|\n  visit[1] = visit[1] + [value]\nend\n %}\n\n      \n"}},{"id":"values(args)-macro","html_id":"values(args)-macro","name":"values","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/ast.cr#L166","def":{"name":"values","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% args.keys.map do |k|\n  VALUES << {k, args[k]}\nend %}\n\n        property \n{{ (args.keys.map do |k|\n  \"#{k} : #{args[k]}\"\nend.join(\", \")).id }}\n\n      \n"}}],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/CFG","path":"CLTK/CFG.html","kind":"class","full_name":"CLTK::CFG","name":"CFG","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/cfg/production.cr","line_number":3,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/production.cr"},{"filename":"cltk/cfg/item.cr","line_number":3,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/item.cr"},{"filename":"cltk/cfg.cr","line_number":17,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr"},{"filename":"cltk/parser/msgpack.cr","line_number":98,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK","kind":"module","full_name":"CLTK","name":"CLTK"},"doc":"The CFG class is used to represent context-free grammars.  It is used by\nthe CLTK::Parser class to represent the parser's grammar, but can also be\nused to manipulate arbitrary CFGs.","summary":"<p>The CFG class is used to represent context-free grammars.</p>","class_methods":[{"id":"is_nonterminal?(sym)-class-method","html_id":"is_nonterminal?(sym)-class-method","name":"is_nonterminal?","doc":null,"summary":null,"abstract":false,"args":[{"name":"sym","doc":null,"default_value":"","external_name":"sym","restriction":""}],"args_string":"(sym)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L289","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L289","def":{"name":"is_nonterminal?","args":[{"name":"sym","doc":null,"default_value":"","external_name":"sym","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"sym && (sym.to_s == sym.to_s.downcase)"}},{"id":"is_terminal?(sym)-class-method","html_id":"is_terminal?(sym)-class-method","name":"is_terminal?","doc":null,"summary":null,"abstract":false,"args":[{"name":"sym","doc":null,"default_value":"","external_name":"sym","restriction":""}],"args_string":"(sym)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L285","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L285","def":{"name":"is_terminal?","args":[{"name":"sym","doc":null,"default_value":"","external_name":"sym","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"sym && ((s = sym.to_s) == s.upcase)"}}],"constructors":[],"instance_methods":[{"id":"add_production(production)-instance-method","html_id":"add_production(production)-instance-method","name":"add_production","doc":"Adds *production* to the appropriate internal data structures.\n\n@param [Production] production The production to add to the grammar.\n\n@return [void]","summary":"<p>Adds <em>production</em> to the appropriate internal data structures.</p>","abstract":false,"args":[{"name":"production","doc":null,"default_value":"","external_name":"production","restriction":""}],"args_string":"(production)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L261","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L261","def":{"name":"add_production","args":[{"name":"production","doc":null,"default_value":"","external_name":"production","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@productions_id[production.id] = production\n@productions_sym[production.lhs] << production\nproduction\n"}},{"id":"build_list_production(name:String,list_elements:String|Array(String),separator=&quot;&quot;)-instance-method","html_id":"build_list_production(name:String,list_elements:String|Array(String),separator=&amp;quot;&amp;quot;)-instance-method","name":"build_list_production","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":"String | Array(String)"},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"args_string":"(name : String, list_elements : String | Array(String), separator = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L187","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L187","def":{"name":"build_list_production","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":"String | Array(String)"},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"name_prime = \"#{name}_prime\"\nproduction = (self.production(name, \"\"))[:production]\n@callback.call(:elp, :empty, production, [] of Int32)\nproduction = (self.production(name, name_prime))[:production]\n@callback.call(:elp, :nonempty, production, [] of Int32)\nself.build_nonempty_list_production(name_prime, list_elements, separator)\nname\n"}},{"id":"build_nonempty_list_production(name:String,list_elements:String|Array(String),separator=&quot;&quot;)-instance-method","html_id":"build_nonempty_list_production(name:String,list_elements:String|Array(String),separator=&amp;quot;&amp;quot;)-instance-method","name":"build_nonempty_list_production","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":"String | Array(String)"},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"args_string":"(name : String, list_elements : String | Array(String), separator = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L207","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L207","def":{"name":"build_nonempty_list_production","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":"String | Array(String)"},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"build_elements_productions = false\nlist_element_string = if list_elements.is_a?(Array)\n  if list_elements.empty?\n    raise(ArgumentError.new(\"Parameter list_elements must not be empty.\"))\n  else\n    if list_elements.size == 1\n      list_elements.first\n    else\n      build_elements_productions = true\n      \"#{name}_list_elements\"\n    end\n  end\nelse\n  list_elements\nend\nlist_element_selected_string = list_element_string.split.map do |s|\n  \".#{s}\"\nend.join(' ')\nproduction = (self.production(name, list_element_string))[:production]\n@callback.call(:nelp, :single, production, [] of Int32)\nproduction, selections = (self.production(name, \".#{name} #{separator} #{list_element_selected_string}\")).values\n@callback.call(:nelp, :multiple, production, selections)\nif build_elements_productions\n  if list_elements.is_a?(Array)\n    list_elements.each do |element|\n      production = (self.production(list_element_string, element))[:production]\n      @callback.call(:nelp, :elements, production, [] of Int32)\n    end\n  end\nend\nname\n"}},{"id":"build_optional_production(name:String,opt_symbol:String)-instance-method","html_id":"build_optional_production(name:String,opt_symbol:String)-instance-method","name":"build_optional_production","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"opt_symbol","doc":null,"default_value":"","external_name":"opt_symbol","restriction":"String"}],"args_string":"(name : String, opt_symbol : String)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L163","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L163","def":{"name":"build_optional_production","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"opt_symbol","doc":null,"default_value":"","external_name":"opt_symbol","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @productions_sym.has_key?(name)\n  return name\nend\nproduction = self.add_production(Production.new(self.next_id, name, [] of String))\n@callback.call(:optional, :empty, production, [] of Int32)\nproduction = self.add_production(Production.new(self.next_id, name, [opt_symbol]))\n@callback.call(:optional, :nonempty, production, [] of Int32)\n@nonterms << name\nname\n"}},{"id":"callback(&callback:Symbol,Symbol,Production,Array(Int32)->Nil)-instance-method","html_id":"callback(&amp;callback:Symbol,Symbol,Production,Array(Int32)-&gt;Nil)-instance-method","name":"callback","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&callback : Symbol, Symbol, Production, Array(Int32) -> Nil)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L267","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L267","def":{"name":"callback","args":[],"double_splat":null,"splat_index":null,"yields":4,"block_arg":{"name":"callback","doc":null,"default_value":"","external_name":"callback","restriction":"(Symbol, Symbol, Production, Array(Int32) -> Nil)"},"return_type":"","visibility":"Public","body":"@callback = callback\nnil\n"}},{"id":"clause(expression:Symbol|String)-instance-method","html_id":"clause(expression:Symbol|String)-instance-method","name":"clause","doc":null,"summary":null,"abstract":false,"args":[{"name":"expression","doc":null,"default_value":"","external_name":"expression","restriction":"Symbol | String"}],"args_string":"(expression : Symbol | String)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L77","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L77","def":{"name":"clause","args":[{"name":"expression","doc":null,"default_value":"","external_name":"expression","restriction":"Symbol | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @curr_lhs\nelse\n  raise(GrammarError.new(\"CFG#clause called outside of CFG#production block.\"))\nend\nlhs = @curr_lhs.to_s\nrhs = [] of String\ntokens = @lexer.lex(expression.to_s)\nselections = [] of Int32\n@start_symbol = @start_symbol.empty? ? lhs : @start_symbol\nsymbol_count = 0\ntokens.each_with_index do |token, i|\n  if token.type.in?([:TERM, :NONTERM])\n    if token.type == (:TERM)\n      @terms << (token.value.as(String))\n    else\n      @nonterms << (token.value.as(String))\n    end\n    if (    next_token = tokens[i + 1]?)\n      tvalue = token.value.to_s.downcase\n      rhs << (case next_token.type\n      when :QUESTION\n        self.get_optional_production(\"#{tvalue}_optional\", token.value.as(String))\n      when :STAR\n        self.get_list_production(\"#{tvalue}_list\", token.value.as(String))\n      when :PLUS\n        self.get_nonempty_list_production(\"#{tvalue}_nonempty_list\", token.value.as(String))\n      else\n        token.value.as(String)\n      end)\n      symbol_count = symbol_count + 1\n    else\n      rhs << (token.value.as(String))\n    end\n  else\n    if token.type == (:DOT)\n      selections << symbol_count\n    end\n  end\nend\nproduction = Production.new(self.next_id, lhs, rhs)\n@production_buffer << {production: production, selections: selections}\n@nonterms << lhs\nself.add_production(production)\nreturn {production: production, selections: selections}\n"}},{"id":"curr_lhs:String?-instance-method","html_id":"curr_lhs:String?-instance-method","name":"curr_lhs","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L41","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L41","def":{"name":"curr_lhs","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@curr_lhs"}},{"id":"curr_lhs=(curr_lhs)-instance-method","html_id":"curr_lhs=(curr_lhs)-instance-method","name":"curr_lhs=","doc":null,"summary":null,"abstract":false,"args":[{"name":"curr_lhs","doc":null,"default_value":"","external_name":"curr_lhs","restriction":""}],"args_string":"(curr_lhs)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L41","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L41","def":{"name":"curr_lhs=","args":[{"name":"curr_lhs","doc":null,"default_value":"","external_name":"curr_lhs","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@curr_lhs = curr_lhs"}},{"id":"first_set(sentence:String|Array(String)):Array(String)-instance-method","html_id":"first_set(sentence:String|Array(String)):Array(String)-instance-method","name":"first_set","doc":null,"summary":null,"abstract":false,"args":[{"name":"sentence","doc":null,"default_value":"","external_name":"sentence","restriction":"String | Array(String)"}],"args_string":"(sentence : String | Array(String)) : Array(String)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L293","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L293","def":{"name":"first_set","args":[{"name":"sentence","doc":null,"default_value":"","external_name":"sentence","restriction":"String | Array(String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(String)","visibility":"Public","body":"if sentence.is_a?(String)\n  first_set_prime(sentence)\nelse\n  sentence.is_a?(Array) && (sentence.reduce(true) do |m, sym|\n    m && (self.symbols.includes?(sym))\n  end)\n  set0 = [] of String\n  all_have_empty = true\n  sentence.each do |sym|\n    set0 = set0 | ((set1 = self.first_set(sym)) - [\"ɛ\"])\n    if (    all_have_empty = set1.includes?(\"ɛ\"))\n    else\n      break\n    end\n  end\n  if all_have_empty\n    set0 + [\"ɛ\"]\n  else\n    set0\n  end\nend"}},{"id":"follow_set(sym0:String,seen_lh_sides=[]ofString):Array(String)-instance-method","html_id":"follow_set(sym0:String,seen_lh_sides=[]ofString):Array(String)-instance-method","name":"follow_set","doc":null,"summary":null,"abstract":false,"args":[{"name":"sym0","doc":null,"default_value":"","external_name":"sym0","restriction":"String"},{"name":"seen_lh_sides","doc":null,"default_value":"[] of String","external_name":"seen_lh_sides","restriction":""}],"args_string":"(sym0 : String, seen_lh_sides = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">String</span>) : Array(String)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L363","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L363","def":{"name":"follow_set","args":[{"name":"sym0","doc":null,"default_value":"","external_name":"sym0","restriction":"String"},{"name":"seen_lh_sides","doc":null,"default_value":"[] of String","external_name":"seen_lh_sides","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(String)","visibility":"Public","body":"if @follows.has_key?(sym0)\n  return @follows[sym0]\nend\nif @nonterms.includes?(sym0)\n  set0 = [] of String\n  if sym0 == @start_symbol\n    set0 << \"EOS\"\n  end\n  @productions_id.values.each do |production|\n    production.rhs.each_with_index do |sym1, i|\n      if (i + 1) < production.rhs.size\n        if sym0 == sym1\n          set0 = set0 | ((set1 = self.first_set(production.rhs[(i + 1)..-1])) - [\"ɛ\"])\n          if set1.includes?(\"ɛ\")\n            set0 = set0 | (self.follow_set(production.lhs))\n          end\n        end\n      else\n        if ((sym0 != production.lhs) && (sym0 == sym1)) && (!(seen_lh_sides.includes?(production.lhs)))\n          set0 = set0 | (self.follow_set(production.lhs, seen_lh_sides << production.lhs))\n        end\n      end\n    end\n  end\n  if seen_lh_sides.empty? || (!set0.empty?)\n    __temp_25 = sym0\n    @follows[__temp_25]? || (@follows[__temp_25] = set0)\n  else\n    set0\n  end\nelse\n  [] of String\nend\n"}},{"id":"get_list_production(name,list_elements:String|Array(String),separator=&quot;&quot;)-instance-method","html_id":"get_list_production(name,list_elements:String|Array(String),separator=&amp;quot;&amp;quot;)-instance-method","name":"get_list_production","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":"String | Array(String)"},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"args_string":"(name, list_elements : String | Array(String), separator = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L147","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L147","def":{"name":"get_list_production","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":"String | Array(String)"},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if name.in?(@nonterms)\n  name\nelse\n  build_list_production(name, list_elements, separator)\nend"}},{"id":"get_nonempty_list_production(name:String,list_elements:String|Array(String),separator=&quot;&quot;)-instance-method","html_id":"get_nonempty_list_production(name:String,list_elements:String|Array(String),separator=&amp;quot;&amp;quot;)-instance-method","name":"get_nonempty_list_production","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":"String | Array(String)"},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"args_string":"(name : String, list_elements : String | Array(String), separator = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L155","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L155","def":{"name":"get_nonempty_list_production","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":"String | Array(String)"},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if name.in?(@nonterms)\n  name\nelse\n  build_nonempty_list_production(name, list_elements, separator = \"\")\nend"}},{"id":"get_optional_production(name:String,list_elements:String|Array(String))-instance-method","html_id":"get_optional_production(name:String,list_elements:String|Array(String))-instance-method","name":"get_optional_production","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":"String | Array(String)"}],"args_string":"(name : String, list_elements : String | Array(String))","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L139","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L139","def":{"name":"get_optional_production","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":"String | Array(String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if name.in?(@nonterms)\n  name\nelse\n  build_optional_production(name, list_elements)\nend"}},{"id":"next_id-instance-method","html_id":"next_id-instance-method","name":"next_id","doc":"@return [Integer]  ID for the next production to be defined.","summary":"<p>@return [Integer]  ID for the next production to be defined.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L47","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L47","def":{"name":"next_id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@production_counter = @production_counter + 1"}},{"id":"nonterms-instance-method","html_id":"nonterms-instance-method","name":"nonterms","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L281","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L281","def":{"name":"nonterms","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@nonterms.clone"}},{"id":"production(symbol:Symbol|String,expression:String?=nil)-instance-method","html_id":"production(symbol:Symbol|String,expression:String?=nil)-instance-method","name":"production","doc":null,"summary":null,"abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":"Symbol | String"},{"name":"expression","doc":null,"default_value":"nil","external_name":"expression","restriction":"String | ::Nil"}],"args_string":"(symbol : Symbol | String, expression : String? = <span class=\"n\">nil</span>)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L62","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L62","def":{"name":"production","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":"Symbol | String"},{"name":"expression","doc":null,"default_value":"nil","external_name":"expression","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"with_curr_lhs(symbol) do\n  clause(expression)\nend"}},{"id":"production(symbol:Symbol|String,expression:String?=nil,&block)-instance-method","html_id":"production(symbol:Symbol|String,expression:String?=nil,&amp;block)-instance-method","name":"production","doc":null,"summary":null,"abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":"Symbol | String"},{"name":"expression","doc":null,"default_value":"nil","external_name":"expression","restriction":"String | ::Nil"}],"args_string":"(symbol : Symbol | String, expression : String? = <span class=\"n\">nil</span>, &block)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L51","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L51","def":{"name":"production","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":"Symbol | String"},{"name":"expression","doc":null,"default_value":"nil","external_name":"expression","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"with_curr_lhs(symbol) do\n  if expression\n    self.clause(expression)\n  else\n    with self yield\n    @production_buffer.dup\n  end\nend"}},{"id":"productions_id:Hash(Int32,CLTK::CFG::Production)-instance-method","html_id":"productions_id:Hash(Int32,CLTK::CFG::Production)-instance-method","name":"productions_id","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Hash(Int32, CLTK::CFG::Production)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L44","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L44","def":{"name":"productions_id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@productions_id"}},{"id":"productions_sym:Hash(String,Array(CLTK::CFG::Production))-instance-method","html_id":"productions_sym:Hash(String,Array(CLTK::CFG::Production))-instance-method","name":"productions_sym","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Hash(String, Array(CLTK::CFG::Production))","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L43","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L43","def":{"name":"productions_sym","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@productions_sym"}},{"id":"start_symbol:String-instance-method","html_id":"start_symbol:String-instance-method","name":"start_symbol","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L42","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L42","def":{"name":"start_symbol","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@start_symbol"}},{"id":"symbols-instance-method","html_id":"symbols-instance-method","name":"symbols","doc":"@return [Array<Symbol>]  All symbols used in the grammar's definition.","summary":"<p>@return [Array&lt;Symbol>]  All symbols used in the grammar's definition.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L273","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L273","def":{"name":"symbols","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.terms | self.nonterms"}},{"id":"terms-instance-method","html_id":"terms-instance-method","name":"terms","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L277","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L277","def":{"name":"terms","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@terms.clone"}},{"id":"with_curr_lhs(symbol,&block)-instance-method","html_id":"with_curr_lhs(symbol,&amp;block)-instance-method","name":"with_curr_lhs","doc":null,"summary":null,"abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""}],"args_string":"(symbol, &block)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L68","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L68","def":{"name":"with_curr_lhs","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"@production_buffer = [] of ProductionBufferType\nprev_lhs = @curr_lhs\n@curr_lhs = symbol.to_s\nret_val = yield\n@curr_lhs = prev_lhs\nreturn ret_val\n"}}],"macros":[],"types":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/CFG/GrammarError","path":"CLTK/CFG/GrammarError.html","kind":"class","full_name":"CLTK::CFG::GrammarError","name":"GrammarError","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/cfg.cr","line_number":21,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/CFG","kind":"class","full_name":"CLTK::CFG","name":"CFG"},"doc":"An exception class that represents a problem with a context-free\ngrammar's definition.","summary":"<p>An exception class that represents a problem with a context-free grammar's definition.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/CFG/Item","path":"CLTK/CFG/Item.html","kind":"class","full_name":"CLTK::CFG::Item","name":"Item","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/CFG/Production","kind":"class","full_name":"CLTK::CFG::Production","name":"Production"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/CFG/Production","kind":"class","full_name":"CLTK::CFG::Production","name":"Production"},{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/cfg/item.cr","line_number":5,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/item.cr"},{"filename":"cltk/parser/msgpack.cr","line_number":102,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/CFG","kind":"class","full_name":"CLTK::CFG","name":"CFG"},"doc":"The Item class represents a CFG production with dot in it.","summary":"<p>The Item class represents a CFG production with dot in it.</p>","class_methods":[],"constructors":[{"id":"new(dot:Int32,id:Int32,lhs:String,rhs:Array(String))-class-method","html_id":"new(dot:Int32,id:Int32,lhs:String,rhs:Array(String))-class-method","name":"new","doc":"Instantiates a new Item object with a dot located before the\nsymbol at index *dot* of the right-hand side.  The remaining\narguments (*args*) should be as specified by\n{Production#initialize}.\n\n@param [Integer]        dot   Location of the dot in this Item.\n@param [Array<Object>]  args  (see {Production#initialize})","summary":"<p>Instantiates a new Item object with a dot located before the symbol at index <em>dot</em> of the right-hand side.</p>","abstract":false,"args":[{"name":"dot","doc":null,"default_value":"","external_name":"dot","restriction":"Int32"},{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Int32"},{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"String"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Array(String)"}],"args_string":"(dot : Int32, id : Int32, lhs : String, rhs : Array(String))","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/item.cr#L16","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/item.cr#L16","def":{"name":"new","args":[{"name":"dot","doc":null,"default_value":"","external_name":"dot","restriction":"Int32"},{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Int32"},{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"String"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Array(String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(dot, id, lhs, rhs)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(__temp_93:MessagePack::Unpacker)-class-method","html_id":"new(__temp_93:MessagePack::Unpacker)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"__temp_93","doc":null,"default_value":"","external_name":"__temp_93","restriction":"MessagePack::Unpacker"}],"args_string":"(__temp_93 : MessagePack::Unpacker)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L103","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L103","def":{"name":"new","args":[{"name":"__temp_93","doc":null,"default_value":"","external_name":"__temp_93","restriction":"MessagePack::Unpacker"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(__temp_93)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:Item)-instance-method","html_id":"==(other:Item)-instance-method","name":"==","doc":"Compares two items.\n\n@param [Item]  other  Another item to compare to.\n\n@return [Boolean]","summary":"<p>Compares two items.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Item"}],"args_string":"(other : Item)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/item.cr#L25","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/item.cr#L25","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Item"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"((self.dot == other.dot) && (self.lhs == other.lhs)) && (self.rhs == other.rhs)"}},{"id":"advance-instance-method","html_id":"advance-instance-method","name":"advance","doc":"Moves the items dot forward by one if the end of the right-hand\nside hasn't already been reached.\n\n@return [Integer, nil]","summary":"<p>Moves the items dot forward by one if the end of the right-hand side hasn't already been reached.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/item.cr#L33","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/item.cr#L33","def":{"name":"advance","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @dot < @rhs.size\n  @dot = @dot + 1\nend"}},{"id":"at_end?-instance-method","html_id":"at_end?-instance-method","name":"at_end?","doc":"Tests to see if the dot is at the end of the right-hand side.\n\n@return [Boolean]","summary":"<p>Tests to see if the dot is at the end of the right-hand side.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/item.cr#L42","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/item.cr#L42","def":{"name":"at_end?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@dot == @rhs.size"}},{"id":"copy-instance-method","html_id":"copy-instance-method","name":"copy","doc":"@return [Item]  A new copy of this item.","summary":"<p>@return [Item]  A new copy of this item.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/item.cr#L47","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/item.cr#L47","def":{"name":"copy","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Item.new(@dot, @id, @lhs, @rhs)"}},{"id":"dot:Int32-instance-method","html_id":"dot:Int32-instance-method","name":"dot","doc":"@return [Integer] Index of the next symbol in this item.","summary":"<p>@return [Integer] Index of the next symbol in this item.</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L103","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L103","def":{"name":"dot","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@dot"}},{"id":"dot=(_dot:Int32)-instance-method","html_id":"dot=(_dot:Int32)-instance-method","name":"dot=","doc":null,"summary":null,"abstract":false,"args":[{"name":"_dot","doc":null,"default_value":"","external_name":"_dot","restriction":"Int32"}],"args_string":"(_dot : Int32)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L103","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L103","def":{"name":"dot=","args":[{"name":"_dot","doc":null,"default_value":"","external_name":"_dot","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@dot = _dot"}},{"id":"id:Int32-instance-method","html_id":"id:Int32-instance-method","name":"id","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L103","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L103","def":{"name":"id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id"}},{"id":"id=(_id:Int32)-instance-method","html_id":"id=(_id:Int32)-instance-method","name":"id=","doc":null,"summary":null,"abstract":false,"args":[{"name":"_id","doc":null,"default_value":"","external_name":"_id","restriction":"Int32"}],"args_string":"(_id : Int32)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L103","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L103","def":{"name":"id=","args":[{"name":"_id","doc":null,"default_value":"","external_name":"_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id = _id"}},{"id":"lhs:String-instance-method","html_id":"lhs:String-instance-method","name":"lhs","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L103","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L103","def":{"name":"lhs","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@lhs"}},{"id":"lhs=(_lhs:String)-instance-method","html_id":"lhs=(_lhs:String)-instance-method","name":"lhs=","doc":null,"summary":null,"abstract":false,"args":[{"name":"_lhs","doc":null,"default_value":"","external_name":"_lhs","restriction":"String"}],"args_string":"(_lhs : String)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L103","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L103","def":{"name":"lhs=","args":[{"name":"_lhs","doc":null,"default_value":"","external_name":"_lhs","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@lhs = _lhs"}},{"id":"next_symbol-instance-method","html_id":"next_symbol-instance-method","name":"next_symbol","doc":"Returns the symbol located after the dot.\n\n@return [Symbol]  Symbol located after the dot (at the index indicated by the {#dot} attribute).","summary":"<p>Returns the symbol located after the dot.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/item.cr#L54","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/item.cr#L54","def":{"name":"next_symbol","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @dot < @rhs.size\n  @rhs[@dot]\nelse\n  nil\nend"}},{"id":"rhs:Array(String)-instance-method","html_id":"rhs:Array(String)-instance-method","name":"rhs","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(String)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L103","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L103","def":{"name":"rhs","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@rhs"}},{"id":"rhs=(_rhs:Array(String))-instance-method","html_id":"rhs=(_rhs:Array(String))-instance-method","name":"rhs=","doc":null,"summary":null,"abstract":false,"args":[{"name":"_rhs","doc":null,"default_value":"","external_name":"_rhs","restriction":"Array(String)"}],"args_string":"(_rhs : Array(String))","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L103","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L103","def":{"name":"rhs=","args":[{"name":"_rhs","doc":null,"default_value":"","external_name":"_rhs","restriction":"Array(String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@rhs = _rhs"}},{"id":"to_msgpack(packer:MessagePack::Packer)-instance-method","html_id":"to_msgpack(packer:MessagePack::Packer)-instance-method","name":"to_msgpack","doc":null,"summary":null,"abstract":false,"args":[{"name":"packer","doc":null,"default_value":"","external_name":"packer","restriction":"MessagePack::Packer"}],"args_string":"(packer : MessagePack::Packer)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L103","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L103","def":{"name":"to_msgpack","args":[{"name":"packer","doc":null,"default_value":"","external_name":"packer","restriction":"MessagePack::Packer"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ready_fields = 0\n_id = @id\nready_fields = ready_fields + 1\n_dot = @dot\nready_fields = ready_fields + 1\n_lhs = @lhs\nready_fields = ready_fields + 1\n_rhs = @rhs\nready_fields = ready_fields + 1\npacker.write_hash_start(ready_fields)\nif _id.nil?\n  packer.write(\"id\")\n  nil.to_msgpack(packer)\nelse\n  packer.write(\"id\")\n  _id.to_msgpack(packer)\nend\nif _dot.nil?\n  packer.write(\"dot\")\n  nil.to_msgpack(packer)\nelse\n  packer.write(\"dot\")\n  _dot.to_msgpack(packer)\nend\nif _lhs.nil?\n  packer.write(\"lhs\")\n  nil.to_msgpack(packer)\nelse\n  packer.write(\"lhs\")\n  _lhs.to_msgpack(packer)\nend\nif _rhs.nil?\n  packer.write(\"rhs\")\n  nil.to_msgpack(packer)\nelse\n  packer.write(\"rhs\")\n  _rhs.to_msgpack(packer)\nend\n"}},{"id":"to_s(padding=0)-instance-method","html_id":"to_s(padding=0)-instance-method","name":"to_s","doc":"Returns a string representation of this item.\n\n@param [Integer]  padding  The ammount of padding spaces to add to the beginning of the string.\n\n@return [String]","summary":"<p>Returns a string representation of this item.</p>","abstract":false,"args":[{"name":"padding","doc":null,"default_value":"0","external_name":"padding","restriction":""}],"args_string":"(padding = <span class=\"n\">0</span>)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/item.cr#L67","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/item.cr#L67","def":{"name":"to_s","args":[{"name":"padding","doc":null,"default_value":"0","external_name":"padding","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(((Array(String).new(padding) do\n  \" \"\nend).join + @lhs) + \"->\") + ((@rhs.map do |s|\n  s.to_s\nend.insert(@dot, \"·\")).join(' '))"}}],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/CFG/Production","path":"CLTK/CFG/Production.html","kind":"class","full_name":"CLTK::CFG::Production","name":"Production","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/cfg/production.cr","line_number":6,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/production.cr"},{"filename":"cltk/parser/msgpack.cr","line_number":99,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/CFG/Item","kind":"class","full_name":"CLTK::CFG::Item","name":"Item"}],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/CFG","kind":"class","full_name":"CLTK::CFG","name":"CFG"},"doc":"Oddly enough, the Production class represents a production in a\ncontext-free grammar.","summary":"<p>Oddly enough, the Production class represents a production in a context-free grammar.</p>","class_methods":[],"constructors":[{"id":"new(id:Int32,lhs:String,rhs:Array(String))-class-method","html_id":"new(id:Int32,lhs:String,rhs:Array(String))-class-method","name":"new","doc":"Instantiates a new Production object with the specified ID,\nand left- and right-hand sides.\n\n@param [Integer]        id   ID number of this production.\n@param [Symbol]         lhs  Left-hand side of the production.\n@param [Array<Symbol>]  rhs  Right-hand side of the production.","summary":"<p>Instantiates a new Production object with the specified ID, and left- and right-hand sides.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Int32"},{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"String"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Array(String)"}],"args_string":"(id : Int32, lhs : String, rhs : Array(String))","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/production.cr#L22","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/production.cr#L22","def":{"name":"new","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Int32"},{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"String"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Array(String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(id, lhs, rhs)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(__temp_85:MessagePack::Unpacker)-class-method","html_id":"new(__temp_85:MessagePack::Unpacker)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"__temp_85","doc":null,"default_value":"","external_name":"__temp_85","restriction":"MessagePack::Unpacker"}],"args_string":"(__temp_85 : MessagePack::Unpacker)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L100","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L100","def":{"name":"new","args":[{"name":"__temp_85","doc":null,"default_value":"","external_name":"__temp_85","restriction":"MessagePack::Unpacker"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(__temp_85)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other)-instance-method","html_id":"==(other)-instance-method","name":"==","doc":"Comparese on production to another.  Returns true only if the\nleft- and right- hand sides match.\n\n@param [Production]  other  Another production to compare to.\n\n@return [Boolean]","summary":"<p>Comparese on production to another.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/production.cr#L30","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/production.cr#L30","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"((self.id == other.id) && (self.lhs == other.lhs)) && (self.rhs == other.rhs)"}},{"id":"copy-instance-method","html_id":"copy-instance-method","name":"copy","doc":"@return [Production]  A new copy of this production.","summary":"<p>@return [Production]  A new copy of this production.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/production.cr#L37","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/production.cr#L37","def":{"name":"copy","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"({{ @type.id }}).new(@id, @lhs, @rhs)"}},{"id":"id:Int32-instance-method","html_id":"id:Int32-instance-method","name":"id","doc":"@return [Integer]  ID of this production.","summary":"<p>@return [Integer]  ID of this production.</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L100","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L100","def":{"name":"id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id"}},{"id":"id=(_id:Int32)-instance-method","html_id":"id=(_id:Int32)-instance-method","name":"id=","doc":null,"summary":null,"abstract":false,"args":[{"name":"_id","doc":null,"default_value":"","external_name":"_id","restriction":"Int32"}],"args_string":"(_id : Int32)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L100","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L100","def":{"name":"id=","args":[{"name":"_id","doc":null,"default_value":"","external_name":"_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id = _id"}},{"id":"last_terminal-instance-method","html_id":"last_terminal-instance-method","name":"last_terminal","doc":"@return [Symbol]  The last terminal in the right-hand side of the production.","summary":"<p>@return [Symbol]  The last terminal in the right-hand side of the production.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/production.cr#L42","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/production.cr#L42","def":{"name":"last_terminal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@rhs.reduce(nil) do |m, sym|\n  if CFG.is_terminal?(sym)\n    sym\n  else\n    m\n  end\nend"}},{"id":"lhs:String-instance-method","html_id":"lhs:String-instance-method","name":"lhs","doc":"@return [Symbol]  Left-hand side of this production.","summary":"<p>@return [Symbol]  Left-hand side of this production.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L100","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L100","def":{"name":"lhs","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@lhs"}},{"id":"lhs=(_lhs:String)-instance-method","html_id":"lhs=(_lhs:String)-instance-method","name":"lhs=","doc":null,"summary":null,"abstract":false,"args":[{"name":"_lhs","doc":null,"default_value":"","external_name":"_lhs","restriction":"String"}],"args_string":"(_lhs : String)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L100","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L100","def":{"name":"lhs=","args":[{"name":"_lhs","doc":null,"default_value":"","external_name":"_lhs","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@lhs = _lhs"}},{"id":"rhs:Array(String)-instance-method","html_id":"rhs:Array(String)-instance-method","name":"rhs","doc":"@return [Array<Symbol>]  Right-hand side of this production.","summary":"<p>@return [Array&lt;Symbol>]  Right-hand side of this production.</p>","abstract":false,"args":[],"args_string":" : Array(String)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L100","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L100","def":{"name":"rhs","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@rhs"}},{"id":"rhs=(_rhs:Array(String))-instance-method","html_id":"rhs=(_rhs:Array(String))-instance-method","name":"rhs=","doc":null,"summary":null,"abstract":false,"args":[{"name":"_rhs","doc":null,"default_value":"","external_name":"_rhs","restriction":"Array(String)"}],"args_string":"(_rhs : Array(String))","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L100","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L100","def":{"name":"rhs=","args":[{"name":"_rhs","doc":null,"default_value":"","external_name":"_rhs","restriction":"Array(String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@rhs = _rhs"}},{"id":"to_item-instance-method","html_id":"to_item-instance-method","name":"to_item","doc":"@return [Item]  An Item based on this production.","summary":"<p>@return [Item]  An Item based on this production.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/production.cr#L53","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/production.cr#L53","def":{"name":"to_item","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Item.new(0, @id, @lhs, @rhs)"}},{"id":"to_msgpack(packer:MessagePack::Packer)-instance-method","html_id":"to_msgpack(packer:MessagePack::Packer)-instance-method","name":"to_msgpack","doc":null,"summary":null,"abstract":false,"args":[{"name":"packer","doc":null,"default_value":"","external_name":"packer","restriction":"MessagePack::Packer"}],"args_string":"(packer : MessagePack::Packer)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L100","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L100","def":{"name":"to_msgpack","args":[{"name":"packer","doc":null,"default_value":"","external_name":"packer","restriction":"MessagePack::Packer"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ready_fields = 0\n_id = @id\nready_fields = ready_fields + 1\n_lhs = @lhs\nready_fields = ready_fields + 1\n_rhs = @rhs\nready_fields = ready_fields + 1\npacker.write_hash_start(ready_fields)\nif _id.nil?\n  packer.write(\"id\")\n  nil.to_msgpack(packer)\nelse\n  packer.write(\"id\")\n  _id.to_msgpack(packer)\nend\nif _lhs.nil?\n  packer.write(\"lhs\")\n  nil.to_msgpack(packer)\nelse\n  packer.write(\"lhs\")\n  _lhs.to_msgpack(packer)\nend\nif _rhs.nil?\n  packer.write(\"rhs\")\n  nil.to_msgpack(packer)\nelse\n  packer.write(\"rhs\")\n  _rhs.to_msgpack(packer)\nend\n"}},{"id":"to_s(padding=0)-instance-method","html_id":"to_s(padding=0)-instance-method","name":"to_s","doc":"Returns a string representation of this production.\n\n@param [Integer]  padding  The ammount of padding spaces to add to the beginning of the string.\n\n@return [String]","summary":"<p>Returns a string representation of this production.</p>","abstract":false,"args":[{"name":"padding","doc":null,"default_value":"0","external_name":"padding","restriction":""}],"args_string":"(padding = <span class=\"n\">0</span>)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/production.cr#L62","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg/production.cr#L62","def":{"name":"to_s","args":[{"name":"padding","doc":null,"default_value":"0","external_name":"padding","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if padding.is_a?(Int32)\n  ((0..padding).map do\n    \" \"\n  end.join + \"#{@lhs} -> \") + (@rhs.empty? ? \"ɛ\" : @rhs.map do |s|\n    s.to_s\n  end.join(' '))\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/CFG/ProductionBufferType","path":"CLTK/CFG/ProductionBufferType.html","kind":"alias","full_name":"CLTK::CFG::ProductionBufferType","name":"ProductionBufferType","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cltk/cfg.cr","line_number":23,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":true,"aliased":"NamedTuple(production: CLTK::CFG::Production, selections: Array(Int32))","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/CFG","kind":"class","full_name":"CLTK::CFG","name":"CFG"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/CFG/ProductionCallbackType","path":"CLTK/CFG/ProductionCallbackType.html","kind":"alias","full_name":"CLTK::CFG::ProductionCallbackType","name":"ProductionCallbackType","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cltk/cfg.cr","line_number":24,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":true,"aliased":"Proc(Symbol, Symbol, CLTK::CFG::Production, Array(Int32), Nil)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/CFG","kind":"class","full_name":"CLTK::CFG","name":"CFG"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Lexer","path":"CLTK/Lexer.html","kind":"class","full_name":"CLTK::Lexer","name":"Lexer","abstract":true,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/lexer/exceptions.cr","line_number":2,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/exceptions.cr"},{"filename":"cltk/lexer/environment.cr","line_number":2,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/environment.cr"},{"filename":"cltk/lexer.cr","line_number":21,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK","kind":"module","full_name":"CLTK","name":"CLTK"},"doc":"The Lexer class may be sub-classed to produce new lexers.  These lexers\nhave a lot of features, and are described in the main documentation.","summary":"<p>The Lexer class may be sub-classed to produce new lexers.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"env-instance-method","html_id":"env-instance-method","name":"env","doc":"@return [Environment] Environment used by an instantiated lexer.","summary":"<p>@return [Environment] Environment used by an instantiated lexer.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer.cr#L24","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer.cr#L24","def":{"name":"env","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@env"}}],"macros":[{"id":"rule(rule,state=:default,flags=[]ofSymbol)-macro","html_id":"rule(rule,state=:default,flags=[]ofSymbol)-macro","name":"rule","doc":null,"summary":null,"abstract":false,"args":[{"name":"rule","doc":null,"default_value":"","external_name":"rule","restriction":""},{"name":"state","doc":null,"default_value":":default","external_name":"state","restriction":""},{"name":"flags","doc":null,"default_value":"[] of Symbol","external_name":"flags","restriction":""}],"args_string":"(rule, state = :default, flags = [] of Symbol)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer.cr#L182","def":{"name":"rule","args":[{"name":"rule","doc":null,"default_value":"","external_name":"rule","restriction":""},{"name":"state","doc":null,"default_value":":default","external_name":"state","restriction":""},{"name":"flags","doc":null,"default_value":"[] of Symbol","external_name":"flags","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"      \n{% if rule.is_a?(StringLiteral) %}\n        @@callbacks[{{ state }}] ||= Hash(String, RuleType).new\n        @@callbacks[{{ state }}][{{ rule }}] =\n      {% else %}\n        @@rules[{{ state }}] ||= Hash(Regex, RuleType).new\n        @@rules[{{ state }}][{{ rule }}] =\n      {% end %}\n\n        \n{% if block.is_a?(Nop) %}\n          Tuple.new({{ flags }}, ProcType.new {nil})\n        {% else %}\n         Tuple.new({{ flags }}, ProcType.new do |{{ block.args.first || \"_\".id }}, env|\n          res = yield_with(env.as({{ @type }}::Environment)) do\n             {{ block.body }}\n          end\n          res.is_a?(BlockReturn) ? res : {res, nil}\n        end)\n        {% end %}\n\n    \n"}}],"types":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Lexer/BlockReturn","path":"CLTK/Lexer/BlockReturn.html","kind":"alias","full_name":"CLTK::Lexer::BlockReturn","name":"BlockReturn","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cltk/lexer.cr","line_number":26,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":true,"aliased":"Tuple(Symbol | Nil, String | Nil)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Lexer","kind":"class","full_name":"CLTK::Lexer","name":"Lexer"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Lexer/Environment","path":"CLTK/Lexer/Environment.html","kind":"class","full_name":"CLTK::Lexer::Environment","name":"Environment","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/lexer/environment.cr","line_number":8,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/environment.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Lexer","kind":"class","full_name":"CLTK::Lexer","name":"Lexer"},"doc":"All actions passed to LexerCore.rule are evaluated inside an\ninstance of the Environment class or its subclass (which must have\nthe same name).  This class provides functions for manipulating\nlexer state and flags.\nsee http://carc.in/#/r/1i9","summary":"<p>All actions passed to LexerCore.rule are evaluated inside an instance of the Environment class or its subclass (which must have the same name).</p>","class_methods":[],"constructors":[{"id":"new(start_state,match=nil)-class-method","html_id":"new(start_state,match=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"start_state","doc":null,"default_value":"","external_name":"start_state","restriction":""},{"name":"match","doc":null,"default_value":"nil","external_name":"match","restriction":""}],"args_string":"(start_state, match = <span class=\"n\">nil</span>)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/environment.cr#L27","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/environment.cr#L27","def":{"name":"new","args":[{"name":"start_state","doc":null,"default_value":"","external_name":"start_state","restriction":""},{"name":"match","doc":null,"default_value":"nil","external_name":"match","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(start_state, match)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"clear_flags-instance-method","html_id":"clear_flags-instance-method","name":"clear_flags","doc":"Unsets all flags in the current environment.\n\n@return [void]","summary":"<p>Unsets all flags in the current environment.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/environment.cr#L89","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/environment.cr#L89","def":{"name":"clear_flags","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@flags = Array(Symbol).new\nnil\n"}},{"id":"flags:Array(Symbol)-instance-method","html_id":"flags:Array(Symbol)-instance-method","name":"flags","doc":"@return [Array<Symbol>] Flags currently set in this environment.","summary":"<p>@return [Array&lt;Symbol>] Flags currently set in this environment.</p>","abstract":false,"args":[],"args_string":" : Array(Symbol)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/environment.cr#L10","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/environment.cr#L10","def":{"name":"flags","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@flags"}},{"id":"match-instance-method","html_id":"match-instance-method","name":"match","doc":"@return [Match] Match object generated by a rule's regular expression.","summary":"<p>@return [Match] Match object generated by a rule's regular expression.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/environment.cr#L23","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/environment.cr#L23","def":{"name":"match","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@match.as(Regex::MatchData)"}},{"id":"match=(match)-instance-method","html_id":"match=(match)-instance-method","name":"match=","doc":"@return [Match] Match object generated by a rule's regular expression.","summary":"<p>@return [Match] Match object generated by a rule's regular expression.</p>","abstract":false,"args":[{"name":"match","doc":null,"default_value":"","external_name":"match","restriction":""}],"args_string":"(match)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/environment.cr#L13","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/environment.cr#L13","def":{"name":"match=","args":[{"name":"match","doc":null,"default_value":"","external_name":"match","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@match = match"}},{"id":"pop_state-instance-method","html_id":"pop_state-instance-method","name":"pop_state","doc":"Pops a state from the state stack.\n\n@return [void]","summary":"<p>Pops a state from the state stack.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/environment.cr#L35","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/environment.cr#L35","def":{"name":"pop_state","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@state.pop\nnil\n"}},{"id":"push_state(state)-instance-method","html_id":"push_state(state)-instance-method","name":"push_state","doc":"Pushes a new state onto the state stack.\n\n@return [void]","summary":"<p>Pushes a new state onto the state stack.</p>","abstract":false,"args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":""}],"args_string":"(state)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/environment.cr#L44","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/environment.cr#L44","def":{"name":"push_state","args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@state << state\nnil\n"}},{"id":"set_flag(flag)-instance-method","html_id":"set_flag(flag)-instance-method","name":"set_flag","doc":"Sets a flag in the current environment.\n\n@param [Symbol] flag Flag to set as enabled.\n\n@return [void]","summary":"<p>Sets a flag in the current environment.</p>","abstract":false,"args":[{"name":"flag","doc":null,"default_value":"","external_name":"flag","restriction":""}],"args_string":"(flag)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/environment.cr#L69","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/environment.cr#L69","def":{"name":"set_flag","args":[{"name":"flag","doc":null,"default_value":"","external_name":"flag","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @flags.includes?(flag)\nelse\n  @flags << flag\nend\nnil\n"}},{"id":"set_state(state)-instance-method","html_id":"set_state(state)-instance-method","name":"set_state","doc":"Sets the value on the top of the state stack.\n\n@param [Symbol] state New state for the lexing environment.\n\n@return [void]","summary":"<p>Sets the value on the top of the state stack.</p>","abstract":false,"args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":""}],"args_string":"(state)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/environment.cr#L54","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/environment.cr#L54","def":{"name":"set_state","args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@state[-1] = state\nnil\n"}},{"id":"state-instance-method","html_id":"state-instance-method","name":"state","doc":"@return [Symbol] Current state of the lexing environment.","summary":"<p>@return [Symbol] Current state of the lexing environment.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/environment.cr#L60","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/environment.cr#L60","def":{"name":"state","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@state.last"}},{"id":"unset_flag(flag)-instance-method","html_id":"unset_flag(flag)-instance-method","name":"unset_flag","doc":"Unsets a flag in the current environment.\n\n@param [Symbol] flag Flag to unset.\n\n@return [void]","summary":"<p>Unsets a flag in the current environment.</p>","abstract":false,"args":[{"name":"flag","doc":null,"default_value":"","external_name":"flag","restriction":""}],"args_string":"(flag)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/environment.cr#L81","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/environment.cr#L81","def":{"name":"unset_flag","args":[{"name":"flag","doc":null,"default_value":"","external_name":"flag","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@flags.delete(flag)\nnil\n"}}],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Lexer/Exceptions","path":"CLTK/Lexer/Exceptions.html","kind":"module","full_name":"CLTK::Lexer::Exceptions","name":"Exceptions","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cltk/lexer/exceptions.cr","line_number":3,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/exceptions.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Lexer","kind":"class","full_name":"CLTK::Lexer","name":"Lexer"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Lexer/Exceptions/LexingError","path":"CLTK/Lexer/Exceptions/LexingError.html","kind":"class","full_name":"CLTK::Lexer::Exceptions::LexingError","name":"LexingError","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/lexer/exceptions.cr","line_number":6,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/exceptions.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Lexer/Exceptions","kind":"module","full_name":"CLTK::Lexer::Exceptions","name":"Exceptions"},"doc":"A LexingError exception is raised when an input stream contains a\nsubstring that isn't matched by any of a lexer's rules.","summary":"<p>A LexingError exception is raised when an input stream contains a substring that isn't matched by any of a lexer's rules.</p>","class_methods":[],"constructors":[{"id":"new(stream_offset:Int32,line_number:Int32,line_offset:Int32,remainder:String)-class-method","html_id":"new(stream_offset:Int32,line_number:Int32,line_offset:Int32,remainder:String)-class-method","name":"new","doc":"@param [Integer]\tstream_offset\tOffset from begnning of string.\n@param [Integer]\tline_number\tNumber of newlines encountered so far.\n@param [Integer]\tline_offset\tOffset from beginning of line.\n@param [String]\tremainder\t\tRest of the string that couldn't be lexed.","summary":"<p>@param [Integer]\tstream_offset\tOffset from begnning of string.</p>","abstract":false,"args":[{"name":"stream_offset","doc":null,"default_value":"","external_name":"stream_offset","restriction":"Int32"},{"name":"line_number","doc":null,"default_value":"","external_name":"line_number","restriction":"Int32"},{"name":"line_offset","doc":null,"default_value":"","external_name":"line_offset","restriction":"Int32"},{"name":"remainder","doc":null,"default_value":"","external_name":"remainder","restriction":"String"}],"args_string":"(stream_offset : Int32, line_number : Int32, line_offset : Int32, remainder : String)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/exceptions.cr#L23","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/exceptions.cr#L23","def":{"name":"new","args":[{"name":"stream_offset","doc":null,"default_value":"","external_name":"stream_offset","restriction":"Int32"},{"name":"line_number","doc":null,"default_value":"","external_name":"line_number","restriction":"Int32"},{"name":"line_offset","doc":null,"default_value":"","external_name":"line_offset","restriction":"Int32"},{"name":"remainder","doc":null,"default_value":"","external_name":"remainder","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(stream_offset, line_number, line_offset, remainder)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"line_number:Int32-instance-method","html_id":"line_number:Int32-instance-method","name":"line_number","doc":"@return [Integer]","summary":"<p>@return [Integer]</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/exceptions.cr#L11","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/exceptions.cr#L11","def":{"name":"line_number","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@line_number"}},{"id":"line_offset:Int32-instance-method","html_id":"line_offset:Int32-instance-method","name":"line_offset","doc":"@return [Integer]","summary":"<p>@return [Integer]</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/exceptions.cr#L14","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/exceptions.cr#L14","def":{"name":"line_offset","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@line_offset"}},{"id":"remainder:String-instance-method","html_id":"remainder:String-instance-method","name":"remainder","doc":"@return [String]","summary":"<p>@return [String]</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/exceptions.cr#L17","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/exceptions.cr#L17","def":{"name":"remainder","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@remainder"}},{"id":"stream_offset:Int32-instance-method","html_id":"stream_offset:Int32-instance-method","name":"stream_offset","doc":"@return [Integer]","summary":"<p>@return [Integer]</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/exceptions.cr#L8","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/exceptions.cr#L8","def":{"name":"stream_offset","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@stream_offset"}}],"macros":[],"types":[]}]}]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Lexers","path":"CLTK/Lexers.html","kind":"module","full_name":"CLTK::Lexers","name":"Lexers","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cltk/lexers/ebnf.cr","line_number":17,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexers/ebnf.cr"},{"filename":"cltk/lexers/calculator.cr","line_number":16,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexers/calculator.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK","kind":"module","full_name":"CLTK","name":"CLTK"},"doc":"The CLTK::Lexers module contains the lexers that are included as part of\nthe CLTK project.","summary":"<p>The CLTK::Lexers module contains the lexers that are included as part of the CLTK project.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Lexers/Calculator","path":"CLTK/Lexers/Calculator.html","kind":"class","full_name":"CLTK::Lexers::Calculator","name":"Calculator","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Scanner","kind":"class","full_name":"CLTK::Scanner","name":"Scanner"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Scanner","kind":"class","full_name":"CLTK::Scanner","name":"Scanner"},{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/lexers/calculator.cr","line_number":20,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexers/calculator.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Scanner/LexerCompatibility","kind":"module","full_name":"CLTK::Scanner::LexerCompatibility","name":"LexerCompatibility"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Lexers","kind":"module","full_name":"CLTK::Lexers","name":"Lexers"},"doc":"The Calculator lexer is a simple lexer for use with several of the\nprovided parsers.","summary":"<p>The Calculator lexer is a simple lexer for use with several of the provided parsers.</p>","class_methods":[{"id":"lex(string)-class-method","html_id":"lex(string)-class-method","name":"lex","doc":null,"summary":null,"abstract":false,"args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":""}],"args_string":"(string)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexers/calculator.cr#L21","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexers/calculator.cr#L21","def":{"name":"lex","args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(super(string)).map do |token, position|\n  pos = CLTK::StreamPosition.new(position[:position], 0, position[:position], position[:size])\n  CLTK::Token.new(token[0], token[1]?, pos)\nend << (CLTK::Token.new(:EOS))"}}],"constructors":[],"instance_methods":[{"id":"lex(string)-instance-method","html_id":"lex(string)-instance-method","name":"lex","doc":null,"summary":null,"abstract":false,"args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":""}],"args_string":"(string)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexers/calculator.cr#L21","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexers/calculator.cr#L21","def":{"name":"lex","args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.lex(string)"}}],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Lexers/EBNF","path":"CLTK/Lexers/EBNF.html","kind":"class","full_name":"CLTK::Lexers::EBNF","name":"EBNF","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Scanner","kind":"class","full_name":"CLTK::Scanner","name":"Scanner"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Scanner","kind":"class","full_name":"CLTK::Scanner","name":"Scanner"},{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/lexers/ebnf.cr","line_number":20,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexers/ebnf.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Scanner/LexerCompatibility","kind":"module","full_name":"CLTK::Scanner::LexerCompatibility","name":"LexerCompatibility"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Lexers","kind":"module","full_name":"CLTK::Lexers","name":"Lexers"},"doc":"The EBNF lexer is used by the CLTK::CFG class.","summary":"<p>The EBNF lexer is used by the CLTK::CFG class.</p>","class_methods":[{"id":"lex(string)-class-method","html_id":"lex(string)-class-method","name":"lex","doc":null,"summary":null,"abstract":false,"args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":""}],"args_string":"(string)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexers/ebnf.cr#L21","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexers/ebnf.cr#L21","def":{"name":"lex","args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(super(string)).map do |token, position|\n  pos = CLTK::StreamPosition.new(position[:position], 0, position[:position], position[:size])\n  CLTK::Token.new(token[0], token[1]?, pos)\nend << (CLTK::Token.new(:EOS))"}}],"constructors":[],"instance_methods":[{"id":"lex(string)-instance-method","html_id":"lex(string)-instance-method","name":"lex","doc":null,"summary":null,"abstract":false,"args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":""}],"args_string":"(string)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexers/ebnf.cr#L21","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexers/ebnf.cr#L21","def":{"name":"lex","args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.lex(string)"}}],"macros":[],"types":[]}]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser","path":"CLTK/Parser.html","kind":"class","full_name":"CLTK::Parser","name":"Parser","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Explain","kind":"module","full_name":"CLTK::Parser::Explain","name":"Explain"},{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/parser/exceptions/bad_token_exception.cr","line_number":2,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/bad_token_exception.cr"},{"filename":"cltk/parser/exceptions/internal_parser_exception.cr","line_number":2,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/internal_parser_exception.cr"},{"filename":"cltk/parser/exceptions/parser_construction_exception.cr","line_number":2,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/parser_construction_exception.cr"},{"filename":"cltk/parser/exceptions/handled_error_exception.cr","line_number":2,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/handled_error_exception.cr"},{"filename":"cltk/parser/exceptions/not_in_language_exception.cr","line_number":2,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/not_in_language_exception.cr"},{"filename":"cltk/parser/exceptions/useless_parser_exception.cr","line_number":2,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/useless_parser_exception.cr"},{"filename":"cltk/parser/environment.cr","line_number":2,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/environment.cr"},{"filename":"cltk/parser/type.cr","line_number":8,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/type.cr"},{"filename":"cltk/parser/parse_stack.cr","line_number":11,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr"},{"filename":"cltk/parser/state.cr","line_number":2,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr"},{"filename":"cltk/parser/prod_proc.cr","line_number":2,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/prod_proc.cr"},{"filename":"cltk/parser/actions.cr","line_number":2,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr"},{"filename":"cltk/parser/msgpack.cr","line_number":6,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr"},{"filename":"cltk/parser.cr","line_number":41,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr"},{"filename":"cltk/parser/parser_concern.cr","line_number":15,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parser_concern.cr"},{"filename":"cltk/parser/prod_proc_debug.cr","line_number":2,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/prod_proc_debug.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Explain","kind":"module","full_name":"CLTK::Parser::Explain","name":"Explain"}],"extended_modules":[],"subclasses":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parsers/InfixCalc","kind":"class","full_name":"CLTK::Parsers::InfixCalc","name":"InfixCalc"},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parsers/PostfixCalc","kind":"class","full_name":"CLTK::Parsers::PostfixCalc","name":"PostfixCalc"},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parsers/PrefixCalc","kind":"class","full_name":"CLTK::Parsers::PrefixCalc","name":"PrefixCalc"}],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK","kind":"module","full_name":"CLTK","name":"CLTK"},"doc":"The Parser class may be sub-classed to produce new parsers.  These\nparsers have a lot of features, and are described in the main\ndocumentation.","summary":"<p>The Parser class may be sub-classed to produce new parsers.</p>","class_methods":[{"id":"_parse(procs,lh_sides,symbols,states,token_hooks,tokens,opts:NamedTuple?=nil)-class-method","html_id":"_parse(procs,lh_sides,symbols,states,token_hooks,tokens,opts:NamedTuple?=nil)-class-method","name":"_parse","doc":null,"summary":null,"abstract":false,"args":[{"name":"procs","doc":null,"default_value":"","external_name":"procs","restriction":""},{"name":"lh_sides","doc":null,"default_value":"","external_name":"lh_sides","restriction":""},{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""},{"name":"states","doc":null,"default_value":"","external_name":"states","restriction":""},{"name":"token_hooks","doc":null,"default_value":"","external_name":"token_hooks","restriction":""},{"name":"tokens","doc":null,"default_value":"","external_name":"tokens","restriction":""},{"name":"opts","doc":null,"default_value":"nil","external_name":"opts","restriction":"NamedTuple | ::Nil"}],"args_string":"(procs, lh_sides, symbols, states, token_hooks, tokens, opts : NamedTuple? = <span class=\"n\">nil</span>)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L43","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L43","def":{"name":"_parse","args":[{"name":"procs","doc":null,"default_value":"","external_name":"procs","restriction":""},{"name":"lh_sides","doc":null,"default_value":"","external_name":"lh_sides","restriction":""},{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""},{"name":"states","doc":null,"default_value":"","external_name":"states","restriction":""},{"name":"token_hooks","doc":null,"default_value":"","external_name":"token_hooks","restriction":""},{"name":"tokens","doc":null,"default_value":"","external_name":"tokens","restriction":""},{"name":"opts","doc":null,"default_value":"nil","external_name":"opts","restriction":"NamedTuple | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"opts = build_parse_opts(opts)\nstack_id = 0\nerror_mode = false\nreduction_guard = false\naccepted = [] of CLTK::Parser::ParseStack\nmoving_on = [] of CLTK::Parser::ParseStack\nprocessing = [CLTK::Parser::ParseStack.new(stack_id = stack_id + 1)]\ntokens.each_with_index do |token, index|\n  if symbols.includes?(token.type.to_s)\n  else\n    raise(CLTK::Parser::Exceptions::BadToken.new(token))\n  end\n  while (  processing.any?)\n    stack = processing.shift\n    (token_hooks.fetch(token.type.to_s, [] of Proc(Environment, Nil))).each do |hook|\n      hook.call(opts[:env])\n    end\n    actions = states[stack.state].on?(token.type.to_s)\n    if actions.empty?\n      if error_mode\n        (stack.output_stack.last.as(Array)) << token.value\n        moving_on << stack\n        next\n      end\n      if (accepted.empty? && moving_on.empty?) && processing.empty?\n        while stack.state_stack.any?\n          if (actions = states[stack.state].on?((:ERROR).to_s)).empty?\n            stack.pop\n          else\n            stack.push(actions.first.id, [token.value.as(CLTK::Type)], (:ERROR).to_s, token.position)\n            break\n          end\n        end\n        if stack.state_stack.any?\n          error_mode = reduction_guard = true\n          opts[:env].he = true\n          moving_on << stack\n        end\n      end\n      next\n    end\n    pairs = ([{stack, actions.pop}] + actions.map do |action|\n      {stack.branch(stack_id = stack_id + 1), action}\n    end)\n    pairs.each do |pair|\n      stack, action = pair\n      if action.is_a?(CLTK::Parser::Actions::Accept)\n        accepted << stack\n        if opts[:accept] == (:all)\n        else\n          break\n        end\n      else\n        if action.is_a?(CLTK::Parser::Actions::Reduce)\n          production_proc, pop_size = procs[action.id]\n          if !production_proc\n            raise(CLTK::Parser::Exceptions::InternalParserException.new(\"No production #{action.id} found.\"))\n          end\n          args, positions = stack.pop(pop_size)\n          opts[:env].set_positions(positions)\n          if !production_proc.selections.empty?\n            args = production_proc.selections.map do |selection|\n              args[selection].as(CLTK::Parser::StackType)\n            end\n          end\n          result = {action.id, args.as(Array(CLTK::Parser::StackType)), positions}\n          if (          goto = (states[stack.state].on?(lh_sides[action.id])).first)\n            pos0 = nil\n            if args.empty?\n              pos0 = stack.position\n              pos0.stream_offset = pos0.stream_offset + (pos0.length + 1)\n              pos0.line_offset = pos0.line_offset + (pos0.length + 1)\n              pos0.length = 0\n            else\n              pos0 = (opts[:env].pos(0)).as(CLTK::StreamPosition)\n              pos1 = (opts[:env].pos(-1)).as(CLTK::StreamPosition)\n              pos0.length = (pos1.stream_offset + pos1.length) - pos0.stream_offset\n            end\n            stack.push(goto.id, result.as(CLTK::Parser::StackType), lh_sides[action.id], pos0)\n          else\n            raise(CLTK::Parser::Exceptions::InternalParserException.new(\"No GoTo action found in state #{stack.state} \" + \"after reducing by production #{action.id}\"))\n          end\n          processing << stack\n          if error_mode && (!reduction_guard)\n            error_mode = false\n          end\n        else\n          if action.is_a?(CLTK::Parser::Actions::Shift)\n            stack.push(action.id, token.value, token.type, token.position)\n            moving_on << stack\n            error_mode = false\n          end\n        end\n      end\n    end\n  end\n  if accepted.size > 0\n    break\n  end\n  processing = moving_on\n  moving_on = [] of CLTK::Parser::ParseStack\n  if (opts[:accept] == (:first)) && accepted.size > 0\n    break\n  end\n  if (opts[:accept] == (:first)) && (processing.size == 0)\n    raise(CLTK::Parser::Exceptions::NotInLanguage.new(tokens[0...index], tokens[index], tokens[(index + 1)..-1]))\n  end\n  reduction_guard = false\nend\nif opts[:parse_tree]?\n  accepted.each do |stack|\n    (opts[:parse_tree].as(IO)).puts(stack.tree)\n  end\nend\nresults = accepted.map do |stack|\n  (stack.resolve(opts[:env], procs)).as(CLTK::Type)\nend\nresults = (if opts[:accept] == (:all)\n  results\nelse\n  results.first\nend).as(CLTK::Type)\nif (opts[:env]).he\n  raise(CLTK::Parser::Exceptions::HandledError.new((opts[:env].as(Environment)).errors, results))\nend\nreturn results\n"}},{"id":"add_state(state)-class-method","html_id":"add_state(state)-class-method","name":"add_state","doc":"If *state* (or its equivalent) is not in the state list it is\nadded and it's ID is returned.  If there is already a state\nwith the same items as *state* in the state list its ID is\nreturned and *state* is discarded.\n\n@param [State] state State to add to the parser.\n\n@return [Integer] The ID of the state.","summary":"<p>If <em>state</em> (or its equivalent) is not in the state list it is added and it's ID is returned.</p>","abstract":false,"args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":""}],"args_string":"(state)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L325","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L325","def":{"name":"add_state","args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"id = @@states.index(state)\nif id\n  id\nelse\n  state.id = @@states.size\n  @@states << state\n  @@states.size - 1\nend\n"}},{"id":"c(expression,precedence=nil,arg_type=@@default_arg_type,&action:Array(Type),Environment->_)-class-method","html_id":"c(expression,precedence=nil,arg_type=@@default_arg_type,&amp;action:Array(Type),Environment-&gt;_)-class-method","name":"c","doc":"Shorthands for defining productions and clauses","summary":"<p>Shorthands for defining productions and clauses</p>","abstract":false,"args":[{"name":"expression","doc":null,"default_value":"","external_name":"expression","restriction":""},{"name":"precedence","doc":null,"default_value":"nil","external_name":"precedence","restriction":""},{"name":"arg_type","doc":null,"default_value":"@@default_arg_type","external_name":"arg_type","restriction":""}],"args_string":"(expression, precedence = <span class=\"n\">nil</span>, arg_type = @@default_arg_type, &action : Array(Type), Environment -> _)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L243","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L243","def":{"name":"c","args":[{"name":"expression","doc":null,"default_value":"","external_name":"expression","restriction":""},{"name":"precedence","doc":null,"default_value":"nil","external_name":"precedence","restriction":""},{"name":"arg_type","doc":null,"default_value":"@@default_arg_type","external_name":"arg_type","restriction":""}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"(Array(Type), Environment -> _)"},"return_type":"","visibility":"Public","body":"self.clause(expression, precedence, arg_type, &action)"}},{"id":"each_state(&block)-class-method","html_id":"each_state(&amp;block)-class-method","name":"each_state","doc":"Iterate over the parser's states.\n\n@yieldparam [State]  state  One of the parser automaton's state objects\n\n@return [void]","summary":"<p>Iterate over the parser's states.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L740","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L740","def":{"name":"each_state","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"current_state = 0\nwhile current_state < @@states.size\n  yield @@states.at(current_state)\n  current_state = current_state + 1\nend\n"}},{"id":"grammar-class-method","html_id":"grammar-class-method","name":"grammar","doc":"@return [CFG]  The grammar that can be parsed by this Parser.","summary":"<p>@return [CFG]  The grammar that can be parsed by this Parser.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L749","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L749","def":{"name":"grammar","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@grammar.clone"}},{"id":"grammar_prime-class-method","html_id":"grammar_prime-class-method","name":"grammar_prime","doc":"This method generates and memoizes the G' grammar used to\ncalculate the LALR(1) lookahead sets.  Information about this\ngrammar and its use can be found in the following paper:\n\nSimple Computation of LALR(1) Lookahead Sets\nManuel E. Bermudez and George Logothetis\nInformation Processing Letters 31 - 1989\n\n@return [CFG]","summary":"<p>This method generates and memoizes the G' grammar used to calculate the LALR(1) lookahead sets.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L762","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L762","def":{"name":"grammar_prime","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"each_state do |state|\n  state.each do |item|\n    lhs = \"#{state.id}_#{item.next_symbol}\".to_s\n    if (CFG.is_nonterminal?(item.next_symbol)) && (!(@@grammar_prime.productions_sym.keys.includes?(lhs)))\n    else\n      next\n    end\n    @@grammar.productions_sym[item.next_symbol].each do |production|\n      rhs = \"\"\n      cstate = state\n      production.rhs.each do |symbol|\n        rhs = rhs + \"#{cstate.id}_#{symbol} \"\n        cstate = @@states[(cstate.on?(symbol)).first.id]\n      end\n      @@grammar_prime.production(lhs, rhs)\n    end\n  end\nend\n@@grammar_prime\n"}},{"id":"inform_conflict(state_id,type,sym)-class-method","html_id":"inform_conflict(state_id,type,sym)-class-method","name":"inform_conflict","doc":"Inform the parser core that a conflict has been detected.\n\n@param [Integer]   state_id  ID of the state where the conflict was encountered.\n@param [:RR, :SR]  type      Reduce/Reduce or Shift/Reduce conflict.\n@param [Symbol]    sym       Symbol that caused the conflict.\n\n@return [void]","summary":"<p>Inform the parser core that a conflict has been detected.</p>","abstract":false,"args":[{"name":"state_id","doc":null,"default_value":"","external_name":"state_id","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"sym","doc":null,"default_value":"","external_name":"sym","restriction":""}],"args_string":"(state_id, type, sym)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L797","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L797","def":{"name":"inform_conflict","args":[{"name":"state_id","doc":null,"default_value":"","external_name":"state_id","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"sym","doc":null,"default_value":"","external_name":"sym","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@conflicts[state_id] << {type.to_s, sym}"}},{"id":"p(symbol,expression=nil,precedence=nil,arg_type=@@default_arg_type,&action:Array(Type),Environment->_)-class-method","html_id":"p(symbol,expression=nil,precedence=nil,arg_type=@@default_arg_type,&amp;action:Array(Type),Environment-&gt;_)-class-method","name":"p","doc":null,"summary":null,"abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"expression","doc":null,"default_value":"nil","external_name":"expression","restriction":""},{"name":"precedence","doc":null,"default_value":"nil","external_name":"precedence","restriction":""},{"name":"arg_type","doc":null,"default_value":"@@default_arg_type","external_name":"arg_type","restriction":""}],"args_string":"(symbol, expression = <span class=\"n\">nil</span>, precedence = <span class=\"n\">nil</span>, arg_type = @@default_arg_type, &action : Array(Type), Environment -> _)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L247","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L247","def":{"name":"p","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"expression","doc":null,"default_value":"nil","external_name":"expression","restriction":""},{"name":"precedence","doc":null,"default_value":"nil","external_name":"precedence","restriction":""},{"name":"arg_type","doc":null,"default_value":"@@default_arg_type","external_name":"arg_type","restriction":""}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"(Array(Type), Environment -> _)"},"return_type":"","visibility":"Public","body":"self.production(symbol, expression, precedence, arg_type, &action)"}},{"id":"parse(tokens:Array,opts:NamedTuple?=nil)-class-method","html_id":"parse(tokens:Array,opts:NamedTuple?=nil)-class-method","name":"parse","doc":null,"summary":null,"abstract":false,"args":[{"name":"tokens","doc":null,"default_value":"","external_name":"tokens","restriction":"Array"},{"name":"opts","doc":null,"default_value":"nil","external_name":"opts","restriction":"NamedTuple | ::Nil"}],"args_string":"(tokens : Array, opts : NamedTuple? = <span class=\"n\">nil</span>)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L43","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L43","def":{"name":"parse","args":[{"name":"tokens","doc":null,"default_value":"","external_name":"tokens","restriction":"Array"},{"name":"opts","doc":null,"default_value":"nil","external_name":"opts","restriction":"NamedTuple | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_parse(@@procs, @@lh_sides, @@symbols, @@states, @@token_hooks, tokens, opts)"}},{"id":"parse(tokens,opts=nil)-class-method","html_id":"parse(tokens,opts=nil)-class-method","name":"parse","doc":null,"summary":null,"abstract":false,"args":[{"name":"tokens","doc":null,"default_value":"","external_name":"tokens","restriction":""},{"name":"opts","doc":null,"default_value":"nil","external_name":"opts","restriction":""}],"args_string":"(tokens, opts = <span class=\"n\">nil</span>)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L801","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L801","def":{"name":"parse","args":[{"name":"tokens","doc":null,"default_value":"","external_name":"tokens","restriction":""},{"name":"opts","doc":null,"default_value":"nil","external_name":"opts","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"setenv(env)-class-method","html_id":"setenv(env)-class-method","name":"setenv","doc":null,"summary":null,"abstract":false,"args":[{"name":"env","doc":null,"default_value":"","external_name":"env","restriction":""}],"args_string":"(env)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L336","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L336","def":{"name":"setenv","args":[{"name":"env","doc":null,"default_value":"","external_name":"env","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@env = env"}},{"id":"start(symbol)-class-method","html_id":"start(symbol)-class-method","name":"start","doc":"Changes the starting symbol of the parser.\n\n@param [Symbol] symbol The starting symbol of the grammar.\n\n@return [void]","summary":"<p>Changes the starting symbol of the parser.</p>","abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""}],"args_string":"(symbol)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L811","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L811","def":{"name":"start","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@grammar.start(symbol)"}},{"id":"token_hook(sym,&proc:Proc(Environment,Nil))-class-method","html_id":"token_hook(sym,&amp;proc:Proc(Environment,Nil))-class-method","name":"token_hook","doc":"Add a hook that is executed whenever *sym* is seen.\n\nThe *sym* must be a terminal symbol.\n\n@param [Symbol]  sym   Symbol to hook into\n@param [Proc]    proc  Code to execute when the block is seen\n\n@return [void]","summary":"<p>Add a hook that is executed whenever <em>sym</em> is seen.</p>","abstract":false,"args":[{"name":"sym","doc":null,"default_value":"","external_name":"sym","restriction":""}],"args_string":"(sym, &proc : Proc(Environment, Nil))","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L823","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L823","def":{"name":"token_hook","args":[{"name":"sym","doc":null,"default_value":"","external_name":"sym","restriction":""}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"Proc(Environment, Nil)"},"return_type":"","visibility":"Public","body":"if CFG.is_terminal?(sym)\n  @@token_hooks[sym.to_s] << proc\nelse\n  raise(\"Method token_hook expects `sym` to be non-terminal.\")\nend"}}],"constructors":[],"instance_methods":[{"id":"env-instance-method","html_id":"env-instance-method","name":"env","doc":"@return [Environment] Environment used by the instantiated parser.","summary":"<p>@return [Environment] Environment used by the instantiated parser.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L46","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L46","def":{"name":"env","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@env"}},{"id":"parse(tokens)-instance-method","html_id":"parse(tokens)-instance-method","name":"parse","doc":"Parses the given token stream using the encapsulated environment.\n\n@see .parse","summary":"<p>Parses the given token stream using the encapsulated environment.</p>","abstract":false,"args":[{"name":"tokens","doc":null,"default_value":"","external_name":"tokens","restriction":""}],"args_string":"(tokens)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L838","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr#L838","def":{"name":"parse","args":[{"name":"tokens","doc":null,"default_value":"","external_name":"tokens","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.parse(tokens, {env: @env})"}}],"macros":[],"types":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Action","path":"CLTK/Parser/Action.html","kind":"struct","full_name":"CLTK::Parser::Action","name":"Action","abstract":true,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/TheKingsJrester/cltk/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/parser/actions.cr","line_number":5,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr"},{"filename":"cltk/parser/msgpack.cr","line_number":41,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Actions/Accept","kind":"struct","full_name":"CLTK::Parser::Actions::Accept","name":"Accept"},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Actions/GoTo","kind":"struct","full_name":"CLTK::Parser::Actions::GoTo","name":"GoTo"},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Actions/Reduce","kind":"struct","full_name":"CLTK::Parser::Actions::Reduce","name":"Reduce"},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Actions/Shift","kind":"struct","full_name":"CLTK::Parser::Actions::Shift","name":"Shift"}],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser","kind":"class","full_name":"CLTK::Parser","name":"Parser"},"doc":"The Action class is used to indicate what action the parser should\ntake given a current state and input token.","summary":"<p>The Action class is used to indicate what action the parser should take given a current state and input token.</p>","class_methods":[{"id":"from_msgpack(pull:MessagePack::Unpacker)-class-method","html_id":"from_msgpack(pull:MessagePack::Unpacker)-class-method","name":"from_msgpack","doc":null,"summary":null,"abstract":false,"args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"MessagePack::Unpacker"}],"args_string":"(pull : MessagePack::Unpacker)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L46","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L46","def":{"name":"from_msgpack","args":[{"name":"pull","doc":null,"default_value":"","external_name":"pull","restriction":"MessagePack::Unpacker"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"type = pull.read\ncase type\nwhen \"goto\"\n  CLTK::Parser::Actions::GoTo.new(pull)\nwhen \"accept\"\n  CLTK::Parser::Actions::Accept.new(pull)\nwhen \"shift\"\n  CLTK::Parser::Actions::Shift.new(pull)\nwhen \"reduce\"\n  CLTK::Parser::Actions::Reduce.new(pull)\nelse\n  raise(\"this is not an action\")\nend\n"}}],"constructors":[{"id":"new(id:Int32)-class-method","html_id":"new(id:Int32)-class-method","name":"new","doc":"@param [Integer] id ID of this action.","summary":"<p>@param [Integer] id ID of this action.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Int32"}],"args_string":"(id : Int32)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr#L10","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr#L10","def":{"name":"new","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(id)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(packer:MessagePack::Unpacker)-class-method","html_id":"new(packer:MessagePack::Unpacker)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"packer","doc":null,"default_value":"","external_name":"packer","restriction":"MessagePack::Unpacker"}],"args_string":"(packer : MessagePack::Unpacker)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L42","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L42","def":{"name":"new","args":[{"name":"packer","doc":null,"default_value":"","external_name":"packer","restriction":"MessagePack::Unpacker"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.from_msgpack(packer)"}}],"instance_methods":[{"id":"id:Int32-instance-method","html_id":"id:Int32-instance-method","name":"id","doc":"@return [Integer] ID of this action.","summary":"<p>@return [Integer] ID of this action.</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr#L7","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr#L7","def":{"name":"id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id"}},{"id":"to_msgpack(packer:MessagePack::Packer)-instance-method","html_id":"to_msgpack(packer:MessagePack::Packer)-instance-method","name":"to_msgpack","doc":null,"summary":null,"abstract":false,"args":[{"name":"packer","doc":null,"default_value":"","external_name":"packer","restriction":"MessagePack::Packer"}],"args_string":"(packer : MessagePack::Packer)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L62","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L62","def":{"name":"to_msgpack","args":[{"name":"packer","doc":null,"default_value":"","external_name":"packer","restriction":"MessagePack::Packer"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Actions","path":"CLTK/Parser/Actions.html","kind":"module","full_name":"CLTK::Parser::Actions","name":"Actions","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cltk/parser/actions.cr","line_number":14,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr"},{"filename":"cltk/parser/msgpack.cr","line_number":66,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser","kind":"class","full_name":"CLTK::Parser","name":"Parser"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Actions/Accept","path":"CLTK/Parser/Actions/Accept.html","kind":"struct","full_name":"CLTK::Parser::Actions::Accept","name":"Accept","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Action","kind":"struct","full_name":"CLTK::Parser::Action","name":"Action"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Action","kind":"struct","full_name":"CLTK::Parser::Action","name":"Action"},{"html_id":"github.com/TheKingsJrester/cltk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/TheKingsJrester/cltk/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/parser/actions.cr","line_number":17,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr"},{"filename":"cltk/parser/msgpack.cr","line_number":67,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Actions","kind":"module","full_name":"CLTK::Parser::Actions","name":"Actions"},"doc":"The Accept class indicates to the parser that it should accept the\ncurrent parse tree.","summary":"<p>The Accept class indicates to the parser that it should accept the current parse tree.</p>","class_methods":[],"constructors":[{"id":"new(__temp_67:MessagePack::Unpacker)-class-method","html_id":"new(__temp_67:MessagePack::Unpacker)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"__temp_67","doc":null,"default_value":"","external_name":"__temp_67","restriction":"MessagePack::Unpacker"}],"args_string":"(__temp_67 : MessagePack::Unpacker)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L68","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L68","def":{"name":"new","args":[{"name":"__temp_67","doc":null,"default_value":"","external_name":"__temp_67","restriction":"MessagePack::Unpacker"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(__temp_67)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr#L21","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr#L21","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"id:Int32-instance-method","html_id":"id:Int32-instance-method","name":"id","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L68","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L68","def":{"name":"id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id"}},{"id":"id=(_id:Int32)-instance-method","html_id":"id=(_id:Int32)-instance-method","name":"id=","doc":null,"summary":null,"abstract":false,"args":[{"name":"_id","doc":null,"default_value":"","external_name":"_id","restriction":"Int32"}],"args_string":"(_id : Int32)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L68","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L68","def":{"name":"id=","args":[{"name":"_id","doc":null,"default_value":"","external_name":"_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id = _id"}},{"id":"to_msgpack(packer:MessagePack::Packer)-instance-method","html_id":"to_msgpack(packer:MessagePack::Packer)-instance-method","name":"to_msgpack","doc":null,"summary":null,"abstract":false,"args":[{"name":"packer","doc":null,"default_value":"","external_name":"packer","restriction":"MessagePack::Packer"}],"args_string":"(packer : MessagePack::Packer)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L69","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L69","def":{"name":"to_msgpack","args":[{"name":"packer","doc":null,"default_value":"","external_name":"packer","restriction":"MessagePack::Packer"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"accept\".to_msgpack(packer)\nprevious_def(packer)\n"}},{"id":"to_s-instance-method","html_id":"to_s-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr#L24","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr#L24","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"Accept\""}}],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Actions/GoTo","path":"CLTK/Parser/Actions/GoTo.html","kind":"struct","full_name":"CLTK::Parser::Actions::GoTo","name":"GoTo","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Action","kind":"struct","full_name":"CLTK::Parser::Action","name":"Action"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Action","kind":"struct","full_name":"CLTK::Parser::Action","name":"Action"},{"html_id":"github.com/TheKingsJrester/cltk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/TheKingsJrester/cltk/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/parser/actions.cr","line_number":31,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr"},{"filename":"cltk/parser/msgpack.cr","line_number":74,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Actions","kind":"module","full_name":"CLTK::Parser::Actions","name":"Actions"},"doc":"The GoTo class indicates to the parser that it should goto the state\nspecified by GoTo.id.","summary":"<p>The GoTo class indicates to the parser that it should goto the state specified by GoTo.id.</p>","class_methods":[],"constructors":[{"id":"new(id:Int32)-class-method","html_id":"new(id:Int32)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Int32"}],"args_string":"(id : Int32)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr#L32","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr#L32","def":{"name":"new","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(id)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(__temp_71:MessagePack::Unpacker)-class-method","html_id":"new(__temp_71:MessagePack::Unpacker)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"__temp_71","doc":null,"default_value":"","external_name":"__temp_71","restriction":"MessagePack::Unpacker"}],"args_string":"(__temp_71 : MessagePack::Unpacker)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L75","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L75","def":{"name":"new","args":[{"name":"__temp_71","doc":null,"default_value":"","external_name":"__temp_71","restriction":"MessagePack::Unpacker"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(__temp_71)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"id:Int32-instance-method","html_id":"id:Int32-instance-method","name":"id","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L75","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L75","def":{"name":"id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id"}},{"id":"id=(_id:Int32)-instance-method","html_id":"id=(_id:Int32)-instance-method","name":"id=","doc":null,"summary":null,"abstract":false,"args":[{"name":"_id","doc":null,"default_value":"","external_name":"_id","restriction":"Int32"}],"args_string":"(_id : Int32)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L75","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L75","def":{"name":"id=","args":[{"name":"_id","doc":null,"default_value":"","external_name":"_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id = _id"}},{"id":"to_msgpack(packer:MessagePack::Packer)-instance-method","html_id":"to_msgpack(packer:MessagePack::Packer)-instance-method","name":"to_msgpack","doc":null,"summary":null,"abstract":false,"args":[{"name":"packer","doc":null,"default_value":"","external_name":"packer","restriction":"MessagePack::Packer"}],"args_string":"(packer : MessagePack::Packer)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L76","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L76","def":{"name":"to_msgpack","args":[{"name":"packer","doc":null,"default_value":"","external_name":"packer","restriction":"MessagePack::Packer"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"goto\".to_msgpack(packer)\nprevious_def(packer)\n"}},{"id":"to_s-instance-method","html_id":"to_s-instance-method","name":"to_s","doc":"@return [String] String representation of this action.","summary":"<p>@return [String] String representation of this action.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr#L34","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr#L34","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"GoTo #{self.id}\""}}],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Actions/Reduce","path":"CLTK/Parser/Actions/Reduce.html","kind":"struct","full_name":"CLTK::Parser::Actions::Reduce","name":"Reduce","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Action","kind":"struct","full_name":"CLTK::Parser::Action","name":"Action"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Action","kind":"struct","full_name":"CLTK::Parser::Action","name":"Action"},{"html_id":"github.com/TheKingsJrester/cltk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/TheKingsJrester/cltk/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/parser/actions.cr","line_number":41,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr"},{"filename":"cltk/parser/msgpack.cr","line_number":81,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Actions","kind":"module","full_name":"CLTK::Parser::Actions","name":"Actions"},"doc":"The Reduce class indicates to the parser that it should reduce the\ninput stack by the rule specified by Reduce.id.","summary":"<p>The Reduce class indicates to the parser that it should reduce the input stack by the rule specified by Reduce.id.</p>","class_methods":[],"constructors":[{"id":"new(production:CLTK::CFG::Production)-class-method","html_id":"new(production:CLTK::CFG::Production)-class-method","name":"new","doc":"@param [Production]  production  Production to reduce by","summary":"<p>@param [Production]  production  Production to reduce by</p>","abstract":false,"args":[{"name":"production","doc":null,"default_value":"","external_name":"production","restriction":"CLTK::CFG::Production"}],"args_string":"(production : CLTK::CFG::Production)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr#L45","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr#L45","def":{"name":"new","args":[{"name":"production","doc":null,"default_value":"","external_name":"production","restriction":"CLTK::CFG::Production"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(production)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(__temp_75:MessagePack::Unpacker)-class-method","html_id":"new(__temp_75:MessagePack::Unpacker)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"__temp_75","doc":null,"default_value":"","external_name":"__temp_75","restriction":"MessagePack::Unpacker"}],"args_string":"(__temp_75 : MessagePack::Unpacker)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L82","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L82","def":{"name":"new","args":[{"name":"__temp_75","doc":null,"default_value":"","external_name":"__temp_75","restriction":"MessagePack::Unpacker"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(__temp_75)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"id:Int32-instance-method","html_id":"id:Int32-instance-method","name":"id","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L82","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L82","def":{"name":"id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id"}},{"id":"id=(_id:Int32)-instance-method","html_id":"id=(_id:Int32)-instance-method","name":"id=","doc":null,"summary":null,"abstract":false,"args":[{"name":"_id","doc":null,"default_value":"","external_name":"_id","restriction":"Int32"}],"args_string":"(_id : Int32)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L82","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L82","def":{"name":"id=","args":[{"name":"_id","doc":null,"default_value":"","external_name":"_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id = _id"}},{"id":"production:CLTK::CFG::Production-instance-method","html_id":"production:CLTK::CFG::Production-instance-method","name":"production","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : CLTK::CFG::Production","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L82","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L82","def":{"name":"production","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@production"}},{"id":"production=(_production:CLTK::CFG::Production)-instance-method","html_id":"production=(_production:CLTK::CFG::Production)-instance-method","name":"production=","doc":null,"summary":null,"abstract":false,"args":[{"name":"_production","doc":null,"default_value":"","external_name":"_production","restriction":"CLTK::CFG::Production"}],"args_string":"(_production : CLTK::CFG::Production)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L82","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L82","def":{"name":"production=","args":[{"name":"_production","doc":null,"default_value":"","external_name":"_production","restriction":"CLTK::CFG::Production"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@production = _production"}},{"id":"to_msgpack(packer:MessagePack::Packer)-instance-method","html_id":"to_msgpack(packer:MessagePack::Packer)-instance-method","name":"to_msgpack","doc":null,"summary":null,"abstract":false,"args":[{"name":"packer","doc":null,"default_value":"","external_name":"packer","restriction":"MessagePack::Packer"}],"args_string":"(packer : MessagePack::Packer)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L83","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L83","def":{"name":"to_msgpack","args":[{"name":"packer","doc":null,"default_value":"","external_name":"packer","restriction":"MessagePack::Packer"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"reduce\".to_msgpack(packer)\nprevious_def(packer)\n"}},{"id":"to_s-instance-method","html_id":"to_s-instance-method","name":"to_s","doc":"@return [String] String representation of this action.","summary":"<p>@return [String] String representation of this action.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr#L53","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr#L53","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"Reduce by Production #{self.id} : #{@production.to_s}\""}}],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Actions/Shift","path":"CLTK/Parser/Actions/Shift.html","kind":"struct","full_name":"CLTK::Parser::Actions::Shift","name":"Shift","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Action","kind":"struct","full_name":"CLTK::Parser::Action","name":"Action"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Action","kind":"struct","full_name":"CLTK::Parser::Action","name":"Action"},{"html_id":"github.com/TheKingsJrester/cltk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/TheKingsJrester/cltk/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/parser/actions.cr","line_number":60,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr"},{"filename":"cltk/parser/msgpack.cr","line_number":88,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Actions","kind":"module","full_name":"CLTK::Parser::Actions","name":"Actions"},"doc":"The Shift class indicates to the parser that it should shift the\ncurrent input token.","summary":"<p>The Shift class indicates to the parser that it should shift the current input token.</p>","class_methods":[],"constructors":[{"id":"new(id:Int32)-class-method","html_id":"new(id:Int32)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Int32"}],"args_string":"(id : Int32)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr#L61","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr#L61","def":{"name":"new","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(id)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(__temp_81:MessagePack::Unpacker)-class-method","html_id":"new(__temp_81:MessagePack::Unpacker)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"__temp_81","doc":null,"default_value":"","external_name":"__temp_81","restriction":"MessagePack::Unpacker"}],"args_string":"(__temp_81 : MessagePack::Unpacker)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L89","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L89","def":{"name":"new","args":[{"name":"__temp_81","doc":null,"default_value":"","external_name":"__temp_81","restriction":"MessagePack::Unpacker"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(__temp_81)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"id:Int32-instance-method","html_id":"id:Int32-instance-method","name":"id","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L89","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L89","def":{"name":"id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id"}},{"id":"id=(_id:Int32)-instance-method","html_id":"id=(_id:Int32)-instance-method","name":"id=","doc":null,"summary":null,"abstract":false,"args":[{"name":"_id","doc":null,"default_value":"","external_name":"_id","restriction":"Int32"}],"args_string":"(_id : Int32)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L89","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L89","def":{"name":"id=","args":[{"name":"_id","doc":null,"default_value":"","external_name":"_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id = _id"}},{"id":"to_msgpack(packer:MessagePack::Packer)-instance-method","html_id":"to_msgpack(packer:MessagePack::Packer)-instance-method","name":"to_msgpack","doc":null,"summary":null,"abstract":false,"args":[{"name":"packer","doc":null,"default_value":"","external_name":"packer","restriction":"MessagePack::Packer"}],"args_string":"(packer : MessagePack::Packer)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L90","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L90","def":{"name":"to_msgpack","args":[{"name":"packer","doc":null,"default_value":"","external_name":"packer","restriction":"MessagePack::Packer"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"shift\".to_msgpack(packer)\nprevious_def(packer)\n"}},{"id":"to_s-instance-method","html_id":"to_s-instance-method","name":"to_s","doc":"@return [String] String representation of this action.","summary":"<p>@return [String] String representation of this action.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr#L63","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/actions.cr#L63","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"Shift to State #{self.id}\""}}],"macros":[],"types":[]}]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/CLAUSE","path":"CLTK/Parser/CLAUSE.html","kind":"alias","full_name":"CLTK::Parser::CLAUSE","name":"CLAUSE","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cltk/parser.cr","line_number":60,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":true,"aliased":"NamedTuple(lhs: Symbol, expression: String, precedence: String | Nil, arg_type: Symbol | Nil, cb: Int32)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser","kind":"class","full_name":"CLTK::Parser","name":"Parser"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Environment","path":"CLTK/Parser/Environment.html","kind":"class","full_name":"CLTK::Parser::Environment","name":"Environment","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/parser/environment.cr","line_number":6,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/environment.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser","kind":"class","full_name":"CLTK::Parser","name":"Parser"},"doc":"All actions passed to Parser.producation and Parser.clause are\nevaluated inside an instance of the Environment class or its\nsubclass (which must have the same name).","summary":"<p>All actions passed to Parser.producation and Parser.clause are evaluated inside an instance of the Environment class or its subclass (which must have the same name).</p>","class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Instantiate a new Environment object.","summary":"<p>Instantiate a new Environment object.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/environment.cr#L20","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/environment.cr#L20","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"error(o)-instance-method","html_id":"error(o)-instance-method","name":"error","doc":"Adds an object to the list of errors.\n\n@return [void]","summary":"<p>Adds an object to the list of errors.</p>","abstract":false,"args":[{"name":"o","doc":null,"default_value":"","external_name":"o","restriction":""}],"args_string":"(o)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/environment.cr#L32","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/environment.cr#L32","def":{"name":"error","args":[{"name":"o","doc":null,"default_value":"","external_name":"o","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@errors << o"}},{"id":"errors:Array(CLTK::Type)-instance-method","html_id":"errors:Array(CLTK::Type)-instance-method","name":"errors","doc":"A list of all objects added using the *error* method.\n\n@return [Array<Object>]","summary":"<p>A list of all objects added using the <em>error</em> method.</p>","abstract":false,"args":[],"args_string":" : Array(CLTK::Type)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/environment.cr#L15","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/environment.cr#L15","def":{"name":"errors","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@errors"}},{"id":"he:Bool?-instance-method","html_id":"he:Bool?-instance-method","name":"he","doc":"Indicates if an error was encountered and handled.\n\n@return [Boolean]","summary":"<p>Indicates if an error was encountered and handled.</p>","abstract":false,"args":[],"args_string":" : Bool?","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/environment.cr#L10","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/environment.cr#L10","def":{"name":"he","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@he"}},{"id":"he=(he)-instance-method","html_id":"he=(he)-instance-method","name":"he=","doc":"Indicates if an error was encountered and handled.\n\n@return [Boolean]","summary":"<p>Indicates if an error was encountered and handled.</p>","abstract":false,"args":[{"name":"he","doc":null,"default_value":"","external_name":"he","restriction":""}],"args_string":"(he)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/environment.cr#L10","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/environment.cr#L10","def":{"name":"he=","args":[{"name":"he","doc":null,"default_value":"","external_name":"he","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@he = he"}},{"id":"pos(n)-instance-method","html_id":"pos(n)-instance-method","name":"pos","doc":"Returns a StreamPosition object for the symbol at location n,\nindexed from zero.\n\n@param [Integer] n Index for symbol position.\n\n@return [StreamPosition] Position of symbol at index n.","summary":"<p>Returns a StreamPosition object for the symbol at location n, indexed from zero.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"args_string":"(n)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/environment.cr#L42","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/environment.cr#L42","def":{"name":"pos","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@positions[n].as(StreamPosition)"}},{"id":"reset-instance-method","html_id":"reset-instance-method","name":"reset","doc":"Reset any variables that need to be re-initialized between\nparse calls.\n\n@return [void]","summary":"<p>Reset any variables that need to be re-initialized between parse calls.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/environment.cr#L50","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/environment.cr#L50","def":{"name":"reset","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@errors = [] of Type\n@he = false\n"}},{"id":"set_positions(positions)-instance-method","html_id":"set_positions(positions)-instance-method","name":"set_positions","doc":"Setter for the *positions* array.\n\n@param [Array<StreamPosition>] positions\n\n@return [Array<StreamPosition>] The same array of positions.","summary":"<p>Setter for the <em>positions</em> array.</p>","abstract":false,"args":[{"name":"positions","doc":null,"default_value":"","external_name":"positions","restriction":""}],"args_string":"(positions)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/environment.cr#L60","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/environment.cr#L60","def":{"name":"set_positions","args":[{"name":"positions","doc":null,"default_value":"","external_name":"positions","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@positions = positions"}},{"id":"yield_with_self(&block)-instance-method","html_id":"yield_with_self(&amp;block)-instance-method","name":"yield_with_self","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/environment.cr#L25","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/environment.cr#L25","def":{"name":"yield_with_self","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"with self yield"}}],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Exceptions","path":"CLTK/Parser/Exceptions.html","kind":"module","full_name":"CLTK::Parser::Exceptions","name":"Exceptions","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cltk/parser/exceptions/bad_token_exception.cr","line_number":3,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/bad_token_exception.cr"},{"filename":"cltk/parser/exceptions/internal_parser_exception.cr","line_number":3,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/internal_parser_exception.cr"},{"filename":"cltk/parser/exceptions/parser_construction_exception.cr","line_number":3,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/parser_construction_exception.cr"},{"filename":"cltk/parser/exceptions/handled_error_exception.cr","line_number":3,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/handled_error_exception.cr"},{"filename":"cltk/parser/exceptions/not_in_language_exception.cr","line_number":3,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/not_in_language_exception.cr"},{"filename":"cltk/parser/exceptions/useless_parser_exception.cr","line_number":3,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/useless_parser_exception.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser","kind":"class","full_name":"CLTK::Parser","name":"Parser"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Exceptions/BadToken","path":"CLTK/Parser/Exceptions/BadToken.html","kind":"class","full_name":"CLTK::Parser::Exceptions::BadToken","name":"BadToken","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/parser/exceptions/bad_token_exception.cr","line_number":6,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/bad_token_exception.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Exceptions","kind":"module","full_name":"CLTK::Parser::Exceptions","name":"Exceptions"},"doc":"A BadToken error indicates that a token was observed in the input stream\nthat wasn't used in the grammar's definition.","summary":"<p>A BadToken error indicates that a token was observed in the input stream that wasn't used in the grammar's definition.</p>","class_methods":[],"constructors":[{"id":"new(token:Token)-class-method","html_id":"new(token:Token)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"Token"}],"args_string":"(token : Token)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/bad_token_exception.cr#L7","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/bad_token_exception.cr#L7","def":{"name":"new","args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"Token"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(token)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"to_s-instance-method","html_id":"to_s-instance-method","name":"to_s","doc":"@return [String] String representation of the error.","summary":"<p>@return [String] String representation of the error.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/bad_token_exception.cr#L13","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/bad_token_exception.cr#L13","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"Unexpected token: #{@token} not present in grammar definition.\""}}],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Exceptions/HandledError","path":"CLTK/Parser/Exceptions/HandledError.html","kind":"class","full_name":"CLTK::Parser::Exceptions::HandledError","name":"HandledError","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/parser/exceptions/handled_error_exception.cr","line_number":6,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/handled_error_exception.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Exceptions","kind":"module","full_name":"CLTK::Parser::Exceptions","name":"Exceptions"},"doc":"An error of this type is raised when the parser encountered a error that\nwas handled by an error production.","summary":"<p>An error of this type is raised when the parser encountered a error that was handled by an error production.</p>","class_methods":[],"constructors":[{"id":"new(errors:Array(CLTK::Type),result:CLTK::Type)-class-method","html_id":"new(errors:Array(CLTK::Type),result:CLTK::Type)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"errors","doc":null,"default_value":"","external_name":"errors","restriction":"Array(CLTK::Type)"},{"name":"result","doc":null,"default_value":"","external_name":"result","restriction":"CLTK::Type"}],"args_string":"(errors : Array(CLTK::Type), result : CLTK::Type)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/handled_error_exception.cr#L21","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/handled_error_exception.cr#L21","def":{"name":"new","args":[{"name":"errors","doc":null,"default_value":"","external_name":"errors","restriction":"Array(CLTK::Type)"},{"name":"result","doc":null,"default_value":"","external_name":"result","restriction":"CLTK::Type"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(errors, result)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"errors:Array(CLTK::Type)-instance-method","html_id":"errors:Array(CLTK::Type)-instance-method","name":"errors","doc":"The errors as reported by the parser.\n\n@return [Array<Object>]","summary":"<p>The errors as reported by the parser.</p>","abstract":false,"args":[],"args_string":" : Array(CLTK::Type)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/handled_error_exception.cr#L11","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/handled_error_exception.cr#L11","def":{"name":"errors","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@errors"}},{"id":"result:CLTK::Type-instance-method","html_id":"result:CLTK::Type-instance-method","name":"result","doc":"The result that would have been returned by the call to *parse*.","summary":"<p>The result that would have been returned by the call to <em>parse</em>.</p>","abstract":false,"args":[],"args_string":" : CLTK::Type","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/handled_error_exception.cr#L14","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/handled_error_exception.cr#L14","def":{"name":"result","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@result"}}],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Exceptions/InternalParserException","path":"CLTK/Parser/Exceptions/InternalParserException.html","kind":"class","full_name":"CLTK::Parser::Exceptions::InternalParserException","name":"InternalParserException","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/parser/exceptions/internal_parser_exception.cr","line_number":6,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/internal_parser_exception.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Exceptions","kind":"module","full_name":"CLTK::Parser::Exceptions","name":"Exceptions"},"doc":"Used for runtime exceptions that are the parsers fault.  These should\nnever be observed in the wild.","summary":"<p>Used for runtime exceptions that are the parsers fault.</p>","class_methods":[],"constructors":[{"id":"new(message)-class-method","html_id":"new(message)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":""}],"args_string":"(message)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/internal_parser_exception.cr#L7","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/internal_parser_exception.cr#L7","def":{"name":"new","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(message)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Exceptions/NotInLanguage","path":"CLTK/Parser/Exceptions/NotInLanguage.html","kind":"class","full_name":"CLTK::Parser::Exceptions::NotInLanguage","name":"NotInLanguage","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/parser/exceptions/not_in_language_exception.cr","line_number":7,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/not_in_language_exception.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Exceptions","kind":"module","full_name":"CLTK::Parser::Exceptions","name":"Exceptions"},"doc":"A NotInLanguage error is raised whenever there is no valid parse tree\nfor a given token stream.  In other words, the input string is not in the\ndefined language.","summary":"<p>A NotInLanguage error is raised whenever there is no valid parse tree for a given token stream.</p>","class_methods":[],"constructors":[{"id":"new(seen:Array(CLTK::Token),current:CLTK::Token,remaining:Array(CLTK::Token))-class-method","html_id":"new(seen:Array(CLTK::Token),current:CLTK::Token,remaining:Array(CLTK::Token))-class-method","name":"new","doc":"@param [Array<Token>]  seen       Tokens that have been successfully parsed\n@param [Token]         current    Token that caused the parser to stop\n@param [Array<Token>]  remaining  Tokens that have yet to be seen","summary":"<p>@param [Array&lt;Token>]  seen       Tokens that have been successfully parsed @param [Token]         current    Token that caused the parser to stop @param [Array&lt;Token>]  remaining  Tokens that have yet to be seen</p>","abstract":false,"args":[{"name":"seen","doc":null,"default_value":"","external_name":"seen","restriction":"Array(CLTK::Token)"},{"name":"current","doc":null,"default_value":"","external_name":"current","restriction":"CLTK::Token"},{"name":"remaining","doc":null,"default_value":"","external_name":"remaining","restriction":"Array(CLTK::Token)"}],"args_string":"(seen : Array(CLTK::Token), current : CLTK::Token, remaining : Array(CLTK::Token))","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/not_in_language_exception.cr#L21","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/not_in_language_exception.cr#L21","def":{"name":"new","args":[{"name":"seen","doc":null,"default_value":"","external_name":"seen","restriction":"Array(CLTK::Token)"},{"name":"current","doc":null,"default_value":"","external_name":"current","restriction":"CLTK::Token"},{"name":"remaining","doc":null,"default_value":"","external_name":"remaining","restriction":"Array(CLTK::Token)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(seen, current, remaining)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"current:CLTK::Token-instance-method","html_id":"current:CLTK::Token-instance-method","name":"current","doc":"@return [Token]  Token that caused the parser to stop","summary":"<p>@return [Token]  Token that caused the parser to stop</p>","abstract":false,"args":[],"args_string":" : CLTK::Token","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/not_in_language_exception.cr#L13","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/not_in_language_exception.cr#L13","def":{"name":"current","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@current"}},{"id":"remaining:Array(CLTK::Token)-instance-method","html_id":"remaining:Array(CLTK::Token)-instance-method","name":"remaining","doc":"@return [Array<Token>]  List of tokens that have yet to be seen","summary":"<p>@return [Array&lt;Token>]  List of tokens that have yet to be seen</p>","abstract":false,"args":[],"args_string":" : Array(CLTK::Token)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/not_in_language_exception.cr#L16","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/not_in_language_exception.cr#L16","def":{"name":"remaining","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@remaining"}},{"id":"seen:Array(CLTK::Token)-instance-method","html_id":"seen:Array(CLTK::Token)-instance-method","name":"seen","doc":"@return [Array<Token>]  List of tokens that have been successfully parsed","summary":"<p>@return [Array&lt;Token>]  List of tokens that have been successfully parsed</p>","abstract":false,"args":[],"args_string":" : Array(CLTK::Token)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/not_in_language_exception.cr#L10","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/not_in_language_exception.cr#L10","def":{"name":"seen","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@seen"}},{"id":"to_s-instance-method","html_id":"to_s-instance-method","name":"to_s","doc":"@return [String] String representation of the error.","summary":"<p>@return [String] String representation of the error.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/not_in_language_exception.cr#L27","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/not_in_language_exception.cr#L27","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"String not in language.  Token info:\\n\\tSeen: #{@seen}\\n\\tCurrent: #{@current.inspect}\\n\\tRemaining: #{@remaining}\""}}],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Exceptions/ParserConstructionException","path":"CLTK/Parser/Exceptions/ParserConstructionException.html","kind":"class","full_name":"CLTK::Parser::Exceptions::ParserConstructionException","name":"ParserConstructionException","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/parser/exceptions/parser_construction_exception.cr","line_number":5,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/parser_construction_exception.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Exceptions","kind":"module","full_name":"CLTK::Parser::Exceptions","name":"Exceptions"},"doc":"Used for exceptions that occure during parser construction.","summary":"<p>Used for exceptions that occure during parser construction.</p>","class_methods":[],"constructors":[{"id":"new(message)-class-method","html_id":"new(message)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":""}],"args_string":"(message)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/parser_construction_exception.cr#L6","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/parser_construction_exception.cr#L6","def":{"name":"new","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(message)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Exceptions/UselessParserException","path":"CLTK/Parser/Exceptions/UselessParserException.html","kind":"class","full_name":"CLTK::Parser::Exceptions::UselessParserException","name":"UselessParserException","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/parser/exceptions/useless_parser_exception.cr","line_number":5,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/useless_parser_exception.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Exceptions","kind":"module","full_name":"CLTK::Parser::Exceptions","name":"Exceptions"},"doc":"Used to indicate that a parser is empty or hasn't been finalized.","summary":"<p>Used to indicate that a parser is empty or hasn't been finalized.</p>","class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Sets the error messsage for this exception.","summary":"<p>Sets the error messsage for this exception.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/useless_parser_exception.cr#L7","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/exceptions/useless_parser_exception.cr#L7","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Explain","path":"CLTK/Parser/Explain.html","kind":"module","full_name":"CLTK::Parser::Explain","name":"Explain","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cltk/parser/explain.cr","line_number":1,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/explain.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser","kind":"class","full_name":"CLTK::Parser","name":"Parser"}],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser","kind":"class","full_name":"CLTK::Parser","name":"Parser"},"doc":null,"summary":null,"class_methods":[{"id":"explain(io:IO)-class-method","html_id":"explain(io:IO)-class-method","name":"explain","doc":"This function will print a description of the parser to the\nprovided IO object.","summary":"<p>This function will print a description of the parser to the provided IO object.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/explain.cr#L4","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/explain.cr#L4","def":{"name":"explain","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @@grammar && (!@@states.empty?)\n  io.puts(\"###############\")\n  io.puts(\"# Productions #\")\n  io.puts(\"###############\")\n  io.puts\n  max_id_length = @@grammar.productions_id.size.to_s.size\n  @@grammar.productions.each do |sym, productions|\n    productions = productions.as(Array(CLTK::CFG::Production))\n    max_rhs_length = (productions).reduce(0) do |m, p|\n      if (len = p.to_s.size) > m\n        len\n      else\n        m\n      end\n    end\n    productions.each do |production|\n      p_string = production.to_s\n      prec = @@production_precs_prepare[production.id]\n      if (      prec.is_a?(::Tuple(Int32, String)))\n        io.print(\" \" * (max_rhs_length - p_string.size))\n        io.print(\" : (#{sprintf(\"%-5s\", prec.first)}, #{prec.last})\")\n      end\n      io.puts\n    end\n    io.puts\n  end\n  io.puts(\"##########\")\n  io.puts(\"# Tokens #\")\n  io.puts(\"##########\")\n  io.puts\n  max_token_len = @@grammar.terms.reduce(0) do |m, t|\n    if t.size > m\n      t.size\n    else\n      m\n    end\n  end\n  @@grammar.terms.to_a.sort do |a, b|\n    a.to_s <=> b.to_s\n  end.each do |term|\n    io.print(\"\\t#{term}\")\n    if (    prec = @@token_precs[term])\n      io.print(\" \" * (max_token_len - term.size))\n      io.print(\" : (#{sprintf(\"%-5s\", prec.first)}, #{prec.last})\")\n    end\n    io.puts\n  end\n  io.puts\n  io.puts(\"#####################\")\n  io.puts(\"# Table Information #\")\n  io.puts(\"#####################\")\n  io.puts\n  io.puts(\"\\tStart symbol: #{@@grammar.start_symbol}'\")\n  io.puts\n  io.puts(\"\\tTotal number of states: #{@@states.size}\")\n  io.puts\n  io.puts(\"\\tTotal conflicts (maybe wrong - flatten impl): #{@@conflicts.values.flatten.size}\")\n  io.puts\n  @@conflicts.each do |state_id, conflicts|\n    io.puts(\"\\tState #{state_id} has #{@@conflicts.size} conflict(s)\")\n  end\n  @@conflicts = @@conflicts\n  if @@conflicts.empty?\n  else\n    io.puts\n  end\n  io.puts(\"###############\")\n  io.puts(\"# Parse Table #\")\n  io.puts(\"###############\")\n  io.puts\n  each_state do |state|\n    io.puts(\"State #{state.id}:\")\n    io.puts\n    io.puts(\"\\t# ITEMS #\")\n    max = state.items.reduce(0) do |max, item|\n      if item.lhs.to_s.size > max\n        item.lhs.to_s.size\n      else\n        max\n      end\n    end\n    state.each do |item|\n      io.puts(\"\\t#{item.to_s(max)}\")\n    end\n    io.puts\n    io.puts(\"\\t# ACTIONS #\")\n    state.actions.keys.sort do |a, b|\n      a.to_s <=> b.to_s\n    end.each do |sym|\n      state.actions[sym].each do |action|\n        io.puts(\"\\tOn #{sym} #{action}\")\n      end\n    end\n    io.puts\n    io.puts(\"\\t# CONFLICTS #\")\n    if @@conflicts[state.id].size == 0\n      io.puts(\"\\tNone\\n\\n\")\n    else\n      @@conflicts[state.id].each do |conflict|\n        type, sym = conflict\n        io.print(\"\\t#{if type == (:SR)\n          \"Shift/Reduce\"\n        else\n          \"Reduce/Reduce\"\n        end} conflict\")\n        io.puts(\" on #{sym}\")\n      end\n      io.puts\n    end\n  end\n  if io.is_a?(IO)\n    if io != STDOUT\n    end\n  end\nend"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/LIST_PROD","path":"CLTK/Parser/LIST_PROD.html","kind":"alias","full_name":"CLTK::Parser::LIST_PROD","name":"LIST_PROD","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cltk/parser.cr","line_number":61,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":true,"aliased":"NamedTuple(empty: Bool, lhs: String | Symbol, elements: Array(String) | String, separator: String)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser","kind":"class","full_name":"CLTK::Parser","name":"Parser"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Opts","path":"CLTK/Parser/Opts.html","kind":"alias","full_name":"CLTK::Parser::Opts","name":"Opts","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cltk/parser.cr","line_number":452,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":true,"aliased":"NamedTuple(explain: Bool | IO | String, lookahead: Bool, precedence: Bool, use: String | Nil)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser","kind":"class","full_name":"CLTK::Parser","name":"Parser"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/ParserConcern","path":"CLTK/Parser/ParserConcern.html","kind":"module","full_name":"CLTK::Parser::ParserConcern","name":"ParserConcern","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cltk/parser/parser_concern.cr","line_number":17,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parser_concern.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser","kind":"class","full_name":"CLTK::Parser","name":"Parser"},"doc":"A module that adds the parse algorithm into the class or module its included in.","summary":"<p>A module that adds the parse algorithm into the class or module its included in.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/ParseStack","path":"CLTK/Parser/ParseStack.html","kind":"class","full_name":"CLTK::Parser::ParseStack","name":"ParseStack","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/parser/parse_stack.cr","line_number":15,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser","kind":"class","full_name":"CLTK::Parser","name":"Parser"},"doc":"The ParseStack class is used by a Parser to keep track of state\nduring parsing.","summary":"<p>The ParseStack class is used by a Parser to keep track of state during parsing.</p>","class_methods":[],"constructors":[{"id":"new(id:Int32,output_stack=[]ofCLTK::Parser::StackType,state_stack=[0]ofInt32,node_stack=[]ofInt32,connections=[]of::Tuple(Int32,Int32),labels=[]ofString,positions=[]ofStreamPosition)-class-method","html_id":"new(id:Int32,output_stack=[]ofCLTK::Parser::StackType,state_stack=[0]ofInt32,node_stack=[]ofInt32,connections=[]of::Tuple(Int32,Int32),labels=[]ofString,positions=[]ofStreamPosition)-class-method","name":"new","doc":"Instantiate a new ParserStack object.","summary":"<p>Instantiate a new ParserStack object.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Int32"},{"name":"output_stack","doc":null,"default_value":"[] of CLTK::Parser::StackType","external_name":"output_stack","restriction":""},{"name":"state_stack","doc":null,"default_value":"[0] of Int32","external_name":"state_stack","restriction":""},{"name":"node_stack","doc":null,"default_value":"[] of Int32","external_name":"node_stack","restriction":""},{"name":"connections","doc":null,"default_value":"[] of ::Tuple(Int32, Int32)","external_name":"connections","restriction":""},{"name":"labels","doc":null,"default_value":"[] of String","external_name":"labels","restriction":""},{"name":"positions","doc":null,"default_value":"[] of StreamPosition","external_name":"positions","restriction":""}],"args_string":"(id : Int32, output_stack = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">CLTK</span><span class=\"t\">::</span><span class=\"t\">Parser</span><span class=\"t\">::</span><span class=\"t\">StackType</span>, state_stack = [<span class=\"n\">0</span>] <span class=\"k\">of</span> <span class=\"t\">Int32</span>, node_stack = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Int32</span>, connections = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">::</span><span class=\"t\">Tuple</span>(<span class=\"t\">Int32</span>, <span class=\"t\">Int32</span>), labels = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">String</span>, positions = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">StreamPosition</span>)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L59","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L59","def":{"name":"new","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Int32"},{"name":"output_stack","doc":null,"default_value":"[] of CLTK::Parser::StackType","external_name":"output_stack","restriction":""},{"name":"state_stack","doc":null,"default_value":"[0] of Int32","external_name":"state_stack","restriction":""},{"name":"node_stack","doc":null,"default_value":"[] of Int32","external_name":"node_stack","restriction":""},{"name":"connections","doc":null,"default_value":"[] of ::Tuple(Int32, Int32)","external_name":"connections","restriction":""},{"name":"labels","doc":null,"default_value":"[] of String","external_name":"labels","restriction":""},{"name":"positions","doc":null,"default_value":"[] of StreamPosition","external_name":"positions","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(id, output_stack, state_stack, node_stack, connections, labels, positions)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"branch(new_id)-instance-method","html_id":"branch(new_id)-instance-method","name":"branch","doc":"Branch this stack, effectively creating a new copy of its\ninternal state.\n\n@param [Integer] new_id ID for the new ParseStack.\n\n@return [ParseStack]","summary":"<p>Branch this stack, effectively creating a new copy of its internal state.</p>","abstract":false,"args":[{"name":"new_id","doc":null,"default_value":"","external_name":"new_id","restriction":""}],"args_string":"(new_id)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L73","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L73","def":{"name":"branch","args":[{"name":"new_id","doc":null,"default_value":"","external_name":"new_id","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ParseStack.new(new_id, @output_stack.dup, @state_stack.dup, @node_stack.dup, @connections.dup, @labels.dup, @positions.dup)"}},{"id":"id:Int32-instance-method","html_id":"id:Int32-instance-method","name":"id","doc":"@return [Integer] ID of this parse stack.","summary":"<p>@return [Integer] ID of this parse stack.</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L47","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L47","def":{"name":"id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id"}},{"id":"output_stack:Array(CLTK::Parser::StackType)-instance-method","html_id":"output_stack:Array(CLTK::Parser::StackType)-instance-method","name":"output_stack","doc":"@return [Array<Object>] Array of objects produced by {Reduce} actions.","summary":"<p>@return [Array&lt;Object>] Array of objects produced by {Reduce} actions.</p>","abstract":false,"args":[],"args_string":" : Array(CLTK::Parser::StackType)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L50","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L50","def":{"name":"output_stack","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@output_stack"}},{"id":"pop(n=1)-instance-method","html_id":"pop(n=1)-instance-method","name":"pop","doc":"Pop some number of objects off of the inside stacks.\n\n@param [Integer] n Number of object to pop off the stack.\n\n@return [Array(Object, StreamPosition)] Values popped from the output and positions stacks.","summary":"<p>Pop some number of objects off of the inside stacks.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"1","external_name":"n","restriction":""}],"args_string":"(n = <span class=\"n\">1</span>)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L127","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L127","def":{"name":"pop","args":[{"name":"n","doc":null,"default_value":"1","external_name":"n","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@state_stack.pop(n)\n@cbuffer = @node_stack.pop(n)\n{@output_stack.pop(n), @positions.pop(n)}\n"}},{"id":"position-instance-method","html_id":"position-instance-method","name":"position","doc":"@return [StreamPosition] Position data for the last symbol on the stack.","summary":"<p>@return [StreamPosition] Position data for the last symbol on the stack.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L79","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L79","def":{"name":"position","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @positions.empty?\n  StreamPosition.new\nelse\n  @positions.last.dup\nend"}},{"id":"push(state,o,node0,position)-instance-method","html_id":"push(state,o,node0,position)-instance-method","name":"push","doc":"Push new state and other information onto the stack.\n\n@param [Integer]\t\t\tstate\tID of the shifted state.\n@param [Object]\t\t\to\t\tValue of Token that caused the shift.\n@param [Symbol]\t\t\tnode0\tLabel for node in parse tree.\n@param [StreamPosition]\tposition\tPosition token that got shifted.\n\n@return [void]","summary":"<p>Push new state and other information onto the stack.</p>","abstract":false,"args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":""},{"name":"o","doc":null,"default_value":"","external_name":"o","restriction":""},{"name":"node0","doc":null,"default_value":"","external_name":"node0","restriction":""},{"name":"position","doc":null,"default_value":"","external_name":"position","restriction":""}],"args_string":"(state, o, node0, position)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L95","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L95","def":{"name":"push","args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":""},{"name":"o","doc":null,"default_value":"","external_name":"o","restriction":""},{"name":"node0","doc":null,"default_value":"","external_name":"node0","restriction":""},{"name":"position","doc":null,"default_value":"","external_name":"position","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@state_stack << state\nif o.is_a?(Array)\n  @output_stack << ([(o.reduce(Array(CLTK::Parser::StackType).new) do |a, e|\n    e.is_a?(CLTK::Parser::StackType) ? a.push(e) : a\n  end).as(CLTK::Parser::StackType)].as(CLTK::Parser::StackType))\nelse\n  if o.is_a?(CLTK::Parser::StackType)\n    @output_stack << o\n  end\nend\n@node_stack << @labels.size\n@labels << ((if (CLTK.is_terminal?(node0)) && o\n  node0.to_s + \"(#{o})\"\nelse\n  node0.to_s\nend).as(String))\n@positions << position.not_nil!\nif CLTK.is_nonterminal?(node0)\n  @cbuffer.each do |node1|\n    @connections << {@labels.size - 1, node1}\n  end\nend\n"}},{"id":"resolve(env,procs)-instance-method","html_id":"resolve(env,procs)-instance-method","name":"resolve","doc":null,"summary":null,"abstract":false,"args":[{"name":"env","doc":null,"default_value":"","external_name":"env","restriction":""},{"name":"procs","doc":null,"default_value":"","external_name":"procs","restriction":""}],"args_string":"(env, procs)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L63","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L63","def":{"name":"resolve","args":[{"name":"env","doc":null,"default_value":"","external_name":"env","restriction":""},{"name":"procs","doc":null,"default_value":"","external_name":"procs","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(OutputStackVisitor.new(env, procs)).resolve(@output_stack.last)"}},{"id":"result-instance-method","html_id":"result-instance-method","name":"result","doc":"Fetch the result stored in this ParseStack.  If there is more\nthan one object left on the output stack there is an error.\n\n@return [Object] The end result of this parse stack.","summary":"<p>Fetch the result stored in this ParseStack.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L140","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L140","def":{"name":"result","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @output_stack.size == 1\n  return @output_stack.last\nelse\n  raise(Parser::Exceptions::InternalParserException.new(\"The parsing stack should have 1 element on the output stack, not #{@output_stack.size}.\"))\nend"}},{"id":"state-instance-method","html_id":"state-instance-method","name":"state","doc":"@return [Integer] Current state of this ParseStack.","summary":"<p>@return [Integer] Current state of this ParseStack.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L149","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L149","def":{"name":"state","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@state_stack.last"}},{"id":"state_stack:Array(Int32)-instance-method","html_id":"state_stack:Array(Int32)-instance-method","name":"state_stack","doc":"@return [Array<Integer>] Array of states used when performing {Reduce} actions.","summary":"<p>@return [Array&lt;Integer>] Array of states used when performing {Reduce} actions.</p>","abstract":false,"args":[],"args_string":" : Array(Int32)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L53","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L53","def":{"name":"state_stack","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@state_stack"}},{"id":"tree-instance-method","html_id":"tree-instance-method","name":"tree","doc":"@return [String] Representation of the parse tree in the DOT langauge.","summary":"<p>@return [String] Representation of the parse tree in the DOT langauge.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L154","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L154","def":{"name":"tree","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"tree = \"digraph tree#{@id} {\\n\"\n@labels.each_with_index do |label, i|\n  tree = tree + \"\\tnode#{i} [label=\\\"#{label}\\\"\"\n  if CLTK.is_terminal?(label)\n    tree = tree + \" shape=box\"\n  end\n  tree = tree + \"];\\n\"\nend\ntree = tree + \"\\n\"\n@connections.each do |from, to|\n  tree = tree + \"\\tnode#{from} -> node#{to};\\n\"\nend\ntree = tree + \"}\"\n"}}],"macros":[],"types":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/ParseStack/OutputStackVisitor","path":"CLTK/Parser/ParseStack/OutputStackVisitor.html","kind":"class","full_name":"CLTK::Parser::ParseStack::OutputStackVisitor","name":"OutputStackVisitor","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/parser/parse_stack.cr","line_number":19,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/ParseStack","kind":"class","full_name":"CLTK::Parser::ParseStack","name":"ParseStack"},"doc":"Resolve the Productions Callbacks into\nthe AST Tree","summary":"<p>Resolve the Productions Callbacks into the AST Tree</p>","class_methods":[],"constructors":[{"id":"new(env:Environment,procs:ProcsType)-class-method","html_id":"new(env:Environment,procs:ProcsType)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"env","doc":null,"default_value":"","external_name":"env","restriction":"Environment"},{"name":"procs","doc":null,"default_value":"","external_name":"procs","restriction":"ProcsType"}],"args_string":"(env : Environment, procs : ProcsType)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L24","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L24","def":{"name":"new","args":[{"name":"env","doc":null,"default_value":"","external_name":"env","restriction":"Environment"},{"name":"procs","doc":null,"default_value":"","external_name":"procs","restriction":"ProcsType"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(env, procs)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"resolve(tree:Tuple(Int32,Array(CLTK::Parser::StackType),Array(CLTK::StreamPosition)))-instance-method","html_id":"resolve(tree:Tuple(Int32,Array(CLTK::Parser::StackType),Array(CLTK::StreamPosition)))-instance-method","name":"resolve","doc":null,"summary":null,"abstract":false,"args":[{"name":"tree","doc":null,"default_value":"","external_name":"tree","restriction":"Tuple(Int32, Array(CLTK::Parser::StackType), Array(CLTK::StreamPosition))"}],"args_string":"(tree : Tuple(Int32, Array(CLTK::Parser::StackType), Array(CLTK::StreamPosition)))","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L26","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L26","def":{"name":"resolve","args":[{"name":"tree","doc":null,"default_value":"","external_name":"tree","restriction":"Tuple(Int32, Array(CLTK::Parser::StackType), Array(CLTK::StreamPosition))"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"cb, args, positions = tree\nresolved_args = args.map do |arg|\n  (resolve(arg)).as(CLTK::Type)\nend\n@env.set_positions(positions)\n@procs[cb].first.call(resolved_args, @env)\n"}},{"id":"resolve(value:CLTK::Type)-instance-method","html_id":"resolve(value:CLTK::Type)-instance-method","name":"resolve","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"CLTK::Type"}],"args_string":"(value : CLTK::Type)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L41","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L41","def":{"name":"resolve","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"CLTK::Type"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value.as(CLTK::Type)"}},{"id":"resolve(value:Array)-instance-method","html_id":"resolve(value:Array)-instance-method","name":"resolve","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Array"}],"args_string":"(value : Array)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L35","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr#L35","def":{"name":"resolve","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Array"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value.map do |v|\n  (resolve(v)).as(CLTK::Type)\nend"}}],"macros":[],"types":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/ParseStack/OutputStackVisitor/ProcsType","path":"CLTK/Parser/ParseStack/OutputStackVisitor/ProcsType.html","kind":"alias","full_name":"CLTK::Parser::ParseStack::OutputStackVisitor::ProcsType","name":"ProcsType","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cltk/parser/parse_stack.cr","line_number":21,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/parse_stack.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":true,"aliased":"(Array(Tuple(CLTK::Parser::ProdProc, Int32)) | Hash(Int32, Tuple(CLTK::Parser::ProdProc, Int32)))","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/ParseStack/OutputStackVisitor","kind":"class","full_name":"CLTK::Parser::ParseStack::OutputStackVisitor","name":"OutputStackVisitor"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/ProdProc","path":"CLTK/Parser/ProdProc.html","kind":"struct","full_name":"CLTK::Parser::ProdProc","name":"ProdProc","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/TheKingsJrester/cltk/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/parser/prod_proc.cr","line_number":5,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/prod_proc.cr"},{"filename":"cltk/parser/prod_proc_debug.cr","line_number":3,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/prod_proc_debug.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser","kind":"class","full_name":"CLTK::Parser","name":"Parser"},"doc":"A subclass of Proc that indicates how it should be passed arguments\nby the parser.","summary":"<p>A subclass of Proc that indicates how it should be passed arguments by the parser.</p>","class_methods":[],"constructors":[{"id":"new(arg_type=:splat,selections=[]ofInt32)-class-method","html_id":"new(arg_type=:splat,selections=[]ofInt32)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"arg_type","doc":null,"default_value":":splat","external_name":"arg_type","restriction":""},{"name":"selections","doc":null,"default_value":"[] of Int32","external_name":"selections","restriction":""}],"args_string":"(arg_type = <span class=\"n\">:splat</span>, selections = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Int32</span>)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/prod_proc.cr#L14","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/prod_proc.cr#L14","def":{"name":"new","args":[{"name":"arg_type","doc":null,"default_value":":splat","external_name":"arg_type","restriction":""},{"name":"selections","doc":null,"default_value":"[] of Int32","external_name":"selections","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(arg_type, selections)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(arg_type=:splat,selections=[]ofInt32,&block:Proc(Array(CLTK::Type),Environment,Symbol,Type))-class-method","html_id":"new(arg_type=:splat,selections=[]ofInt32,&amp;block:Proc(Array(CLTK::Type),Environment,Symbol,Type))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"arg_type","doc":null,"default_value":":splat","external_name":"arg_type","restriction":""},{"name":"selections","doc":null,"default_value":"[] of Int32","external_name":"selections","restriction":""}],"args_string":"(arg_type = <span class=\"n\">:splat</span>, selections = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Int32</span>, &block : Proc(Array(CLTK::Type), Environment, Symbol, Type))","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/prod_proc.cr#L18","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/prod_proc.cr#L18","def":{"name":"new","args":[{"name":"arg_type","doc":null,"default_value":":splat","external_name":"arg_type","restriction":""},{"name":"selections","doc":null,"default_value":"[] of Int32","external_name":"selections","restriction":""}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"Proc(Array(CLTK::Type), Environment, Symbol, Type)"},"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(arg_type, selections, &block) do\n  yield\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"arg_type:Symbol-instance-method","html_id":"arg_type:Symbol-instance-method","name":"arg_type","doc":"@return [:array, :splat]  Method that should be used to pass arguments to this proc.","summary":"<p>@return [:array, :splat]  Method that should be used to pass arguments to this proc.</p>","abstract":false,"args":[],"args_string":" : Symbol","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/prod_proc.cr#L7","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/prod_proc.cr#L7","def":{"name":"arg_type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@arg_type"}},{"id":"call(args:Array(Type),env:Environment)-instance-method","html_id":"call(args:Array(Type),env:Environment)-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(Type)"},{"name":"env","doc":null,"default_value":"","external_name":"env","restriction":"Environment"}],"args_string":"(args : Array(Type), env : Environment)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/prod_proc.cr#L25","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/prod_proc.cr#L25","def":{"name":"call","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(Type)"},{"name":"env","doc":null,"default_value":"","external_name":"env","restriction":"Environment"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(if @block\n  @block.not_nil!.call(args, env, @arg_type)\nelse\n  if @arg_type == (:splat)\n    args[0]\n  else\n    args\n  end\nend).as(Type)"}},{"id":"crystalized_block:String?-instance-method","html_id":"crystalized_block:String?-instance-method","name":"crystalized_block","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/prod_proc_debug.cr#L4","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/prod_proc_debug.cr#L4","def":{"name":"crystalized_block","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@crystalized_block"}},{"id":"crystalized_block=(crystalized_block)-instance-method","html_id":"crystalized_block=(crystalized_block)-instance-method","name":"crystalized_block=","doc":null,"summary":null,"abstract":false,"args":[{"name":"crystalized_block","doc":null,"default_value":"","external_name":"crystalized_block","restriction":""}],"args_string":"(crystalized_block)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/prod_proc_debug.cr#L4","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/prod_proc_debug.cr#L4","def":{"name":"crystalized_block=","args":[{"name":"crystalized_block","doc":null,"default_value":"","external_name":"crystalized_block","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@crystalized_block = crystalized_block"}},{"id":"selections:Array(Int32)-instance-method","html_id":"selections:Array(Int32)-instance-method","name":"selections","doc":"@return [Array<Integer>]  Mask for selection of tokens to pass to action.  Empty mask means pass all.","summary":"<p>@return [Array&lt;Integer>]  Mask for selection of tokens to pass to action.</p>","abstract":false,"args":[],"args_string":" : Array(Int32)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/prod_proc.cr#L10","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/prod_proc.cr#L10","def":{"name":"selections","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@selections"}}],"macros":[{"id":"new(*args)-macro","html_id":"new(*args)-macro","name":"new","doc":"Keep Track of the String representation\nof this Procs Code Block for later\nserialization","summary":"<p>Keep Track of the String representation of this Procs Code Block for later serialization</p>","abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/prod_proc_debug.cr#L10","def":{"name":"new","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        instance = \n{{ @type }}\n.allocate\n        \n{% if args.empty? %}\n          instance.initialize {{ block }}\n        {% else %}\n          instance.initialize(*{{ args }}) {{ block }}\n        {% end %}\n\n        instance.crystalized_block = \n{{ block.stringify }}\n\n        instance\n      \n"}}],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/StackType","path":"CLTK/Parser/StackType.html","kind":"alias","full_name":"CLTK::Parser::StackType","name":"StackType","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cltk/parser/type.cr","line_number":8,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/type.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":true,"aliased":"(Array(CLTK::Parser::StackType) | String | Tuple(Int32, Array(CLTK::Parser::StackType), Array(CLTK::StreamPosition)) | Nil)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser","kind":"class","full_name":"CLTK::Parser","name":"Parser"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/StandaloneParser","path":"CLTK/Parser/StandaloneParser.html","kind":"class","full_name":"CLTK::Parser::StandaloneParser","name":"StandaloneParser","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/parser/msgpack.cr","line_number":15,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser","kind":"class","full_name":"CLTK::Parser","name":"Parser"},"doc":null,"summary":null,"class_methods":[{"id":"_parse(procs,lh_sides,symbols,states,token_hooks,tokens,opts:NamedTuple?=nil)-class-method","html_id":"_parse(procs,lh_sides,symbols,states,token_hooks,tokens,opts:NamedTuple?=nil)-class-method","name":"_parse","doc":null,"summary":null,"abstract":false,"args":[{"name":"procs","doc":null,"default_value":"","external_name":"procs","restriction":""},{"name":"lh_sides","doc":null,"default_value":"","external_name":"lh_sides","restriction":""},{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""},{"name":"states","doc":null,"default_value":"","external_name":"states","restriction":""},{"name":"token_hooks","doc":null,"default_value":"","external_name":"token_hooks","restriction":""},{"name":"tokens","doc":null,"default_value":"","external_name":"tokens","restriction":""},{"name":"opts","doc":null,"default_value":"nil","external_name":"opts","restriction":"NamedTuple | ::Nil"}],"args_string":"(procs, lh_sides, symbols, states, token_hooks, tokens, opts : NamedTuple? = <span class=\"n\">nil</span>)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L16","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L16","def":{"name":"_parse","args":[{"name":"procs","doc":null,"default_value":"","external_name":"procs","restriction":""},{"name":"lh_sides","doc":null,"default_value":"","external_name":"lh_sides","restriction":""},{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""},{"name":"states","doc":null,"default_value":"","external_name":"states","restriction":""},{"name":"token_hooks","doc":null,"default_value":"","external_name":"token_hooks","restriction":""},{"name":"tokens","doc":null,"default_value":"","external_name":"tokens","restriction":""},{"name":"opts","doc":null,"default_value":"nil","external_name":"opts","restriction":"NamedTuple | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"opts = build_parse_opts(opts)\nstack_id = 0\nerror_mode = false\nreduction_guard = false\naccepted = [] of CLTK::Parser::ParseStack\nmoving_on = [] of CLTK::Parser::ParseStack\nprocessing = [CLTK::Parser::ParseStack.new(stack_id = stack_id + 1)]\ntokens.each_with_index do |token, index|\n  if symbols.includes?(token.type.to_s)\n  else\n    raise(CLTK::Parser::Exceptions::BadToken.new(token))\n  end\n  while (  processing.any?)\n    stack = processing.shift\n    (token_hooks.fetch(token.type.to_s, [] of Proc(Environment, Nil))).each do |hook|\n      hook.call(opts[:env])\n    end\n    actions = states[stack.state].on?(token.type.to_s)\n    if actions.empty?\n      if error_mode\n        (stack.output_stack.last.as(Array)) << token.value\n        moving_on << stack\n        next\n      end\n      if (accepted.empty? && moving_on.empty?) && processing.empty?\n        while stack.state_stack.any?\n          if (actions = states[stack.state].on?((:ERROR).to_s)).empty?\n            stack.pop\n          else\n            stack.push(actions.first.id, [token.value.as(CLTK::Type)], (:ERROR).to_s, token.position)\n            break\n          end\n        end\n        if stack.state_stack.any?\n          error_mode = reduction_guard = true\n          opts[:env].he = true\n          moving_on << stack\n        end\n      end\n      next\n    end\n    pairs = ([{stack, actions.pop}] + actions.map do |action|\n      {stack.branch(stack_id = stack_id + 1), action}\n    end)\n    pairs.each do |pair|\n      stack, action = pair\n      if action.is_a?(CLTK::Parser::Actions::Accept)\n        accepted << stack\n        if opts[:accept] == (:all)\n        else\n          break\n        end\n      else\n        if action.is_a?(CLTK::Parser::Actions::Reduce)\n          production_proc, pop_size = procs[action.id]\n          if !production_proc\n            raise(CLTK::Parser::Exceptions::InternalParserException.new(\"No production #{action.id} found.\"))\n          end\n          args, positions = stack.pop(pop_size)\n          opts[:env].set_positions(positions)\n          if !production_proc.selections.empty?\n            args = production_proc.selections.map do |selection|\n              args[selection].as(CLTK::Parser::StackType)\n            end\n          end\n          result = {action.id, args.as(Array(CLTK::Parser::StackType)), positions}\n          if (          goto = (states[stack.state].on?(lh_sides[action.id])).first)\n            pos0 = nil\n            if args.empty?\n              pos0 = stack.position\n              pos0.stream_offset = pos0.stream_offset + (pos0.length + 1)\n              pos0.line_offset = pos0.line_offset + (pos0.length + 1)\n              pos0.length = 0\n            else\n              pos0 = (opts[:env].pos(0)).as(CLTK::StreamPosition)\n              pos1 = (opts[:env].pos(-1)).as(CLTK::StreamPosition)\n              pos0.length = (pos1.stream_offset + pos1.length) - pos0.stream_offset\n            end\n            stack.push(goto.id, result.as(CLTK::Parser::StackType), lh_sides[action.id], pos0)\n          else\n            raise(CLTK::Parser::Exceptions::InternalParserException.new(\"No GoTo action found in state #{stack.state} \" + \"after reducing by production #{action.id}\"))\n          end\n          processing << stack\n          if error_mode && (!reduction_guard)\n            error_mode = false\n          end\n        else\n          if action.is_a?(CLTK::Parser::Actions::Shift)\n            stack.push(action.id, token.value, token.type, token.position)\n            moving_on << stack\n            error_mode = false\n          end\n        end\n      end\n    end\n  end\n  if accepted.size > 0\n    break\n  end\n  processing = moving_on\n  moving_on = [] of CLTK::Parser::ParseStack\n  if (opts[:accept] == (:first)) && accepted.size > 0\n    break\n  end\n  if (opts[:accept] == (:first)) && (processing.size == 0)\n    raise(CLTK::Parser::Exceptions::NotInLanguage.new(tokens[0...index], tokens[index], tokens[(index + 1)..-1]))\n  end\n  reduction_guard = false\nend\nif opts[:parse_tree]?\n  accepted.each do |stack|\n    (opts[:parse_tree].as(IO)).puts(stack.tree)\n  end\nend\nresults = accepted.map do |stack|\n  (stack.resolve(opts[:env], procs)).as(CLTK::Type)\nend\nresults = (if opts[:accept] == (:all)\n  results\nelse\n  results.first\nend).as(CLTK::Type)\nif (opts[:env]).he\n  raise(CLTK::Parser::Exceptions::HandledError.new((opts[:env].as(Environment)).errors, results))\nend\nreturn results\n"}}],"constructors":[{"id":"new(lh_sides:Hash(Int32,String),symbols:Array(String),states:Array(State))-class-method","html_id":"new(lh_sides:Hash(Int32,String),symbols:Array(String),states:Array(State))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"lh_sides","doc":null,"default_value":"","external_name":"lh_sides","restriction":"Hash(Int32, String)"},{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":"Array(String)"},{"name":"states","doc":null,"default_value":"","external_name":"states","restriction":"Array(State)"}],"args_string":"(lh_sides : Hash(Int32, String), symbols : Array(String), states : Array(State))","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L23","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L23","def":{"name":"new","args":[{"name":"lh_sides","doc":null,"default_value":"","external_name":"lh_sides","restriction":"Hash(Int32, String)"},{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":"Array(String)"},{"name":"states","doc":null,"default_value":"","external_name":"states","restriction":"Array(State)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(lh_sides, symbols, states)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(__temp_51:MessagePack::Unpacker)-class-method","html_id":"new(__temp_51:MessagePack::Unpacker)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"__temp_51","doc":null,"default_value":"","external_name":"__temp_51","restriction":"MessagePack::Unpacker"}],"args_string":"(__temp_51 : MessagePack::Unpacker)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L18","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L18","def":{"name":"new","args":[{"name":"__temp_51","doc":null,"default_value":"","external_name":"__temp_51","restriction":"MessagePack::Unpacker"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(__temp_51)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"lh_sides:Hash(Int32,String)-instance-method","html_id":"lh_sides:Hash(Int32,String)-instance-method","name":"lh_sides","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Hash(Int32, String)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L18","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L18","def":{"name":"lh_sides","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@lh_sides"}},{"id":"lh_sides=(_lh_sides:Hash(Int32,String))-instance-method","html_id":"lh_sides=(_lh_sides:Hash(Int32,String))-instance-method","name":"lh_sides=","doc":null,"summary":null,"abstract":false,"args":[{"name":"_lh_sides","doc":null,"default_value":"","external_name":"_lh_sides","restriction":"Hash(Int32, String)"}],"args_string":"(_lh_sides : Hash(Int32, String))","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L18","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L18","def":{"name":"lh_sides=","args":[{"name":"_lh_sides","doc":null,"default_value":"","external_name":"_lh_sides","restriction":"Hash(Int32, String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@lh_sides = _lh_sides"}},{"id":"parse(tokens:Array,opts:NamedTuple?=nil)-instance-method","html_id":"parse(tokens:Array,opts:NamedTuple?=nil)-instance-method","name":"parse","doc":null,"summary":null,"abstract":false,"args":[{"name":"tokens","doc":null,"default_value":"","external_name":"tokens","restriction":"Array"},{"name":"opts","doc":null,"default_value":"nil","external_name":"opts","restriction":"NamedTuple | ::Nil"}],"args_string":"(tokens : Array, opts : NamedTuple? = <span class=\"n\">nil</span>)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L16","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L16","def":{"name":"parse","args":[{"name":"tokens","doc":null,"default_value":"","external_name":"tokens","restriction":"Array"},{"name":"opts","doc":null,"default_value":"nil","external_name":"opts","restriction":"NamedTuple | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"token_hooks = Hash(String, Array(Proc(Environment, Nil))).new\nself.class._parse(@prod_procs, @lh_sides, @symbols, @states, token_hooks, tokens, opts)\n"}},{"id":"states:Array(CLTK::Parser::State)-instance-method","html_id":"states:Array(CLTK::Parser::State)-instance-method","name":"states","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(CLTK::Parser::State)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L18","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L18","def":{"name":"states","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@states"}},{"id":"states=(_states:Array(State))-instance-method","html_id":"states=(_states:Array(State))-instance-method","name":"states=","doc":null,"summary":null,"abstract":false,"args":[{"name":"_states","doc":null,"default_value":"","external_name":"_states","restriction":"Array(State)"}],"args_string":"(_states : Array(State))","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L18","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L18","def":{"name":"states=","args":[{"name":"_states","doc":null,"default_value":"","external_name":"_states","restriction":"Array(State)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@states = _states"}},{"id":"symbols:Array(String)-instance-method","html_id":"symbols:Array(String)-instance-method","name":"symbols","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(String)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L18","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L18","def":{"name":"symbols","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@symbols"}},{"id":"symbols=(_symbols:Array(String))-instance-method","html_id":"symbols=(_symbols:Array(String))-instance-method","name":"symbols=","doc":null,"summary":null,"abstract":false,"args":[{"name":"_symbols","doc":null,"default_value":"","external_name":"_symbols","restriction":"Array(String)"}],"args_string":"(_symbols : Array(String))","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L18","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L18","def":{"name":"symbols=","args":[{"name":"_symbols","doc":null,"default_value":"","external_name":"_symbols","restriction":"Array(String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@symbols = _symbols"}},{"id":"to_msgpack(packer:MessagePack::Packer)-instance-method","html_id":"to_msgpack(packer:MessagePack::Packer)-instance-method","name":"to_msgpack","doc":null,"summary":null,"abstract":false,"args":[{"name":"packer","doc":null,"default_value":"","external_name":"packer","restriction":"MessagePack::Packer"}],"args_string":"(packer : MessagePack::Packer)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L18","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L18","def":{"name":"to_msgpack","args":[{"name":"packer","doc":null,"default_value":"","external_name":"packer","restriction":"MessagePack::Packer"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ready_fields = 0\n_lh_sides = @lh_sides\nready_fields = ready_fields + 1\n_symbols = @symbols\nready_fields = ready_fields + 1\n_states = @states\nready_fields = ready_fields + 1\npacker.write_hash_start(ready_fields)\nif _lh_sides.nil?\n  packer.write(\"lh_sides\")\n  nil.to_msgpack(packer)\nelse\n  packer.write(\"lh_sides\")\n  _lh_sides.to_msgpack(packer)\nend\nif _symbols.nil?\n  packer.write(\"symbols\")\n  nil.to_msgpack(packer)\nelse\n  packer.write(\"symbols\")\n  _symbols.to_msgpack(packer)\nend\nif _states.nil?\n  packer.write(\"states\")\n  nil.to_msgpack(packer)\nelse\n  packer.write(\"states\")\n  _states.to_msgpack(packer)\nend\n"}}],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/State","path":"CLTK/Parser/State.html","kind":"class","full_name":"CLTK::Parser::State","name":"State","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/parser/state.cr","line_number":5,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr"},{"filename":"cltk/parser/msgpack.cr","line_number":32,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser","kind":"class","full_name":"CLTK::Parser","name":"Parser"},"doc":"The State class is used to represent sets of items and actions to be\nused during parsing.","summary":"<p>The State class is used to represent sets of items and actions to be used during parsing.</p>","class_methods":[],"constructors":[{"id":"new(id:Int32,actions:Hash(String,Array(CLTK::Parser::Action)),items:Array(CFG::Item))-class-method","html_id":"new(id:Int32,actions:Hash(String,Array(CLTK::Parser::Action)),items:Array(CFG::Item))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Int32"},{"name":"actions","doc":null,"default_value":"","external_name":"actions","restriction":"Hash(String, Array(CLTK::Parser::Action))"},{"name":"items","doc":null,"default_value":"","external_name":"items","restriction":"Array(CFG::Item)"}],"args_string":"(id : Int32, actions : Hash(String, Array(CLTK::Parser::Action)), items : Array(CFG::Item))","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr#L18","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr#L18","def":{"name":"new","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Int32"},{"name":"actions","doc":null,"default_value":"","external_name":"actions","restriction":"Hash(String, Array(CLTK::Parser::Action))"},{"name":"items","doc":null,"default_value":"","external_name":"items","restriction":"Array(CFG::Item)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(id, actions, items)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(tokens:Array(String),items=[]ofCFG::Item)-class-method","html_id":"new(tokens:Array(String),items=[]ofCFG::Item)-class-method","name":"new","doc":"Instantiate a new State object.\n\n@param [Array<Symbol>]     tokens  Tokens that represent this state\n@param [Array<CFG::Item>]  items   Items that make up this state","summary":"<p>Instantiate a new State object.</p>","abstract":false,"args":[{"name":"tokens","doc":null,"default_value":"","external_name":"tokens","restriction":"Array(String)"},{"name":"items","doc":null,"default_value":"[] of CFG::Item","external_name":"items","restriction":""}],"args_string":"(tokens : Array(String), items = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">CFG</span><span class=\"t\">::</span><span class=\"t\">Item</span>)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr#L23","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr#L23","def":{"name":"new","args":[{"name":"tokens","doc":null,"default_value":"","external_name":"tokens","restriction":"Array(String)"},{"name":"items","doc":null,"default_value":"[] of CFG::Item","external_name":"items","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(tokens, items)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(__temp_59:MessagePack::Unpacker)-class-method","html_id":"new(__temp_59:MessagePack::Unpacker)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"__temp_59","doc":null,"default_value":"","external_name":"__temp_59","restriction":"MessagePack::Unpacker"}],"args_string":"(__temp_59 : MessagePack::Unpacker)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L33","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L33","def":{"name":"new","args":[{"name":"__temp_59","doc":null,"default_value":"","external_name":"__temp_59","restriction":"MessagePack::Unpacker"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(__temp_59)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"<<(item)-instance-method","html_id":"&lt;&lt;(item)-instance-method","name":"<<","doc":null,"summary":null,"abstract":false,"args":[{"name":"item","doc":null,"default_value":"","external_name":"item","restriction":""}],"args_string":"(item)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr#L68","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr#L68","def":{"name":"<<","args":[{"name":"item","doc":null,"default_value":"","external_name":"item","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"append(item)"}},{"id":"==(other)-instance-method","html_id":"==(other)-instance-method","name":"==","doc":"Compare one State to another.  Two States are equal if they\nhave the same items or, if the items have been cleaned, if\nthe States have the same ID.\n\n@param [State]  other  Another State to compare to\n\n@return [Boolean]","summary":"<p>Compare one State to another.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr#L40","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr#L40","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(self.items == other.items) || (self.id == other.id)"}},{"id":"actions:Hash(String,Array(CLTK::Parser::Action))-instance-method","html_id":"actions:Hash(String,Array(CLTK::Parser::Action))-instance-method","name":"actions","doc":"@return [Hash{Symbol => Array<Action>}]  Maps lookahead symbols to actions","summary":"<p>@return [Hash{Symbol => Array&lt;Action>}]  Maps lookahead symbols to actions</p>","abstract":false,"args":[],"args_string":" : Hash(String, Array(CLTK::Parser::Action))","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L33","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L33","def":{"name":"actions","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@actions"}},{"id":"actions=(_actions:Hash(String,Array(CLTK::Parser::Action)))-instance-method","html_id":"actions=(_actions:Hash(String,Array(CLTK::Parser::Action)))-instance-method","name":"actions=","doc":null,"summary":null,"abstract":false,"args":[{"name":"_actions","doc":null,"default_value":"","external_name":"_actions","restriction":"Hash(String, Array(CLTK::Parser::Action))"}],"args_string":"(_actions : Hash(String, Array(CLTK::Parser::Action)))","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L33","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L33","def":{"name":"actions=","args":[{"name":"_actions","doc":null,"default_value":"","external_name":"_actions","restriction":"Hash(String, Array(CLTK::Parser::Action))"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@actions = _actions"}},{"id":"add_reduction(production)-instance-method","html_id":"add_reduction(production)-instance-method","name":"add_reduction","doc":"Add a Reduce action to the state.\n\n@param [Production]  production  Production used to perform the reduction\n\n@return [void]","summary":"<p>Add a Reduce action to the state.</p>","abstract":false,"args":[{"name":"production","doc":null,"default_value":"","external_name":"production","restriction":""}],"args_string":"(production)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr#L50","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr#L50","def":{"name":"add_reduction","args":[{"name":"production","doc":null,"default_value":"","external_name":"production","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"action = Actions::Reduce.new(production)\n@actions.each do |k, v|\n  if (CFG.is_terminal?(k)) && (k.to_s != \"ERROR\")\n    v << action\n  end\nend\n"}},{"id":"append(item)-instance-method","html_id":"append(item)-instance-method","name":"append","doc":"@param [CFG::Item] item Item to add to this state.","summary":"<p>@param [CFG::Item] item Item to add to this state.</p>","abstract":false,"args":[{"name":"item","doc":null,"default_value":"","external_name":"item","restriction":""}],"args_string":"(item)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr#L62","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr#L62","def":{"name":"append","args":[{"name":"item","doc":null,"default_value":"","external_name":"item","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if item.is_a?(CFG::Item) && (!(@items.includes?(item)))\n  @items << item\nend"}},{"id":"clean-instance-method","html_id":"clean-instance-method","name":"clean","doc":"Clean this State by removing the list of {CFG::Item} objects.\n\n@return [void]","summary":"<p>Clean this State by removing the list of {CFG::Item} objects.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr#L74","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr#L74","def":{"name":"clean","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@items = [] of CFG::Item"}},{"id":"close(productions)-instance-method","html_id":"close(productions)-instance-method","name":"close","doc":"Close this state using *productions*.\n\n@param [Array<CFG::Production>] productions Productions used to close this state.\n\n@return [vod]","summary":"<p>Close this state using <em>productions</em>.</p>","abstract":false,"args":[{"name":"productions","doc":null,"default_value":"","external_name":"productions","restriction":""}],"args_string":"(productions)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr#L83","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr#L83","def":{"name":"close","args":[{"name":"productions","doc":null,"default_value":"","external_name":"productions","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.each do |item|\n  next_symbol = item.next_symbol\n  if next_symbol && (CFG.is_nonterminal?(next_symbol))\n    productions[next_symbol].each do |p|\n      self << p.to_item\n    end\n  end\nend"}},{"id":"conflict_on?(sym)-instance-method","html_id":"conflict_on?(sym)-instance-method","name":"conflict_on?","doc":"Checks to see if there is a conflict in this state, given a\ninput of *sym*.  Returns :SR if a shift/reduce conflict is\ndetected and :RR if a reduce/reduce conflict is detected.  If\nno conflict is detected nil is returned.\n\n@param [Symbol] sym Symbol to check for conflicts on.\n\n@return [:SR, :RR, nil]","summary":"<p>Checks to see if there is a conflict in this state, given a input of <em>sym</em>.</p>","abstract":false,"args":[{"name":"sym","doc":null,"default_value":"","external_name":"sym","restriction":""}],"args_string":"(sym)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr#L100","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr#L100","def":{"name":"conflict_on?","args":[{"name":"sym","doc":null,"default_value":"","external_name":"sym","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"actions = @actions[sym]?\nif actions\nelse\n  return nil\nend\nreductions = 0\nshifts = 0\nactions.each do |action|\n  if action.is_a?(Actions::Reduce)\n    reductions = reductions + 1\n  else\n    if action.is_a?(Actions::Shift)\n      shifts = shifts + 1\n    end\n  end\nend\nif (shifts == 1) && reductions > 0\n  :SR\nelse\n  if reductions > 1\n    :RR\n  else\n    nil\n  end\nend\n"}},{"id":"each(&block)-instance-method","html_id":"each(&amp;block)-instance-method","name":"each","doc":"Iterate over the state's items.\n\n@return [void]","summary":"<p>Iterate over the state's items.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr#L130","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr#L130","def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"current_item = 0\nwhile current_item < @items.size\n  yield @items.at(current_item)\n  current_item = current_item + 1\nend\n"}},{"id":"id:Int32-instance-method","html_id":"id:Int32-instance-method","name":"id","doc":"@return [Integer] State's ID.","summary":"<p>@return [Integer] State's ID.</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L33","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L33","def":{"name":"id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id"}},{"id":"id=(id)-instance-method","html_id":"id=(id)-instance-method","name":"id=","doc":"@return [Integer] State's ID.","summary":"<p>@return [Integer] State's ID.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""}],"args_string":"(id)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr#L7","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr#L7","def":{"name":"id=","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id = id"}},{"id":"id=(_id:Int32)-instance-method","html_id":"id=(_id:Int32)-instance-method","name":"id=","doc":null,"summary":null,"abstract":false,"args":[{"name":"_id","doc":null,"default_value":"","external_name":"_id","restriction":"Int32"}],"args_string":"(_id : Int32)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L33","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L33","def":{"name":"id=","args":[{"name":"_id","doc":null,"default_value":"","external_name":"_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id = _id"}},{"id":"items:Array(CLTK::CFG::Item)-instance-method","html_id":"items:Array(CLTK::CFG::Item)-instance-method","name":"items","doc":"@return  [Array<CFG::Item>]  Item objects that comprise this state","summary":"<p>@return  [Array&lt;CFG::Item>]  Item objects that comprise this state</p>","abstract":false,"args":[],"args_string":" : Array(CLTK::CFG::Item)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L33","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L33","def":{"name":"items","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@items"}},{"id":"items=(_items:Array(CFG::Item))-instance-method","html_id":"items=(_items:Array(CFG::Item))-instance-method","name":"items=","doc":null,"summary":null,"abstract":false,"args":[{"name":"_items","doc":null,"default_value":"","external_name":"_items","restriction":"Array(CFG::Item)"}],"args_string":"(_items : Array(CFG::Item))","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L33","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L33","def":{"name":"items=","args":[{"name":"_items","doc":null,"default_value":"","external_name":"_items","restriction":"Array(CFG::Item)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@items = _items"}},{"id":"on(symbol,action:Action)-instance-method","html_id":"on(symbol,action:Action)-instance-method","name":"on","doc":"Specify an Action to perform when the input token is *symbol*.\n\n@param [Symbol] symbol Symbol to add action for.\n@param [Action] action Action for symbol.\n\n@return [void]","summary":"<p>Specify an Action to perform when the input token is <em>symbol</em>.</p>","abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action"}],"args_string":"(symbol, action : Action)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr#L144","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr#L144","def":{"name":"on","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @actions.has_key?(symbol.to_s)\n  @actions[symbol.to_s] = @actions[symbol.to_s] << action\nelse\n  raise(Exception.new(\"Attempting to set action for token (#{symbol}) not seen in grammar definition.\"))\nend"}},{"id":"on?(symbol)-instance-method","html_id":"on?(symbol)-instance-method","name":"on?","doc":"Returns that actions that should be taken when the input token\nis *symbol*.\n\n@param [Symbol] symbol Symbol we want the actions for.\n\n@return [Array<Action>] Actions that should be taken.","summary":"<p>Returns that actions that should be taken when the input token is <em>symbol</em>.</p>","abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""}],"args_string":"(symbol)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr#L158","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/state.cr#L158","def":{"name":"on?","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"actions = @actions[symbol]?\nif actions\n  actions.map do |a|\n    a.dup\n  end\nelse\n  [] of Action\nend\n"}},{"id":"to_msgpack(packer:MessagePack::Packer)-instance-method","html_id":"to_msgpack(packer:MessagePack::Packer)-instance-method","name":"to_msgpack","doc":null,"summary":null,"abstract":false,"args":[{"name":"packer","doc":null,"default_value":"","external_name":"packer","restriction":"MessagePack::Packer"}],"args_string":"(packer : MessagePack::Packer)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L33","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/msgpack.cr#L33","def":{"name":"to_msgpack","args":[{"name":"packer","doc":null,"default_value":"","external_name":"packer","restriction":"MessagePack::Packer"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ready_fields = 0\n_id = @id\nready_fields = ready_fields + 1\n_actions = @actions\nready_fields = ready_fields + 1\n_items = @items\nready_fields = ready_fields + 1\npacker.write_hash_start(ready_fields)\nif _id.nil?\n  packer.write(\"id\")\n  nil.to_msgpack(packer)\nelse\n  packer.write(\"id\")\n  _id.to_msgpack(packer)\nend\nif _actions.nil?\n  packer.write(\"actions\")\n  nil.to_msgpack(packer)\nelse\n  packer.write(\"actions\")\n  _actions.to_msgpack(packer)\nend\nif _items.nil?\n  packer.write(\"items\")\n  nil.to_msgpack(packer)\nelse\n  packer.write(\"items\")\n  _items.to_msgpack(packer)\nend\n"}}],"macros":[],"types":[]}]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parsers","path":"CLTK/Parsers.html","kind":"module","full_name":"CLTK::Parsers","name":"Parsers","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cltk/parsers/infix_calc.cr","line_number":17,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr"},{"filename":"cltk/parsers/postfix_calc.cr","line_number":15,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr"},{"filename":"cltk/parsers/prefix_calc.cr","line_number":15,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK","kind":"module","full_name":"CLTK","name":"CLTK"},"doc":"The CLTK::Parsers module contains the parsers that are included as part\nof the CLTK project.","summary":"<p>The CLTK::Parsers module contains the parsers that are included as part of the CLTK project.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parsers/InfixCalc","path":"CLTK/Parsers/InfixCalc.html","kind":"class","full_name":"CLTK::Parsers::InfixCalc","name":"InfixCalc","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser","kind":"class","full_name":"CLTK::Parser","name":"Parser"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser","kind":"class","full_name":"CLTK::Parser","name":"Parser"},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Explain","kind":"module","full_name":"CLTK::Parser::Explain","name":"Explain"},{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/parsers/infix_calc.cr","line_number":20,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"CLAUSES","name":"CLAUSES","value":"[{lhs: :e, expression: \"NUM\", precedence: nil, arg_type: :splat, cb: 0}, {lhs: :e, expression: \"LPAREN e RPAREN\", precedence: nil, arg_type: :splat, cb: 1}, {lhs: :e, expression: \"e PLS e\", precedence: nil, arg_type: :splat, cb: 2}, {lhs: :e, expression: \"e SUB e\", precedence: nil, arg_type: :splat, cb: 3}, {lhs: :e, expression: \"e MUL e\", precedence: nil, arg_type: :splat, cb: 4}, {lhs: :e, expression: \"e DIV e\", precedence: nil, arg_type: :splat, cb: 5}] of CLAUSE | LIST_PROD","doc":"A parser for a simple infix calculator.","summary":"<p>A parser for a simple infix calculator.</p>"},{"id":"DEFAULT_ARG_TYPE","name":"DEFAULT_ARG_TYPE","value":"[:splat]","doc":"A parser for a simple infix calculator.","summary":"<p>A parser for a simple infix calculator.</p>"},{"id":"PREC_COUNT","name":"PREC_COUNT","value":"{:left => 1, :right => 1, :non => 0}","doc":"A parser for a simple infix calculator.","summary":"<p>A parser for a simple infix calculator.</p>"},{"id":"PROCS","name":"PROCS","value":"[] of ProdProc","doc":"A parser for a simple infix calculator.","summary":"<p>A parser for a simple infix calculator.</p>"},{"id":"TOKEN_PRECS","name":"TOKEN_PRECS","value":"{\"PLS\" => {\"left\", 1}, \"SUB\" => {\"left\", 1}, \"MUL\" => {\"right\", 1}, \"DIV\" => {\"right\", 1}} of String => Tuple(String, Int32)","doc":"A parser for a simple infix calculator.","summary":"<p>A parser for a simple infix calculator.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parsers","kind":"module","full_name":"CLTK::Parsers","name":"Parsers"},"doc":"A parser for a simple infix calculator.","summary":"<p>A parser for a simple infix calculator.</p>","class_methods":[{"id":"build_list_production_(symbol,list_elements,separator,empty)-class-method","html_id":"build_list_production_(symbol,list_elements,separator,empty)-class-method","name":"build_list_production_","doc":"Adds productions and actions for parsing (non)?empty lists.\n\n@see CFG#(non)?empty_list_production","summary":"<p>Adds productions and actions for parsing (non)?empty lists.</p>","abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"","external_name":"separator","restriction":""},{"name":"empty","doc":null,"default_value":"","external_name":"empty","restriction":""}],"args_string":"(symbol, list_elements, separator, empty)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr#L20","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr#L20","def":{"name":"build_list_production_","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"","external_name":"separator","restriction":""},{"name":"empty","doc":null,"default_value":"","external_name":"empty","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"list_elements = list_elements.is_a?(Array) ? list_elements.map do |e|\n  e.to_s\nend : list_elements.to_s\nif empty\n  @@grammar.build_list_production(symbol.to_s, list_elements, separator.to_s)\nelse\n  @@grammar.build_nonempty_list_production(symbol.to_s, list_elements, separator.to_s)\nend\n"}},{"id":"build_up_productions-class-method","html_id":"build_up_productions-class-method","name":"build_up_productions","doc":"A parser for a simple infix calculator.","summary":"<p>A parser for a simple infix calculator.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr#L20","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr#L20","def":{"name":"build_up_productions","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"CLAUSES.each do |clause|\n  if clause.is_a?(CLAUSE)\n    @@grammar.curr_lhs = clause[:lhs].to_s\n    production, selections = (@@grammar.not_nil!.clause(clause[:expression])).values\n    @@procs[production.id] = {PROCS[clause[:cb]], production.rhs.size}\n    @@production_precs_prepare[production.id] = (clause[:precedence] || production.last_terminal).to_s\n  else\n    build_list_production_(clause[:lhs], clause[:elements], clause[:separator], clause[:empty])\n  end\nend"}},{"id":"finalize(explain=false,lookahead=true,precedence=true,use=nil)-class-method","html_id":"finalize(explain=false,lookahead=true,precedence=true,use=nil)-class-method","name":"finalize","doc":"This method will finalize the parser causing the construction\nof states and their actions, and the resolution of conflicts\nusing lookahead and precedence information.\n\nNo calls to {Parser.production} may appear after the call to\nParser.finalize.\n\n@param [Hash] opts Options describing how to finalize the parser.\n\n@option opts [Boolean,String,IO]  :explain     To explain the parser or not.\n@option opts [Boolean]            :lookahead   To use lookahead info for conflict resolution.\n@option opts [Boolean]            :precedence  To use precedence info for conflict resolution.\n@option opts [String,IO]          :use         A file name or object that is used to load/save the parser.\n\n@return [void]","summary":"<p>This method will finalize the parser causing the construction of states and their actions, and the resolution of conflicts using lookahead and precedence information.</p>","abstract":false,"args":[{"name":"explain","doc":null,"default_value":"false","external_name":"explain","restriction":""},{"name":"lookahead","doc":null,"default_value":"true","external_name":"lookahead","restriction":""},{"name":"precedence","doc":null,"default_value":"true","external_name":"precedence","restriction":""},{"name":"use","doc":null,"default_value":"nil","external_name":"use","restriction":""}],"args_string":"(explain = <span class=\"n\">false</span>, lookahead = <span class=\"n\">true</span>, precedence = <span class=\"n\">true</span>, use = <span class=\"n\">nil</span>)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr#L20","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr#L20","def":{"name":"finalize","args":[{"name":"explain","doc":null,"default_value":"false","external_name":"explain","restriction":""},{"name":"lookahead","doc":null,"default_value":"true","external_name":"lookahead","restriction":""},{"name":"precedence","doc":null,"default_value":"true","external_name":"precedence","restriction":""},{"name":"use","doc":null,"default_value":"nil","external_name":"use","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"opts = {:explain => explain, :lookahead => lookahead, :precedence => precedence, :use => use}\nbuild_up_productions\nif ENV[\"NOCACHE\"]?\nelse\n  if (  path = opts[:use]).is_a?(String)\n    if (File.exists?(path)) && (File.readable?(path))\n      finalize_from_serialized_parser(path)\n      return\n    end\n  end\nend\nif (@@grammar.productions_sym.as(Hash(String, Array(CLTK::CFG::Production)))).empty?\n  raise(Exception.new(\"Parser has no productions.  Cowardly refusing to construct an empty parser.\"))\nend\n@@symbols = @@grammar.symbols.to_a + [\"ERROR\"]\n@@start_symbol = (@@grammar.start_symbol.to_s + \"'\")\nstart_production = (@@grammar.production(@@start_symbol, @@grammar.start_symbol))[:production]\nstart_state = State.new(@@symbols, [start_production.to_item])\nstart_state.close(@@grammar.productions_sym)\nself.add_state(start_state)\n@@production_precs = @@production_precs_prepare.map do |id, prec|\n  TOKEN_PRECS[prec]?\nend\neach_state do |state|\n  tstates = Hash(String, State).new do |h, k|\n    h[k] = State.new(@@symbols)\n  end\n  state.each do |item|\n    if (    next_symbol = item.next_symbol)\n      if tstates[next_symbol]?\n      else\n        tstates[next_symbol] = State.new(@@symbols)\n      end\n      tstates[next_symbol] << item.copy\n    end\n  end\n  tstates.each do |symbol, tstate|\n    tstate.each do |item|\n      item.advance\n    end\n    tstate.close(@@grammar.productions_sym)\n    id = self.add_state(tstate)\n    state.on(symbol, CLTK::CFG.is_nonterminal?(symbol) ? Actions::GoTo.new(id) : Actions::Shift.new(id))\n  end\n  state.each do |item|\n    if item.at_end?\n      if item.lhs == @@start_symbol\n        state.on(\"EOS\", Actions::Accept.new)\n      else\n        state.add_reduction(@@grammar.productions_id[item.id])\n      end\n    end\n  end\nend\n@@grammar.productions_id.each do |id, production|\n  @@lh_sides[id] = production.lhs\nend\nself.prune(opts[:lookahead]?, opts[:precedence]?)\ncheck_sanity\nexp = opts[:explain]?\nif exp.is_a?(IO)\n  self.explain(exp)\nend\nclean\nif (path = opts[:use]).is_a?(String)\n  serialize_to_file(path)\nend\n"}},{"id":"finalize_from_serialized_parser(path)-class-method","html_id":"finalize_from_serialized_parser(path)-class-method","name":"finalize_from_serialized_parser","doc":"A parser for a simple infix calculator.","summary":"<p>A parser for a simple infix calculator.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr#L20","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr#L20","def":{"name":"finalize_from_serialized_parser","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"file = File.open(path, \"r\")\nunpacker = MessagePack::Unpacker.new(file)\nparsed_parser = CLTK::Parser::StandaloneParser.new(unpacker)\nfile.close\n@@lh_sides = parsed_parser.lh_sides\n@@symbols = parsed_parser.symbols\n@@states = parsed_parser.states\n"}},{"id":"prune(do_lookahead,do_precedence)-class-method","html_id":"prune(do_lookahead,do_precedence)-class-method","name":"prune","doc":"This method uses lookahead sets and precedence information to\nresolve conflicts and remove unnecessary reduce actions.\n\n@param [Boolean]  do_lookahead   Prune based on lookahead sets or not.\n@param [Boolean]  do_precedence  Prune based on precedence or not.\n\n@return [void]","summary":"<p>This method uses lookahead sets and precedence information to resolve conflicts and remove unnecessary reduce actions.</p>","abstract":false,"args":[{"name":"do_lookahead","doc":null,"default_value":"","external_name":"do_lookahead","restriction":""},{"name":"do_precedence","doc":null,"default_value":"","external_name":"do_precedence","restriction":""}],"args_string":"(do_lookahead, do_precedence)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr#L20","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr#L20","def":{"name":"prune","args":[{"name":"do_lookahead","doc":null,"default_value":"","external_name":"do_lookahead","restriction":""},{"name":"do_precedence","doc":null,"default_value":"","external_name":"do_precedence","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"terms = @@grammar.terms\nif !(do_lookahead || do_precedence)\n  return\nend\neach_state do |state0|\n  if do_lookahead\n    reductions = state0.actions.values.flatten.uniq.select do |a|\n      a.is_a?(Actions::Reduce)\n    end\n    reductions.each do |reduction|\n      raction_id = (reduction.as(Action)).id\n      production = (@@grammar.productions_id.as(Hash(Int32, CLTK::CFG::Production)))[raction_id]\n      lookahead = Array(String).new\n      each_state do |state1|\n        if check_reachability(state1, state0, production.rhs)\n          lookahead = lookahead | (self.grammar_prime.follow_set(\"#{state1.id}_#{production.lhs}\".to_s))\n        end\n      end\n      lookahead = lookahead.map do |sym|\n        (sym.to_s.split('_', 2)).last\n      end.uniq\n      pruning_candidates = terms.to_a - lookahead\n      if terms.includes?(\"ERROR\")\n        pruning_candidates.each do |sym|\n          if state0.conflict_on?(sym)\n            state0.actions[sym].delete(reduction)\n          end\n        end\n      else\n        pruning_candidates.each do |sym|\n          state0.actions[sym].delete(reduction)\n        end\n      end\n    end\n  end\n  if do_precedence\n    state0.actions.each do |symbol, actions|\n      if CLTK::CFG.is_terminal?(symbol)\n      else\n        next\n      end\n      if actions && actions.size > 1\n      else\n        next\n      end\n      resolve_ok = (actions.reduce(true) do |m, a|\n        if a.is_a?(Actions::Reduce)\n          @@production_precs[a.id] && m\n        else\n          m\n        end\n      end) && (actions.reduce(false) do |m, a|\n        m || a.is_a?(Actions::Shift)\n      end)\n      if TOKEN_PRECS[symbol]? && resolve_ok\n        max_prec = 0\n        selected_action = actions.first\n        tassoc, tprec = TOKEN_PRECS[symbol]\n        actions.each do |a|\n          assoc, prec = (a.is_a?(Actions::Shift) ? {tassoc, tprec} : @@production_precs[a.id]).as(::Tuple(String, Int32))\n          if prec > max_prec || ((prec == max_prec) && (tassoc == (a.is_a?(Actions::Shift) ? :right : :left)))\n            max_prec = prec\n            selected_action = a\n          else\n            if (prec == max_prec) && (assoc == (:nonassoc))\n              raise(Exception.new(\"Non-associative token found during conflict resolution.\"))\n            end\n          end\n        end\n        state0.actions[symbol] = [selected_action]\n      end\n    end\n  end\nend\n"}},{"id":"serialize_to_file(path)-class-method","html_id":"serialize_to_file(path)-class-method","name":"serialize_to_file","doc":"A parser for a simple infix calculator.","summary":"<p>A parser for a simple infix calculator.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr#L20","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr#L20","def":{"name":"serialize_to_file","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"file = File.open(path, \"w+\")\npacker = MessagePack::Packer.new(file)\nto_parser.to_msgpack(packer)\nfile.close\n"}},{"id":"to_parser-class-method","html_id":"to_parser-class-method","name":"to_parser","doc":"A parser for a simple infix calculator.","summary":"<p>A parser for a simple infix calculator.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr#L20","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr#L20","def":{"name":"to_parser","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"StandaloneParser.new(@@lh_sides, @@symbols, @@states)"}}],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Instantiates a new parser and creates an environment to be\nused for subsequent calls.","summary":"<p>Instantiates a new parser and creates an environment to be used for subsequent calls.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr#L20","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr#L20","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[{"id":"build_list_production(symbol,list_elements,separator=\"\")-macro","html_id":"build_list_production(symbol,list_elements,separator=&quot;&quot;)-macro","name":"build_list_production","doc":"Adds productions and actions for parsing empty lists.\n\n@see CFG#empty_list_production","summary":"<p>Adds productions and actions for parsing empty lists.</p>","abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"args_string":"(symbol, list_elements, separator = \"\")","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr#L20","def":{"name":"build_list_production","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% list_elements = list_elements.is_a?(ArrayLiteral) ? list_elements.map do |e|\n  e.id.stringify\nend : list_elements.id.stringify\nCLAUSES << {empty: true, lhs: symbol, elements: list_elements, separator: separator.id.stringify}\n %}\n\n      \n"}},{"id":"build_nonempty_list_production(symbol,list_elements,separator=\"\")-macro","html_id":"build_nonempty_list_production(symbol,list_elements,separator=&quot;&quot;)-macro","name":"build_nonempty_list_production","doc":"Adds productions and actions for parsing nonempty lists.\n\n@see CFG#nonempty_list_production","summary":"<p>Adds productions and actions for parsing nonempty lists.</p>","abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"args_string":"(symbol, list_elements, separator = \"\")","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr#L20","def":{"name":"build_nonempty_list_production","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% list_elements = list_elements.is_a?(ArrayLiteral) ? list_elements.map do |e|\n  e.id.stringify\nend : list_elements.id.stringify\nCLAUSES << {empty: false, lhs: symbol, elements: list_elements, separator: separator.id.stringify}\n %}\n\n      \n"}},{"id":"clause(expression,precedence=nil,arg_type=nil)-macro","html_id":"clause(expression,precedence=nil,arg_type=nil)-macro","name":"clause","doc":"Declares a new clause inside of a production.  The right-hand\nside is specified by *expression* and the precedence of this\nproduction can be changed by setting the *precedence* argument\nto some terminal symbol.\n\n@param [String, Symbol]  expression  Right-hand side of a production.\n@param [Symbol]          precedence  Symbol representing the precedence of this production.\n@param [:array, :splat]  arg_type    Method to use when passing arguments to the action.\n@param [Proc]            action      Action to be taken when the production is reduced.\n\n@return [void]","summary":"<p>Declares a new clause inside of a production.</p>","abstract":false,"args":[{"name":"expression","doc":null,"default_value":"","external_name":"expression","restriction":""},{"name":"precedence","doc":null,"default_value":"nil","external_name":"precedence","restriction":""},{"name":"arg_type","doc":null,"default_value":"nil","external_name":"arg_type","restriction":""}],"args_string":"(expression, precedence = nil, arg_type = nil)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr#L25","def":{"name":"clause","args":[{"name":"expression","doc":null,"default_value":"","external_name":"expression","restriction":""},{"name":"precedence","doc":null,"default_value":"nil","external_name":"precedence","restriction":""},{"name":"arg_type","doc":null,"default_value":"nil","external_name":"arg_type","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":""},"visibility":"Public","body":"          \n{% arg_type = arg_type ? arg_type : DEFAULT_ARG_TYPE.last\nnext_proc_id = (@type.constant(\"CLAUSES\")).select do |x|\n  x[:expression]\nend.size\nCLAUSES << {lhs: :e, expression: expression.id.stringify, precedence: precedence, arg_type: arg_type, cb: next_proc_id}\nexpression_symbol_selections = (expression.id.split(\" \")).map do |e|\n  e =~ (/^\\./) ? e : nil\nend\n %}\n\n          \n{% if action.is_a?(Block) %}\n             PROCS << ProdProc.new(\n               {{ arg_type }}, {{ expression_symbol_selections }}.map_with_index { |e, i| e ? i : nil }.compact\n             ) do |lhsymbols, env, arg_type|\n              env.as(Environment).yield_with_self do\n                {% if !action.args.empty? %}\n                  {% if action.args.size == 1 %}\n                    {% if arg_type == (:array) %}\n                      {{ action.args.first }} = lhsymbols.as(Array)\n                    {% else %}\n                      {{ action.args.splat }} = lhsymbols.as(Array(CLTK::Type))[0]\n                    {% end %}\n                  {% else %}\n                      {{ action.args.splat }} = lhsymbols.as(Array(CLTK::Type))[0...{{ action.args.size }}]\n                  {% end %}\n                  # reassign the first block argument to\n                  # the whole arguments array if arg_type\n                  # evaluates to :array\n                  {% if arg_type.is_a?(NilLiteral) %}\n                    {{ action.args.first }} = lhsymbols.as(Array) if arg_type == :array\n                  {% end %}\n                {% end %}\n                result = begin\n                  {{ action.body }}\n                end\n                result.is_a?(Array) ?\n                  result.map { |r| r.as(CLTK::Type)} :\n                  result.as(CLTK::Type)\n              end\n            end\n          {% else %}\n             PROCS << ProdProc.new\n          {% end %}\n\n        \n"}},{"id":"default_arg_type(type)-macro","html_id":"default_arg_type(type)-macro","name":"default_arg_type","doc":"Set the default argument type for the actions associated with\nclauses.  All actions defined after this call will be passed\narguments in the way specified here, unless overridden in the\ncall to {Parser.clause}.\n\n@param [:array, :splat] type The default argument type.\n\n@return [void]","summary":"<p>Set the default argument type for the actions associated with clauses.</p>","abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""}],"args_string":"(type)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr#L20","def":{"name":"default_arg_type","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% DEFAULT_ARG_TYPE << type %}\n\n      \n"}},{"id":"left(*symbols)-macro","html_id":"left(*symbols)-macro","name":"left","doc":"This method is used to specify that the symbols in *symbols*\nare left-associative.  Subsequent calls to this method will\ngive their arguments higher precedence.\n\n@param [Array<Symbol>]  symbols  Symbols that are left associative.\n\n@return [void]","summary":"<p>This method is used to specify that the symbols in <em>symbols</em> are left-associative.</p>","abstract":false,"args":[{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"args_string":"(*symbols)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr#L20","def":{"name":"left","args":[{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":null,"visibility":"Public","body":"        prec(:left, \n{{ symbols.splat }}\n)\n      \n"}},{"id":"list(symbol,list_elements,separator=\"\")-macro","html_id":"list(symbol,list_elements,separator=&quot;&quot;)-macro","name":"list","doc":null,"summary":null,"abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"args_string":"(symbol, list_elements, separator = \"\")","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr#L20","def":{"name":"list","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        build_list_production(\n{{ symbol }}\n, \n{{ list_elements }}\n, \n{{ separator }}\n)\n      \n"}},{"id":"nonassoc(*symbols)-macro","html_id":"nonassoc(*symbols)-macro","name":"nonassoc","doc":"This method is used to specify that the symbols in *symbols*\nare non-associative.\n\n@param [Array<Symbol>]  symbols  Symbols that are non-associative.\n\n@return [void]","summary":"<p>This method is used to specify that the symbols in <em>symbols</em> are non-associative.</p>","abstract":false,"args":[{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"args_string":"(*symbols)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr#L20","def":{"name":"nonassoc","args":[{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":null,"visibility":"Public","body":"        prec(:non, \n{{ symbols.splat }}\n)\n      \n"}},{"id":"nonempty_list(symbol,list_elements,separator=\"\")-macro","html_id":"nonempty_list(symbol,list_elements,separator=&quot;&quot;)-macro","name":"nonempty_list","doc":null,"summary":null,"abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"args_string":"(symbol, list_elements, separator = \"\")","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr#L20","def":{"name":"nonempty_list","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        build_nonempty_list_production(\n{{ symbol }}\n, \n{{ list_elements }}\n, \n{{ separator }}\n)\n      \n"}},{"id":"prec(direction,*symbols)-macro","html_id":"prec(direction,*symbols)-macro","name":"prec","doc":null,"summary":null,"abstract":false,"args":[{"name":"direction","doc":null,"default_value":"","external_name":"direction","restriction":""},{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"args_string":"(direction, *symbols)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr#L20","def":{"name":"prec","args":[{"name":"direction","doc":null,"default_value":"","external_name":"direction","restriction":""},{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% PREC_COUNT[direction] = PREC_COUNT[direction] + 1\nprec_level = PREC_COUNT[direction]\nsymbols.map do |sym|\n  TOKEN_PRECS[sym.id.stringify] = {direction.id.stringify, prec_level}\nend\n %}\n\n      \n"}},{"id":"production(lhs,expression=nil,precedence=nil,arg_type=nil)-macro","html_id":"production(lhs,expression=nil,precedence=nil,arg_type=nil)-macro","name":"production","doc":"Adds a new production to the parser with a left-hand value of\n*symbol*.  If *expression* is specified it is taken as the\nright-hand side of the production and *action* is associated\nwith the production.  If *expression* is nil then *action* is\nevaluated and expected to make one or more calls to\nParser.clause.  A precedence can be associate with this\nproduction by setting *precedence* to a terminal symbol.\n\n@param [Symbol]\t\t\tsymbol\t\tLeft-hand side of the production.\n@param [String, Symbol, nil]\texpression\tRight-hand side of the production.\n@param [Symbol, nil]\t\tprecedence\tSymbol representing the precedence of this produciton.\n@param [:array, :splat]\t\targ_type\t\tMethod to use when passing arguments to the action.\n@param [Proc]\t\t\taction\t\tAction associated with this production.\n\n@return [void]","summary":"<p>Adds a new production to the parser with a left-hand value of <em>symbol</em>.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"expression","doc":null,"default_value":"nil","external_name":"expression","restriction":""},{"name":"precedence","doc":null,"default_value":"nil","external_name":"precedence","restriction":""},{"name":"arg_type","doc":null,"default_value":"nil","external_name":"arg_type","restriction":""}],"args_string":"(lhs, expression = nil, precedence = nil, arg_type = nil)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr#L20","def":{"name":"production","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"expression","doc":null,"default_value":"nil","external_name":"expression","restriction":""},{"name":"precedence","doc":null,"default_value":"nil","external_name":"precedence","restriction":""},{"name":"arg_type","doc":null,"default_value":"nil","external_name":"arg_type","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n# Declares a new clause inside of a production.  The right-hand\n\n        \n# side is specified by *expression* and the precedence of this\n\n        \n# production can be changed by setting the *precedence* argument\n\n        \n# to some terminal symbol.\n\n        \n#\n\n        \n# @param [String, Symbol]  expression  Right-hand side of a production.\n\n        \n# @param [Symbol]          precedence  Symbol representing the precedence of this production.\n\n        \n# @param [:array, :splat]  arg_type    Method to use when passing arguments to the action.\n\n        \n# @param [Proc]            action      Action to be taken when the production is reduced.\n\n        \n#\n\n        \n# @return [void]\n\n        macro clause(\nexpression, precedence = \n{{ precedence }}\n, arg_type = \n{{ arg_type }}\n, &action)\n          \n\\{%\n             \narg_type = arg_type ? arg_type : DEFAULT_ARG_TYPE.last\n             \n# select the clauses that are not list production to get the next\n\n             \n# id for the PROCS array holding all the defined callbacks\n\n             next_proc_id = @type.constant(\"CLAUSES\").select\n{|x| x[:expression] }.size\n             CLAUSES << \n{\n              lhs: \n{{ lhs }}\n, \nexpression: \nexpression.id.stringify,\n              precedence: precedence, arg_type: arg_type,\n              cb: next_proc_id\n             }\n             \nexpression_symbol_selections = \nexpression.id.split(\" \").map \n{ |e| \ne=~ /^\\./ ? \ne : nil }\n          %}\n          \n\\{% if\n action.is_a?(Block) %}\n             PROCS << ProdProc.new(\n               \n\\{\n{arg_type}}, \n\\{\n{expression_symbol_selections}}.map_with_index \n{ |e, i| \ne ? i : nil }.compact\n             ) do |lhsymbols, \nenv, arg_type|\n              \nenv.as(Environment).yield_with_self do\n                \n\\{% if\n !action.args.empty?%}\n                  \n\\{% if\n action.args.size == 1 %}\n                    \n\\{% if\n arg_type == :array %}\n                      \n\\{\n{action.args.first}} = lhsymbols.as(Array)\n                    \n\\{% e\nlse %}\n                      \n\\{\n{action.args.splat}} = lhsymbols.as(Array(CLTK::Type))[0]\n                    \n\\{% end\n %}\n                  \n\\{% e\nlse %}\n                      \n\\{\n{action.args.splat}} = lhsymbols.as(Array(CLTK::Type))[0...\n\\{\n{action.args.size}}]\n                  \n\\{% end\n %}\n                  \n# reassign the first block argument to\n\n                  \n# the whole arguments array if arg_type\n\n                  \n# evaluates to :array\n\n                  \n\\{% if\n arg_type.is_a?(NilLiteral) %}\n                    \n\\{\n{action.args.first}} = lhsymbols.as(Array) if arg_type == :array\n                  \n\\{% end\n %}\n                \n\\{% end\n %}\n                result = begin\n                  \n\\{\n{action.body}}\n                \nend\n                result.is_a?(Array) ?\n                  result.map \n{ |r| r.as(CLTK::Type)} :\n                  result.as(CLTK::Type)\n              \nend\n            \nend\n          \n\\{% e\nlse %}\n             PROCS << ProdProc.new\n          \n\\{% end\n %}\n        \nend\n        \n{% if block.is_a?(Block) %}\n           {% if block.args.size > 0 %}\n            clause({{ expression }}, {{ precedence }}, {{ arg_type }}) do |{{ block.args.splat }}|\n              {{ block.body }}\n            end\n          {% else %}\n            {{ block.body }}\n          {% end %}\n        {% else %}\n          clause({{ expression }}, {{ precedence }}, {{ arg_type }})\n        {% end %}\n\n      \n"}},{"id":"right(*symbols)-macro","html_id":"right(*symbols)-macro","name":"right","doc":"This method is used to specify that the symbols in _symbols_\nare right associative.  Subsequent calls to this method will\ngive their arguments higher precedence.\n\n@param [Array<Symbol>] symbols Symbols that are right-associative.\n\n@return [void]","summary":"<p>This method is used to specify that the symbols in <em>symbols</em> are right associative.</p>","abstract":false,"args":[{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"args_string":"(*symbols)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/infix_calc.cr#L20","def":{"name":"right","args":[{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":null,"visibility":"Public","body":"        prec(:right, \n{{ symbols.splat }}\n)\n      \n"}}],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parsers/PostfixCalc","path":"CLTK/Parsers/PostfixCalc.html","kind":"class","full_name":"CLTK::Parsers::PostfixCalc","name":"PostfixCalc","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser","kind":"class","full_name":"CLTK::Parser","name":"Parser"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser","kind":"class","full_name":"CLTK::Parser","name":"Parser"},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Explain","kind":"module","full_name":"CLTK::Parser::Explain","name":"Explain"},{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/parsers/postfix_calc.cr","line_number":18,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"CLAUSES","name":"CLAUSES","value":"[{lhs: :e, expression: \"NUM\", precedence: nil, arg_type: :splat, cb: 0}, {lhs: :e, expression: \"e e PLS\", precedence: nil, arg_type: :splat, cb: 1}, {lhs: :e, expression: \"e e SUB\", precedence: nil, arg_type: :splat, cb: 2}, {lhs: :e, expression: \"e e MUL\", precedence: nil, arg_type: :splat, cb: 3}, {lhs: :e, expression: \"e e DIV\", precedence: nil, arg_type: :splat, cb: 4}] of CLAUSE | LIST_PROD","doc":"A parser for a simple post-fix calculator.","summary":"<p>A parser for a simple post-fix calculator.</p>"},{"id":"DEFAULT_ARG_TYPE","name":"DEFAULT_ARG_TYPE","value":"[:splat]","doc":"A parser for a simple post-fix calculator.","summary":"<p>A parser for a simple post-fix calculator.</p>"},{"id":"PREC_COUNT","name":"PREC_COUNT","value":"{:left => 0, :right => 0, :non => 0}","doc":"A parser for a simple post-fix calculator.","summary":"<p>A parser for a simple post-fix calculator.</p>"},{"id":"PROCS","name":"PROCS","value":"[] of ProdProc","doc":"A parser for a simple post-fix calculator.","summary":"<p>A parser for a simple post-fix calculator.</p>"},{"id":"TOKEN_PRECS","name":"TOKEN_PRECS","value":"{} of String => Tuple(String, Int32)","doc":"A parser for a simple post-fix calculator.","summary":"<p>A parser for a simple post-fix calculator.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parsers","kind":"module","full_name":"CLTK::Parsers","name":"Parsers"},"doc":"A parser for a simple post-fix calculator.","summary":"<p>A parser for a simple post-fix calculator.</p>","class_methods":[{"id":"build_list_production_(symbol,list_elements,separator,empty)-class-method","html_id":"build_list_production_(symbol,list_elements,separator,empty)-class-method","name":"build_list_production_","doc":"Adds productions and actions for parsing (non)?empty lists.\n\n@see CFG#(non)?empty_list_production","summary":"<p>Adds productions and actions for parsing (non)?empty lists.</p>","abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"","external_name":"separator","restriction":""},{"name":"empty","doc":null,"default_value":"","external_name":"empty","restriction":""}],"args_string":"(symbol, list_elements, separator, empty)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr#L18","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr#L18","def":{"name":"build_list_production_","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"","external_name":"separator","restriction":""},{"name":"empty","doc":null,"default_value":"","external_name":"empty","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"list_elements = list_elements.is_a?(Array) ? list_elements.map do |e|\n  e.to_s\nend : list_elements.to_s\nif empty\n  @@grammar.build_list_production(symbol.to_s, list_elements, separator.to_s)\nelse\n  @@grammar.build_nonempty_list_production(symbol.to_s, list_elements, separator.to_s)\nend\n"}},{"id":"build_up_productions-class-method","html_id":"build_up_productions-class-method","name":"build_up_productions","doc":"A parser for a simple post-fix calculator.","summary":"<p>A parser for a simple post-fix calculator.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr#L18","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr#L18","def":{"name":"build_up_productions","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"CLAUSES.each do |clause|\n  if clause.is_a?(CLAUSE)\n    @@grammar.curr_lhs = clause[:lhs].to_s\n    production, selections = (@@grammar.not_nil!.clause(clause[:expression])).values\n    @@procs[production.id] = {PROCS[clause[:cb]], production.rhs.size}\n    @@production_precs_prepare[production.id] = (clause[:precedence] || production.last_terminal).to_s\n  else\n    build_list_production_(clause[:lhs], clause[:elements], clause[:separator], clause[:empty])\n  end\nend"}},{"id":"finalize(explain=false,lookahead=true,precedence=true,use=nil)-class-method","html_id":"finalize(explain=false,lookahead=true,precedence=true,use=nil)-class-method","name":"finalize","doc":"This method will finalize the parser causing the construction\nof states and their actions, and the resolution of conflicts\nusing lookahead and precedence information.\n\nNo calls to {Parser.production} may appear after the call to\nParser.finalize.\n\n@param [Hash] opts Options describing how to finalize the parser.\n\n@option opts [Boolean,String,IO]  :explain     To explain the parser or not.\n@option opts [Boolean]            :lookahead   To use lookahead info for conflict resolution.\n@option opts [Boolean]            :precedence  To use precedence info for conflict resolution.\n@option opts [String,IO]          :use         A file name or object that is used to load/save the parser.\n\n@return [void]","summary":"<p>This method will finalize the parser causing the construction of states and their actions, and the resolution of conflicts using lookahead and precedence information.</p>","abstract":false,"args":[{"name":"explain","doc":null,"default_value":"false","external_name":"explain","restriction":""},{"name":"lookahead","doc":null,"default_value":"true","external_name":"lookahead","restriction":""},{"name":"precedence","doc":null,"default_value":"true","external_name":"precedence","restriction":""},{"name":"use","doc":null,"default_value":"nil","external_name":"use","restriction":""}],"args_string":"(explain = <span class=\"n\">false</span>, lookahead = <span class=\"n\">true</span>, precedence = <span class=\"n\">true</span>, use = <span class=\"n\">nil</span>)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr#L18","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr#L18","def":{"name":"finalize","args":[{"name":"explain","doc":null,"default_value":"false","external_name":"explain","restriction":""},{"name":"lookahead","doc":null,"default_value":"true","external_name":"lookahead","restriction":""},{"name":"precedence","doc":null,"default_value":"true","external_name":"precedence","restriction":""},{"name":"use","doc":null,"default_value":"nil","external_name":"use","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"opts = {:explain => explain, :lookahead => lookahead, :precedence => precedence, :use => use}\nbuild_up_productions\nif ENV[\"NOCACHE\"]?\nelse\n  if (  path = opts[:use]).is_a?(String)\n    if (File.exists?(path)) && (File.readable?(path))\n      finalize_from_serialized_parser(path)\n      return\n    end\n  end\nend\nif (@@grammar.productions_sym.as(Hash(String, Array(CLTK::CFG::Production)))).empty?\n  raise(Exception.new(\"Parser has no productions.  Cowardly refusing to construct an empty parser.\"))\nend\n@@symbols = @@grammar.symbols.to_a + [\"ERROR\"]\n@@start_symbol = (@@grammar.start_symbol.to_s + \"'\")\nstart_production = (@@grammar.production(@@start_symbol, @@grammar.start_symbol))[:production]\nstart_state = State.new(@@symbols, [start_production.to_item])\nstart_state.close(@@grammar.productions_sym)\nself.add_state(start_state)\n@@production_precs = @@production_precs_prepare.map do |id, prec|\n  TOKEN_PRECS[prec]?\nend\neach_state do |state|\n  tstates = Hash(String, State).new do |h, k|\n    h[k] = State.new(@@symbols)\n  end\n  state.each do |item|\n    if (    next_symbol = item.next_symbol)\n      if tstates[next_symbol]?\n      else\n        tstates[next_symbol] = State.new(@@symbols)\n      end\n      tstates[next_symbol] << item.copy\n    end\n  end\n  tstates.each do |symbol, tstate|\n    tstate.each do |item|\n      item.advance\n    end\n    tstate.close(@@grammar.productions_sym)\n    id = self.add_state(tstate)\n    state.on(symbol, CLTK::CFG.is_nonterminal?(symbol) ? Actions::GoTo.new(id) : Actions::Shift.new(id))\n  end\n  state.each do |item|\n    if item.at_end?\n      if item.lhs == @@start_symbol\n        state.on(\"EOS\", Actions::Accept.new)\n      else\n        state.add_reduction(@@grammar.productions_id[item.id])\n      end\n    end\n  end\nend\n@@grammar.productions_id.each do |id, production|\n  @@lh_sides[id] = production.lhs\nend\nself.prune(opts[:lookahead]?, opts[:precedence]?)\ncheck_sanity\nexp = opts[:explain]?\nif exp.is_a?(IO)\n  self.explain(exp)\nend\nclean\nif (path = opts[:use]).is_a?(String)\n  serialize_to_file(path)\nend\n"}},{"id":"finalize_from_serialized_parser(path)-class-method","html_id":"finalize_from_serialized_parser(path)-class-method","name":"finalize_from_serialized_parser","doc":"A parser for a simple post-fix calculator.","summary":"<p>A parser for a simple post-fix calculator.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr#L18","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr#L18","def":{"name":"finalize_from_serialized_parser","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"file = File.open(path, \"r\")\nunpacker = MessagePack::Unpacker.new(file)\nparsed_parser = CLTK::Parser::StandaloneParser.new(unpacker)\nfile.close\n@@lh_sides = parsed_parser.lh_sides\n@@symbols = parsed_parser.symbols\n@@states = parsed_parser.states\n"}},{"id":"prune(do_lookahead,do_precedence)-class-method","html_id":"prune(do_lookahead,do_precedence)-class-method","name":"prune","doc":"This method uses lookahead sets and precedence information to\nresolve conflicts and remove unnecessary reduce actions.\n\n@param [Boolean]  do_lookahead   Prune based on lookahead sets or not.\n@param [Boolean]  do_precedence  Prune based on precedence or not.\n\n@return [void]","summary":"<p>This method uses lookahead sets and precedence information to resolve conflicts and remove unnecessary reduce actions.</p>","abstract":false,"args":[{"name":"do_lookahead","doc":null,"default_value":"","external_name":"do_lookahead","restriction":""},{"name":"do_precedence","doc":null,"default_value":"","external_name":"do_precedence","restriction":""}],"args_string":"(do_lookahead, do_precedence)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr#L18","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr#L18","def":{"name":"prune","args":[{"name":"do_lookahead","doc":null,"default_value":"","external_name":"do_lookahead","restriction":""},{"name":"do_precedence","doc":null,"default_value":"","external_name":"do_precedence","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"terms = @@grammar.terms\nif !(do_lookahead || do_precedence)\n  return\nend\neach_state do |state0|\n  if do_lookahead\n    reductions = state0.actions.values.flatten.uniq.select do |a|\n      a.is_a?(Actions::Reduce)\n    end\n    reductions.each do |reduction|\n      raction_id = (reduction.as(Action)).id\n      production = (@@grammar.productions_id.as(Hash(Int32, CLTK::CFG::Production)))[raction_id]\n      lookahead = Array(String).new\n      each_state do |state1|\n        if check_reachability(state1, state0, production.rhs)\n          lookahead = lookahead | (self.grammar_prime.follow_set(\"#{state1.id}_#{production.lhs}\".to_s))\n        end\n      end\n      lookahead = lookahead.map do |sym|\n        (sym.to_s.split('_', 2)).last\n      end.uniq\n      pruning_candidates = terms.to_a - lookahead\n      if terms.includes?(\"ERROR\")\n        pruning_candidates.each do |sym|\n          if state0.conflict_on?(sym)\n            state0.actions[sym].delete(reduction)\n          end\n        end\n      else\n        pruning_candidates.each do |sym|\n          state0.actions[sym].delete(reduction)\n        end\n      end\n    end\n  end\n  if do_precedence\n    state0.actions.each do |symbol, actions|\n      if CLTK::CFG.is_terminal?(symbol)\n      else\n        next\n      end\n      if actions && actions.size > 1\n      else\n        next\n      end\n      resolve_ok = (actions.reduce(true) do |m, a|\n        if a.is_a?(Actions::Reduce)\n          @@production_precs[a.id] && m\n        else\n          m\n        end\n      end) && (actions.reduce(false) do |m, a|\n        m || a.is_a?(Actions::Shift)\n      end)\n      if TOKEN_PRECS[symbol]? && resolve_ok\n        max_prec = 0\n        selected_action = actions.first\n        tassoc, tprec = TOKEN_PRECS[symbol]\n        actions.each do |a|\n          assoc, prec = (a.is_a?(Actions::Shift) ? {tassoc, tprec} : @@production_precs[a.id]).as(::Tuple(String, Int32))\n          if prec > max_prec || ((prec == max_prec) && (tassoc == (a.is_a?(Actions::Shift) ? :right : :left)))\n            max_prec = prec\n            selected_action = a\n          else\n            if (prec == max_prec) && (assoc == (:nonassoc))\n              raise(Exception.new(\"Non-associative token found during conflict resolution.\"))\n            end\n          end\n        end\n        state0.actions[symbol] = [selected_action]\n      end\n    end\n  end\nend\n"}},{"id":"serialize_to_file(path)-class-method","html_id":"serialize_to_file(path)-class-method","name":"serialize_to_file","doc":"A parser for a simple post-fix calculator.","summary":"<p>A parser for a simple post-fix calculator.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr#L18","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr#L18","def":{"name":"serialize_to_file","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"file = File.open(path, \"w+\")\npacker = MessagePack::Packer.new(file)\nto_parser.to_msgpack(packer)\nfile.close\n"}},{"id":"to_parser-class-method","html_id":"to_parser-class-method","name":"to_parser","doc":"A parser for a simple post-fix calculator.","summary":"<p>A parser for a simple post-fix calculator.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr#L18","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr#L18","def":{"name":"to_parser","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"StandaloneParser.new(@@lh_sides, @@symbols, @@states)"}}],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Instantiates a new parser and creates an environment to be\nused for subsequent calls.","summary":"<p>Instantiates a new parser and creates an environment to be used for subsequent calls.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr#L18","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr#L18","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[{"id":"build_list_production(symbol,list_elements,separator=\"\")-macro","html_id":"build_list_production(symbol,list_elements,separator=&quot;&quot;)-macro","name":"build_list_production","doc":"Adds productions and actions for parsing empty lists.\n\n@see CFG#empty_list_production","summary":"<p>Adds productions and actions for parsing empty lists.</p>","abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"args_string":"(symbol, list_elements, separator = \"\")","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr#L18","def":{"name":"build_list_production","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% list_elements = list_elements.is_a?(ArrayLiteral) ? list_elements.map do |e|\n  e.id.stringify\nend : list_elements.id.stringify\nCLAUSES << {empty: true, lhs: symbol, elements: list_elements, separator: separator.id.stringify}\n %}\n\n      \n"}},{"id":"build_nonempty_list_production(symbol,list_elements,separator=\"\")-macro","html_id":"build_nonempty_list_production(symbol,list_elements,separator=&quot;&quot;)-macro","name":"build_nonempty_list_production","doc":"Adds productions and actions for parsing nonempty lists.\n\n@see CFG#nonempty_list_production","summary":"<p>Adds productions and actions for parsing nonempty lists.</p>","abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"args_string":"(symbol, list_elements, separator = \"\")","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr#L18","def":{"name":"build_nonempty_list_production","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% list_elements = list_elements.is_a?(ArrayLiteral) ? list_elements.map do |e|\n  e.id.stringify\nend : list_elements.id.stringify\nCLAUSES << {empty: false, lhs: symbol, elements: list_elements, separator: separator.id.stringify}\n %}\n\n      \n"}},{"id":"clause(expression,precedence=nil,arg_type=nil)-macro","html_id":"clause(expression,precedence=nil,arg_type=nil)-macro","name":"clause","doc":"Declares a new clause inside of a production.  The right-hand\nside is specified by *expression* and the precedence of this\nproduction can be changed by setting the *precedence* argument\nto some terminal symbol.\n\n@param [String, Symbol]  expression  Right-hand side of a production.\n@param [Symbol]          precedence  Symbol representing the precedence of this production.\n@param [:array, :splat]  arg_type    Method to use when passing arguments to the action.\n@param [Proc]            action      Action to be taken when the production is reduced.\n\n@return [void]","summary":"<p>Declares a new clause inside of a production.</p>","abstract":false,"args":[{"name":"expression","doc":null,"default_value":"","external_name":"expression","restriction":""},{"name":"precedence","doc":null,"default_value":"nil","external_name":"precedence","restriction":""},{"name":"arg_type","doc":null,"default_value":"nil","external_name":"arg_type","restriction":""}],"args_string":"(expression, precedence = nil, arg_type = nil)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr#L19","def":{"name":"clause","args":[{"name":"expression","doc":null,"default_value":"","external_name":"expression","restriction":""},{"name":"precedence","doc":null,"default_value":"nil","external_name":"precedence","restriction":""},{"name":"arg_type","doc":null,"default_value":"nil","external_name":"arg_type","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":""},"visibility":"Public","body":"          \n{% arg_type = arg_type ? arg_type : DEFAULT_ARG_TYPE.last\nnext_proc_id = (@type.constant(\"CLAUSES\")).select do |x|\n  x[:expression]\nend.size\nCLAUSES << {lhs: :e, expression: expression.id.stringify, precedence: precedence, arg_type: arg_type, cb: next_proc_id}\nexpression_symbol_selections = (expression.id.split(\" \")).map do |e|\n  e =~ (/^\\./) ? e : nil\nend\n %}\n\n          \n{% if action.is_a?(Block) %}\n             PROCS << ProdProc.new(\n               {{ arg_type }}, {{ expression_symbol_selections }}.map_with_index { |e, i| e ? i : nil }.compact\n             ) do |lhsymbols, env, arg_type|\n              env.as(Environment).yield_with_self do\n                {% if !action.args.empty? %}\n                  {% if action.args.size == 1 %}\n                    {% if arg_type == (:array) %}\n                      {{ action.args.first }} = lhsymbols.as(Array)\n                    {% else %}\n                      {{ action.args.splat }} = lhsymbols.as(Array(CLTK::Type))[0]\n                    {% end %}\n                  {% else %}\n                      {{ action.args.splat }} = lhsymbols.as(Array(CLTK::Type))[0...{{ action.args.size }}]\n                  {% end %}\n                  # reassign the first block argument to\n                  # the whole arguments array if arg_type\n                  # evaluates to :array\n                  {% if arg_type.is_a?(NilLiteral) %}\n                    {{ action.args.first }} = lhsymbols.as(Array) if arg_type == :array\n                  {% end %}\n                {% end %}\n                result = begin\n                  {{ action.body }}\n                end\n                result.is_a?(Array) ?\n                  result.map { |r| r.as(CLTK::Type)} :\n                  result.as(CLTK::Type)\n              end\n            end\n          {% else %}\n             PROCS << ProdProc.new\n          {% end %}\n\n        \n"}},{"id":"default_arg_type(type)-macro","html_id":"default_arg_type(type)-macro","name":"default_arg_type","doc":"Set the default argument type for the actions associated with\nclauses.  All actions defined after this call will be passed\narguments in the way specified here, unless overridden in the\ncall to {Parser.clause}.\n\n@param [:array, :splat] type The default argument type.\n\n@return [void]","summary":"<p>Set the default argument type for the actions associated with clauses.</p>","abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""}],"args_string":"(type)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr#L18","def":{"name":"default_arg_type","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% DEFAULT_ARG_TYPE << type %}\n\n      \n"}},{"id":"left(*symbols)-macro","html_id":"left(*symbols)-macro","name":"left","doc":"This method is used to specify that the symbols in *symbols*\nare left-associative.  Subsequent calls to this method will\ngive their arguments higher precedence.\n\n@param [Array<Symbol>]  symbols  Symbols that are left associative.\n\n@return [void]","summary":"<p>This method is used to specify that the symbols in <em>symbols</em> are left-associative.</p>","abstract":false,"args":[{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"args_string":"(*symbols)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr#L18","def":{"name":"left","args":[{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":null,"visibility":"Public","body":"        prec(:left, \n{{ symbols.splat }}\n)\n      \n"}},{"id":"list(symbol,list_elements,separator=\"\")-macro","html_id":"list(symbol,list_elements,separator=&quot;&quot;)-macro","name":"list","doc":null,"summary":null,"abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"args_string":"(symbol, list_elements, separator = \"\")","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr#L18","def":{"name":"list","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        build_list_production(\n{{ symbol }}\n, \n{{ list_elements }}\n, \n{{ separator }}\n)\n      \n"}},{"id":"nonassoc(*symbols)-macro","html_id":"nonassoc(*symbols)-macro","name":"nonassoc","doc":"This method is used to specify that the symbols in *symbols*\nare non-associative.\n\n@param [Array<Symbol>]  symbols  Symbols that are non-associative.\n\n@return [void]","summary":"<p>This method is used to specify that the symbols in <em>symbols</em> are non-associative.</p>","abstract":false,"args":[{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"args_string":"(*symbols)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr#L18","def":{"name":"nonassoc","args":[{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":null,"visibility":"Public","body":"        prec(:non, \n{{ symbols.splat }}\n)\n      \n"}},{"id":"nonempty_list(symbol,list_elements,separator=\"\")-macro","html_id":"nonempty_list(symbol,list_elements,separator=&quot;&quot;)-macro","name":"nonempty_list","doc":null,"summary":null,"abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"args_string":"(symbol, list_elements, separator = \"\")","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr#L18","def":{"name":"nonempty_list","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        build_nonempty_list_production(\n{{ symbol }}\n, \n{{ list_elements }}\n, \n{{ separator }}\n)\n      \n"}},{"id":"prec(direction,*symbols)-macro","html_id":"prec(direction,*symbols)-macro","name":"prec","doc":null,"summary":null,"abstract":false,"args":[{"name":"direction","doc":null,"default_value":"","external_name":"direction","restriction":""},{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"args_string":"(direction, *symbols)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr#L18","def":{"name":"prec","args":[{"name":"direction","doc":null,"default_value":"","external_name":"direction","restriction":""},{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% PREC_COUNT[direction] = PREC_COUNT[direction] + 1\nprec_level = PREC_COUNT[direction]\nsymbols.map do |sym|\n  TOKEN_PRECS[sym.id.stringify] = {direction.id.stringify, prec_level}\nend\n %}\n\n      \n"}},{"id":"production(lhs,expression=nil,precedence=nil,arg_type=nil)-macro","html_id":"production(lhs,expression=nil,precedence=nil,arg_type=nil)-macro","name":"production","doc":"Adds a new production to the parser with a left-hand value of\n*symbol*.  If *expression* is specified it is taken as the\nright-hand side of the production and *action* is associated\nwith the production.  If *expression* is nil then *action* is\nevaluated and expected to make one or more calls to\nParser.clause.  A precedence can be associate with this\nproduction by setting *precedence* to a terminal symbol.\n\n@param [Symbol]\t\t\tsymbol\t\tLeft-hand side of the production.\n@param [String, Symbol, nil]\texpression\tRight-hand side of the production.\n@param [Symbol, nil]\t\tprecedence\tSymbol representing the precedence of this produciton.\n@param [:array, :splat]\t\targ_type\t\tMethod to use when passing arguments to the action.\n@param [Proc]\t\t\taction\t\tAction associated with this production.\n\n@return [void]","summary":"<p>Adds a new production to the parser with a left-hand value of <em>symbol</em>.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"expression","doc":null,"default_value":"nil","external_name":"expression","restriction":""},{"name":"precedence","doc":null,"default_value":"nil","external_name":"precedence","restriction":""},{"name":"arg_type","doc":null,"default_value":"nil","external_name":"arg_type","restriction":""}],"args_string":"(lhs, expression = nil, precedence = nil, arg_type = nil)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr#L18","def":{"name":"production","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"expression","doc":null,"default_value":"nil","external_name":"expression","restriction":""},{"name":"precedence","doc":null,"default_value":"nil","external_name":"precedence","restriction":""},{"name":"arg_type","doc":null,"default_value":"nil","external_name":"arg_type","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n# Declares a new clause inside of a production.  The right-hand\n\n        \n# side is specified by *expression* and the precedence of this\n\n        \n# production can be changed by setting the *precedence* argument\n\n        \n# to some terminal symbol.\n\n        \n#\n\n        \n# @param [String, Symbol]  expression  Right-hand side of a production.\n\n        \n# @param [Symbol]          precedence  Symbol representing the precedence of this production.\n\n        \n# @param [:array, :splat]  arg_type    Method to use when passing arguments to the action.\n\n        \n# @param [Proc]            action      Action to be taken when the production is reduced.\n\n        \n#\n\n        \n# @return [void]\n\n        macro clause(\nexpression, precedence = \n{{ precedence }}\n, arg_type = \n{{ arg_type }}\n, &action)\n          \n\\{%\n             \narg_type = arg_type ? arg_type : DEFAULT_ARG_TYPE.last\n             \n# select the clauses that are not list production to get the next\n\n             \n# id for the PROCS array holding all the defined callbacks\n\n             next_proc_id = @type.constant(\"CLAUSES\").select\n{|x| x[:expression] }.size\n             CLAUSES << \n{\n              lhs: \n{{ lhs }}\n, \nexpression: \nexpression.id.stringify,\n              precedence: precedence, arg_type: arg_type,\n              cb: next_proc_id\n             }\n             \nexpression_symbol_selections = \nexpression.id.split(\" \").map \n{ |e| \ne=~ /^\\./ ? \ne : nil }\n          %}\n          \n\\{% if\n action.is_a?(Block) %}\n             PROCS << ProdProc.new(\n               \n\\{\n{arg_type}}, \n\\{\n{expression_symbol_selections}}.map_with_index \n{ |e, i| \ne ? i : nil }.compact\n             ) do |lhsymbols, \nenv, arg_type|\n              \nenv.as(Environment).yield_with_self do\n                \n\\{% if\n !action.args.empty?%}\n                  \n\\{% if\n action.args.size == 1 %}\n                    \n\\{% if\n arg_type == :array %}\n                      \n\\{\n{action.args.first}} = lhsymbols.as(Array)\n                    \n\\{% e\nlse %}\n                      \n\\{\n{action.args.splat}} = lhsymbols.as(Array(CLTK::Type))[0]\n                    \n\\{% end\n %}\n                  \n\\{% e\nlse %}\n                      \n\\{\n{action.args.splat}} = lhsymbols.as(Array(CLTK::Type))[0...\n\\{\n{action.args.size}}]\n                  \n\\{% end\n %}\n                  \n# reassign the first block argument to\n\n                  \n# the whole arguments array if arg_type\n\n                  \n# evaluates to :array\n\n                  \n\\{% if\n arg_type.is_a?(NilLiteral) %}\n                    \n\\{\n{action.args.first}} = lhsymbols.as(Array) if arg_type == :array\n                  \n\\{% end\n %}\n                \n\\{% end\n %}\n                result = begin\n                  \n\\{\n{action.body}}\n                \nend\n                result.is_a?(Array) ?\n                  result.map \n{ |r| r.as(CLTK::Type)} :\n                  result.as(CLTK::Type)\n              \nend\n            \nend\n          \n\\{% e\nlse %}\n             PROCS << ProdProc.new\n          \n\\{% end\n %}\n        \nend\n        \n{% if block.is_a?(Block) %}\n           {% if block.args.size > 0 %}\n            clause({{ expression }}, {{ precedence }}, {{ arg_type }}) do |{{ block.args.splat }}|\n              {{ block.body }}\n            end\n          {% else %}\n            {{ block.body }}\n          {% end %}\n        {% else %}\n          clause({{ expression }}, {{ precedence }}, {{ arg_type }})\n        {% end %}\n\n      \n"}},{"id":"right(*symbols)-macro","html_id":"right(*symbols)-macro","name":"right","doc":"This method is used to specify that the symbols in _symbols_\nare right associative.  Subsequent calls to this method will\ngive their arguments higher precedence.\n\n@param [Array<Symbol>] symbols Symbols that are right-associative.\n\n@return [void]","summary":"<p>This method is used to specify that the symbols in <em>symbols</em> are right associative.</p>","abstract":false,"args":[{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"args_string":"(*symbols)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/postfix_calc.cr#L18","def":{"name":"right","args":[{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":null,"visibility":"Public","body":"        prec(:right, \n{{ symbols.splat }}\n)\n      \n"}}],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parsers/PrefixCalc","path":"CLTK/Parsers/PrefixCalc.html","kind":"class","full_name":"CLTK::Parsers::PrefixCalc","name":"PrefixCalc","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser","kind":"class","full_name":"CLTK::Parser","name":"Parser"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser","kind":"class","full_name":"CLTK::Parser","name":"Parser"},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parser/Explain","kind":"module","full_name":"CLTK::Parser::Explain","name":"Explain"},{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/parsers/prefix_calc.cr","line_number":18,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"CLAUSES","name":"CLAUSES","value":"[{lhs: :e, expression: \"NUM\", precedence: nil, arg_type: :splat, cb: 0}, {lhs: :e, expression: \"PLS e e\", precedence: nil, arg_type: :splat, cb: 1}, {lhs: :e, expression: \"SUB e e\", precedence: nil, arg_type: :splat, cb: 2}, {lhs: :e, expression: \"MUL e e\", precedence: nil, arg_type: :splat, cb: 3}, {lhs: :e, expression: \"DIV e e\", precedence: nil, arg_type: :splat, cb: 4}] of CLAUSE | LIST_PROD","doc":"A parser for a simple prefix calculator.","summary":"<p>A parser for a simple prefix calculator.</p>"},{"id":"DEFAULT_ARG_TYPE","name":"DEFAULT_ARG_TYPE","value":"[:splat]","doc":"A parser for a simple prefix calculator.","summary":"<p>A parser for a simple prefix calculator.</p>"},{"id":"PREC_COUNT","name":"PREC_COUNT","value":"{:left => 0, :right => 0, :non => 0}","doc":"A parser for a simple prefix calculator.","summary":"<p>A parser for a simple prefix calculator.</p>"},{"id":"PROCS","name":"PROCS","value":"[] of ProdProc","doc":"A parser for a simple prefix calculator.","summary":"<p>A parser for a simple prefix calculator.</p>"},{"id":"TOKEN_PRECS","name":"TOKEN_PRECS","value":"{} of String => Tuple(String, Int32)","doc":"A parser for a simple prefix calculator.","summary":"<p>A parser for a simple prefix calculator.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Parsers","kind":"module","full_name":"CLTK::Parsers","name":"Parsers"},"doc":"A parser for a simple prefix calculator.","summary":"<p>A parser for a simple prefix calculator.</p>","class_methods":[{"id":"build_list_production_(symbol,list_elements,separator,empty)-class-method","html_id":"build_list_production_(symbol,list_elements,separator,empty)-class-method","name":"build_list_production_","doc":"Adds productions and actions for parsing (non)?empty lists.\n\n@see CFG#(non)?empty_list_production","summary":"<p>Adds productions and actions for parsing (non)?empty lists.</p>","abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"","external_name":"separator","restriction":""},{"name":"empty","doc":null,"default_value":"","external_name":"empty","restriction":""}],"args_string":"(symbol, list_elements, separator, empty)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr#L18","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr#L18","def":{"name":"build_list_production_","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"","external_name":"separator","restriction":""},{"name":"empty","doc":null,"default_value":"","external_name":"empty","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"list_elements = list_elements.is_a?(Array) ? list_elements.map do |e|\n  e.to_s\nend : list_elements.to_s\nif empty\n  @@grammar.build_list_production(symbol.to_s, list_elements, separator.to_s)\nelse\n  @@grammar.build_nonempty_list_production(symbol.to_s, list_elements, separator.to_s)\nend\n"}},{"id":"build_up_productions-class-method","html_id":"build_up_productions-class-method","name":"build_up_productions","doc":"A parser for a simple prefix calculator.","summary":"<p>A parser for a simple prefix calculator.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr#L18","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr#L18","def":{"name":"build_up_productions","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"CLAUSES.each do |clause|\n  if clause.is_a?(CLAUSE)\n    @@grammar.curr_lhs = clause[:lhs].to_s\n    production, selections = (@@grammar.not_nil!.clause(clause[:expression])).values\n    @@procs[production.id] = {PROCS[clause[:cb]], production.rhs.size}\n    @@production_precs_prepare[production.id] = (clause[:precedence] || production.last_terminal).to_s\n  else\n    build_list_production_(clause[:lhs], clause[:elements], clause[:separator], clause[:empty])\n  end\nend"}},{"id":"finalize(explain=false,lookahead=true,precedence=true,use=nil)-class-method","html_id":"finalize(explain=false,lookahead=true,precedence=true,use=nil)-class-method","name":"finalize","doc":"This method will finalize the parser causing the construction\nof states and their actions, and the resolution of conflicts\nusing lookahead and precedence information.\n\nNo calls to {Parser.production} may appear after the call to\nParser.finalize.\n\n@param [Hash] opts Options describing how to finalize the parser.\n\n@option opts [Boolean,String,IO]  :explain     To explain the parser or not.\n@option opts [Boolean]            :lookahead   To use lookahead info for conflict resolution.\n@option opts [Boolean]            :precedence  To use precedence info for conflict resolution.\n@option opts [String,IO]          :use         A file name or object that is used to load/save the parser.\n\n@return [void]","summary":"<p>This method will finalize the parser causing the construction of states and their actions, and the resolution of conflicts using lookahead and precedence information.</p>","abstract":false,"args":[{"name":"explain","doc":null,"default_value":"false","external_name":"explain","restriction":""},{"name":"lookahead","doc":null,"default_value":"true","external_name":"lookahead","restriction":""},{"name":"precedence","doc":null,"default_value":"true","external_name":"precedence","restriction":""},{"name":"use","doc":null,"default_value":"nil","external_name":"use","restriction":""}],"args_string":"(explain = <span class=\"n\">false</span>, lookahead = <span class=\"n\">true</span>, precedence = <span class=\"n\">true</span>, use = <span class=\"n\">nil</span>)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr#L18","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr#L18","def":{"name":"finalize","args":[{"name":"explain","doc":null,"default_value":"false","external_name":"explain","restriction":""},{"name":"lookahead","doc":null,"default_value":"true","external_name":"lookahead","restriction":""},{"name":"precedence","doc":null,"default_value":"true","external_name":"precedence","restriction":""},{"name":"use","doc":null,"default_value":"nil","external_name":"use","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"opts = {:explain => explain, :lookahead => lookahead, :precedence => precedence, :use => use}\nbuild_up_productions\nif ENV[\"NOCACHE\"]?\nelse\n  if (  path = opts[:use]).is_a?(String)\n    if (File.exists?(path)) && (File.readable?(path))\n      finalize_from_serialized_parser(path)\n      return\n    end\n  end\nend\nif (@@grammar.productions_sym.as(Hash(String, Array(CLTK::CFG::Production)))).empty?\n  raise(Exception.new(\"Parser has no productions.  Cowardly refusing to construct an empty parser.\"))\nend\n@@symbols = @@grammar.symbols.to_a + [\"ERROR\"]\n@@start_symbol = (@@grammar.start_symbol.to_s + \"'\")\nstart_production = (@@grammar.production(@@start_symbol, @@grammar.start_symbol))[:production]\nstart_state = State.new(@@symbols, [start_production.to_item])\nstart_state.close(@@grammar.productions_sym)\nself.add_state(start_state)\n@@production_precs = @@production_precs_prepare.map do |id, prec|\n  TOKEN_PRECS[prec]?\nend\neach_state do |state|\n  tstates = Hash(String, State).new do |h, k|\n    h[k] = State.new(@@symbols)\n  end\n  state.each do |item|\n    if (    next_symbol = item.next_symbol)\n      if tstates[next_symbol]?\n      else\n        tstates[next_symbol] = State.new(@@symbols)\n      end\n      tstates[next_symbol] << item.copy\n    end\n  end\n  tstates.each do |symbol, tstate|\n    tstate.each do |item|\n      item.advance\n    end\n    tstate.close(@@grammar.productions_sym)\n    id = self.add_state(tstate)\n    state.on(symbol, CLTK::CFG.is_nonterminal?(symbol) ? Actions::GoTo.new(id) : Actions::Shift.new(id))\n  end\n  state.each do |item|\n    if item.at_end?\n      if item.lhs == @@start_symbol\n        state.on(\"EOS\", Actions::Accept.new)\n      else\n        state.add_reduction(@@grammar.productions_id[item.id])\n      end\n    end\n  end\nend\n@@grammar.productions_id.each do |id, production|\n  @@lh_sides[id] = production.lhs\nend\nself.prune(opts[:lookahead]?, opts[:precedence]?)\ncheck_sanity\nexp = opts[:explain]?\nif exp.is_a?(IO)\n  self.explain(exp)\nend\nclean\nif (path = opts[:use]).is_a?(String)\n  serialize_to_file(path)\nend\n"}},{"id":"finalize_from_serialized_parser(path)-class-method","html_id":"finalize_from_serialized_parser(path)-class-method","name":"finalize_from_serialized_parser","doc":"A parser for a simple prefix calculator.","summary":"<p>A parser for a simple prefix calculator.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr#L18","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr#L18","def":{"name":"finalize_from_serialized_parser","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"file = File.open(path, \"r\")\nunpacker = MessagePack::Unpacker.new(file)\nparsed_parser = CLTK::Parser::StandaloneParser.new(unpacker)\nfile.close\n@@lh_sides = parsed_parser.lh_sides\n@@symbols = parsed_parser.symbols\n@@states = parsed_parser.states\n"}},{"id":"prune(do_lookahead,do_precedence)-class-method","html_id":"prune(do_lookahead,do_precedence)-class-method","name":"prune","doc":"This method uses lookahead sets and precedence information to\nresolve conflicts and remove unnecessary reduce actions.\n\n@param [Boolean]  do_lookahead   Prune based on lookahead sets or not.\n@param [Boolean]  do_precedence  Prune based on precedence or not.\n\n@return [void]","summary":"<p>This method uses lookahead sets and precedence information to resolve conflicts and remove unnecessary reduce actions.</p>","abstract":false,"args":[{"name":"do_lookahead","doc":null,"default_value":"","external_name":"do_lookahead","restriction":""},{"name":"do_precedence","doc":null,"default_value":"","external_name":"do_precedence","restriction":""}],"args_string":"(do_lookahead, do_precedence)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr#L18","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr#L18","def":{"name":"prune","args":[{"name":"do_lookahead","doc":null,"default_value":"","external_name":"do_lookahead","restriction":""},{"name":"do_precedence","doc":null,"default_value":"","external_name":"do_precedence","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"terms = @@grammar.terms\nif !(do_lookahead || do_precedence)\n  return\nend\neach_state do |state0|\n  if do_lookahead\n    reductions = state0.actions.values.flatten.uniq.select do |a|\n      a.is_a?(Actions::Reduce)\n    end\n    reductions.each do |reduction|\n      raction_id = (reduction.as(Action)).id\n      production = (@@grammar.productions_id.as(Hash(Int32, CLTK::CFG::Production)))[raction_id]\n      lookahead = Array(String).new\n      each_state do |state1|\n        if check_reachability(state1, state0, production.rhs)\n          lookahead = lookahead | (self.grammar_prime.follow_set(\"#{state1.id}_#{production.lhs}\".to_s))\n        end\n      end\n      lookahead = lookahead.map do |sym|\n        (sym.to_s.split('_', 2)).last\n      end.uniq\n      pruning_candidates = terms.to_a - lookahead\n      if terms.includes?(\"ERROR\")\n        pruning_candidates.each do |sym|\n          if state0.conflict_on?(sym)\n            state0.actions[sym].delete(reduction)\n          end\n        end\n      else\n        pruning_candidates.each do |sym|\n          state0.actions[sym].delete(reduction)\n        end\n      end\n    end\n  end\n  if do_precedence\n    state0.actions.each do |symbol, actions|\n      if CLTK::CFG.is_terminal?(symbol)\n      else\n        next\n      end\n      if actions && actions.size > 1\n      else\n        next\n      end\n      resolve_ok = (actions.reduce(true) do |m, a|\n        if a.is_a?(Actions::Reduce)\n          @@production_precs[a.id] && m\n        else\n          m\n        end\n      end) && (actions.reduce(false) do |m, a|\n        m || a.is_a?(Actions::Shift)\n      end)\n      if TOKEN_PRECS[symbol]? && resolve_ok\n        max_prec = 0\n        selected_action = actions.first\n        tassoc, tprec = TOKEN_PRECS[symbol]\n        actions.each do |a|\n          assoc, prec = (a.is_a?(Actions::Shift) ? {tassoc, tprec} : @@production_precs[a.id]).as(::Tuple(String, Int32))\n          if prec > max_prec || ((prec == max_prec) && (tassoc == (a.is_a?(Actions::Shift) ? :right : :left)))\n            max_prec = prec\n            selected_action = a\n          else\n            if (prec == max_prec) && (assoc == (:nonassoc))\n              raise(Exception.new(\"Non-associative token found during conflict resolution.\"))\n            end\n          end\n        end\n        state0.actions[symbol] = [selected_action]\n      end\n    end\n  end\nend\n"}},{"id":"serialize_to_file(path)-class-method","html_id":"serialize_to_file(path)-class-method","name":"serialize_to_file","doc":"A parser for a simple prefix calculator.","summary":"<p>A parser for a simple prefix calculator.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr#L18","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr#L18","def":{"name":"serialize_to_file","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"file = File.open(path, \"w+\")\npacker = MessagePack::Packer.new(file)\nto_parser.to_msgpack(packer)\nfile.close\n"}},{"id":"to_parser-class-method","html_id":"to_parser-class-method","name":"to_parser","doc":"A parser for a simple prefix calculator.","summary":"<p>A parser for a simple prefix calculator.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr#L18","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr#L18","def":{"name":"to_parser","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"StandaloneParser.new(@@lh_sides, @@symbols, @@states)"}}],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Instantiates a new parser and creates an environment to be\nused for subsequent calls.","summary":"<p>Instantiates a new parser and creates an environment to be used for subsequent calls.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr#L18","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr#L18","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[{"id":"build_list_production(symbol,list_elements,separator=\"\")-macro","html_id":"build_list_production(symbol,list_elements,separator=&quot;&quot;)-macro","name":"build_list_production","doc":"Adds productions and actions for parsing empty lists.\n\n@see CFG#empty_list_production","summary":"<p>Adds productions and actions for parsing empty lists.</p>","abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"args_string":"(symbol, list_elements, separator = \"\")","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr#L18","def":{"name":"build_list_production","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% list_elements = list_elements.is_a?(ArrayLiteral) ? list_elements.map do |e|\n  e.id.stringify\nend : list_elements.id.stringify\nCLAUSES << {empty: true, lhs: symbol, elements: list_elements, separator: separator.id.stringify}\n %}\n\n      \n"}},{"id":"build_nonempty_list_production(symbol,list_elements,separator=\"\")-macro","html_id":"build_nonempty_list_production(symbol,list_elements,separator=&quot;&quot;)-macro","name":"build_nonempty_list_production","doc":"Adds productions and actions for parsing nonempty lists.\n\n@see CFG#nonempty_list_production","summary":"<p>Adds productions and actions for parsing nonempty lists.</p>","abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"args_string":"(symbol, list_elements, separator = \"\")","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr#L18","def":{"name":"build_nonempty_list_production","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% list_elements = list_elements.is_a?(ArrayLiteral) ? list_elements.map do |e|\n  e.id.stringify\nend : list_elements.id.stringify\nCLAUSES << {empty: false, lhs: symbol, elements: list_elements, separator: separator.id.stringify}\n %}\n\n      \n"}},{"id":"clause(expression,precedence=nil,arg_type=nil)-macro","html_id":"clause(expression,precedence=nil,arg_type=nil)-macro","name":"clause","doc":"Declares a new clause inside of a production.  The right-hand\nside is specified by *expression* and the precedence of this\nproduction can be changed by setting the *precedence* argument\nto some terminal symbol.\n\n@param [String, Symbol]  expression  Right-hand side of a production.\n@param [Symbol]          precedence  Symbol representing the precedence of this production.\n@param [:array, :splat]  arg_type    Method to use when passing arguments to the action.\n@param [Proc]            action      Action to be taken when the production is reduced.\n\n@return [void]","summary":"<p>Declares a new clause inside of a production.</p>","abstract":false,"args":[{"name":"expression","doc":null,"default_value":"","external_name":"expression","restriction":""},{"name":"precedence","doc":null,"default_value":"nil","external_name":"precedence","restriction":""},{"name":"arg_type","doc":null,"default_value":"nil","external_name":"arg_type","restriction":""}],"args_string":"(expression, precedence = nil, arg_type = nil)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr#L19","def":{"name":"clause","args":[{"name":"expression","doc":null,"default_value":"","external_name":"expression","restriction":""},{"name":"precedence","doc":null,"default_value":"nil","external_name":"precedence","restriction":""},{"name":"arg_type","doc":null,"default_value":"nil","external_name":"arg_type","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":""},"visibility":"Public","body":"          \n{% arg_type = arg_type ? arg_type : DEFAULT_ARG_TYPE.last\nnext_proc_id = (@type.constant(\"CLAUSES\")).select do |x|\n  x[:expression]\nend.size\nCLAUSES << {lhs: :e, expression: expression.id.stringify, precedence: precedence, arg_type: arg_type, cb: next_proc_id}\nexpression_symbol_selections = (expression.id.split(\" \")).map do |e|\n  e =~ (/^\\./) ? e : nil\nend\n %}\n\n          \n{% if action.is_a?(Block) %}\n             PROCS << ProdProc.new(\n               {{ arg_type }}, {{ expression_symbol_selections }}.map_with_index { |e, i| e ? i : nil }.compact\n             ) do |lhsymbols, env, arg_type|\n              env.as(Environment).yield_with_self do\n                {% if !action.args.empty? %}\n                  {% if action.args.size == 1 %}\n                    {% if arg_type == (:array) %}\n                      {{ action.args.first }} = lhsymbols.as(Array)\n                    {% else %}\n                      {{ action.args.splat }} = lhsymbols.as(Array(CLTK::Type))[0]\n                    {% end %}\n                  {% else %}\n                      {{ action.args.splat }} = lhsymbols.as(Array(CLTK::Type))[0...{{ action.args.size }}]\n                  {% end %}\n                  # reassign the first block argument to\n                  # the whole arguments array if arg_type\n                  # evaluates to :array\n                  {% if arg_type.is_a?(NilLiteral) %}\n                    {{ action.args.first }} = lhsymbols.as(Array) if arg_type == :array\n                  {% end %}\n                {% end %}\n                result = begin\n                  {{ action.body }}\n                end\n                result.is_a?(Array) ?\n                  result.map { |r| r.as(CLTK::Type)} :\n                  result.as(CLTK::Type)\n              end\n            end\n          {% else %}\n             PROCS << ProdProc.new\n          {% end %}\n\n        \n"}},{"id":"default_arg_type(type)-macro","html_id":"default_arg_type(type)-macro","name":"default_arg_type","doc":"Set the default argument type for the actions associated with\nclauses.  All actions defined after this call will be passed\narguments in the way specified here, unless overridden in the\ncall to {Parser.clause}.\n\n@param [:array, :splat] type The default argument type.\n\n@return [void]","summary":"<p>Set the default argument type for the actions associated with clauses.</p>","abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""}],"args_string":"(type)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr#L18","def":{"name":"default_arg_type","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        \n{% DEFAULT_ARG_TYPE << type %}\n\n      \n"}},{"id":"left(*symbols)-macro","html_id":"left(*symbols)-macro","name":"left","doc":"This method is used to specify that the symbols in *symbols*\nare left-associative.  Subsequent calls to this method will\ngive their arguments higher precedence.\n\n@param [Array<Symbol>]  symbols  Symbols that are left associative.\n\n@return [void]","summary":"<p>This method is used to specify that the symbols in <em>symbols</em> are left-associative.</p>","abstract":false,"args":[{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"args_string":"(*symbols)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr#L18","def":{"name":"left","args":[{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":null,"visibility":"Public","body":"        prec(:left, \n{{ symbols.splat }}\n)\n      \n"}},{"id":"list(symbol,list_elements,separator=\"\")-macro","html_id":"list(symbol,list_elements,separator=&quot;&quot;)-macro","name":"list","doc":null,"summary":null,"abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"args_string":"(symbol, list_elements, separator = \"\")","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr#L18","def":{"name":"list","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        build_list_production(\n{{ symbol }}\n, \n{{ list_elements }}\n, \n{{ separator }}\n)\n      \n"}},{"id":"nonassoc(*symbols)-macro","html_id":"nonassoc(*symbols)-macro","name":"nonassoc","doc":"This method is used to specify that the symbols in *symbols*\nare non-associative.\n\n@param [Array<Symbol>]  symbols  Symbols that are non-associative.\n\n@return [void]","summary":"<p>This method is used to specify that the symbols in <em>symbols</em> are non-associative.</p>","abstract":false,"args":[{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"args_string":"(*symbols)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr#L18","def":{"name":"nonassoc","args":[{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":null,"visibility":"Public","body":"        prec(:non, \n{{ symbols.splat }}\n)\n      \n"}},{"id":"nonempty_list(symbol,list_elements,separator=\"\")-macro","html_id":"nonempty_list(symbol,list_elements,separator=&quot;&quot;)-macro","name":"nonempty_list","doc":null,"summary":null,"abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"args_string":"(symbol, list_elements, separator = \"\")","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr#L18","def":{"name":"nonempty_list","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"list_elements","doc":null,"default_value":"","external_name":"list_elements","restriction":""},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        build_nonempty_list_production(\n{{ symbol }}\n, \n{{ list_elements }}\n, \n{{ separator }}\n)\n      \n"}},{"id":"prec(direction,*symbols)-macro","html_id":"prec(direction,*symbols)-macro","name":"prec","doc":null,"summary":null,"abstract":false,"args":[{"name":"direction","doc":null,"default_value":"","external_name":"direction","restriction":""},{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"args_string":"(direction, *symbols)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr#L18","def":{"name":"prec","args":[{"name":"direction","doc":null,"default_value":"","external_name":"direction","restriction":""},{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"        \n{% PREC_COUNT[direction] = PREC_COUNT[direction] + 1\nprec_level = PREC_COUNT[direction]\nsymbols.map do |sym|\n  TOKEN_PRECS[sym.id.stringify] = {direction.id.stringify, prec_level}\nend\n %}\n\n      \n"}},{"id":"production(lhs,expression=nil,precedence=nil,arg_type=nil)-macro","html_id":"production(lhs,expression=nil,precedence=nil,arg_type=nil)-macro","name":"production","doc":"Adds a new production to the parser with a left-hand value of\n*symbol*.  If *expression* is specified it is taken as the\nright-hand side of the production and *action* is associated\nwith the production.  If *expression* is nil then *action* is\nevaluated and expected to make one or more calls to\nParser.clause.  A precedence can be associate with this\nproduction by setting *precedence* to a terminal symbol.\n\n@param [Symbol]\t\t\tsymbol\t\tLeft-hand side of the production.\n@param [String, Symbol, nil]\texpression\tRight-hand side of the production.\n@param [Symbol, nil]\t\tprecedence\tSymbol representing the precedence of this produciton.\n@param [:array, :splat]\t\targ_type\t\tMethod to use when passing arguments to the action.\n@param [Proc]\t\t\taction\t\tAction associated with this production.\n\n@return [void]","summary":"<p>Adds a new production to the parser with a left-hand value of <em>symbol</em>.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"expression","doc":null,"default_value":"nil","external_name":"expression","restriction":""},{"name":"precedence","doc":null,"default_value":"nil","external_name":"precedence","restriction":""},{"name":"arg_type","doc":null,"default_value":"nil","external_name":"arg_type","restriction":""}],"args_string":"(lhs, expression = nil, precedence = nil, arg_type = nil)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr#L18","def":{"name":"production","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"expression","doc":null,"default_value":"nil","external_name":"expression","restriction":""},{"name":"precedence","doc":null,"default_value":"nil","external_name":"precedence","restriction":""},{"name":"arg_type","doc":null,"default_value":"nil","external_name":"arg_type","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n# Declares a new clause inside of a production.  The right-hand\n\n        \n# side is specified by *expression* and the precedence of this\n\n        \n# production can be changed by setting the *precedence* argument\n\n        \n# to some terminal symbol.\n\n        \n#\n\n        \n# @param [String, Symbol]  expression  Right-hand side of a production.\n\n        \n# @param [Symbol]          precedence  Symbol representing the precedence of this production.\n\n        \n# @param [:array, :splat]  arg_type    Method to use when passing arguments to the action.\n\n        \n# @param [Proc]            action      Action to be taken when the production is reduced.\n\n        \n#\n\n        \n# @return [void]\n\n        macro clause(\nexpression, precedence = \n{{ precedence }}\n, arg_type = \n{{ arg_type }}\n, &action)\n          \n\\{%\n             \narg_type = arg_type ? arg_type : DEFAULT_ARG_TYPE.last\n             \n# select the clauses that are not list production to get the next\n\n             \n# id for the PROCS array holding all the defined callbacks\n\n             next_proc_id = @type.constant(\"CLAUSES\").select\n{|x| x[:expression] }.size\n             CLAUSES << \n{\n              lhs: \n{{ lhs }}\n, \nexpression: \nexpression.id.stringify,\n              precedence: precedence, arg_type: arg_type,\n              cb: next_proc_id\n             }\n             \nexpression_symbol_selections = \nexpression.id.split(\" \").map \n{ |e| \ne=~ /^\\./ ? \ne : nil }\n          %}\n          \n\\{% if\n action.is_a?(Block) %}\n             PROCS << ProdProc.new(\n               \n\\{\n{arg_type}}, \n\\{\n{expression_symbol_selections}}.map_with_index \n{ |e, i| \ne ? i : nil }.compact\n             ) do |lhsymbols, \nenv, arg_type|\n              \nenv.as(Environment).yield_with_self do\n                \n\\{% if\n !action.args.empty?%}\n                  \n\\{% if\n action.args.size == 1 %}\n                    \n\\{% if\n arg_type == :array %}\n                      \n\\{\n{action.args.first}} = lhsymbols.as(Array)\n                    \n\\{% e\nlse %}\n                      \n\\{\n{action.args.splat}} = lhsymbols.as(Array(CLTK::Type))[0]\n                    \n\\{% end\n %}\n                  \n\\{% e\nlse %}\n                      \n\\{\n{action.args.splat}} = lhsymbols.as(Array(CLTK::Type))[0...\n\\{\n{action.args.size}}]\n                  \n\\{% end\n %}\n                  \n# reassign the first block argument to\n\n                  \n# the whole arguments array if arg_type\n\n                  \n# evaluates to :array\n\n                  \n\\{% if\n arg_type.is_a?(NilLiteral) %}\n                    \n\\{\n{action.args.first}} = lhsymbols.as(Array) if arg_type == :array\n                  \n\\{% end\n %}\n                \n\\{% end\n %}\n                result = begin\n                  \n\\{\n{action.body}}\n                \nend\n                result.is_a?(Array) ?\n                  result.map \n{ |r| r.as(CLTK::Type)} :\n                  result.as(CLTK::Type)\n              \nend\n            \nend\n          \n\\{% e\nlse %}\n             PROCS << ProdProc.new\n          \n\\{% end\n %}\n        \nend\n        \n{% if block.is_a?(Block) %}\n           {% if block.args.size > 0 %}\n            clause({{ expression }}, {{ precedence }}, {{ arg_type }}) do |{{ block.args.splat }}|\n              {{ block.body }}\n            end\n          {% else %}\n            {{ block.body }}\n          {% end %}\n        {% else %}\n          clause({{ expression }}, {{ precedence }}, {{ arg_type }})\n        {% end %}\n\n      \n"}},{"id":"right(*symbols)-macro","html_id":"right(*symbols)-macro","name":"right","doc":"This method is used to specify that the symbols in _symbols_\nare right associative.  Subsequent calls to this method will\ngive their arguments higher precedence.\n\n@param [Array<Symbol>] symbols Symbols that are right-associative.\n\n@return [void]","summary":"<p>This method is used to specify that the symbols in <em>symbols</em> are right associative.</p>","abstract":false,"args":[{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"args_string":"(*symbols)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parsers/prefix_calc.cr#L18","def":{"name":"right","args":[{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":null,"visibility":"Public","body":"        prec(:right, \n{{ symbols.splat }}\n)\n      \n"}}],"types":[]}]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Scanner","path":"CLTK/Scanner.html","kind":"class","full_name":"CLTK::Scanner","name":"Scanner","abstract":true,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/scanner.cr","line_number":73,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr"},{"filename":"cltk/crystalize.cr","line_number":6,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/crystalize.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Lexers/Calculator","kind":"class","full_name":"CLTK::Lexers::Calculator","name":"Calculator"},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Lexers/EBNF","kind":"class","full_name":"CLTK::Lexers::EBNF","name":"EBNF"}],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK","kind":"module","full_name":"CLTK","name":"CLTK"},"doc":"\nA Lexer Class based on [crystal-dfa](https://github.com/ziprandom/crystal-dfa) the Crystal RegExp implementation\nof a Thompson NFA based DFA. Runs faster than (PCRE based) Regex implementations. Define a Lexer like:\n```\nclass CalcLexer < Scanner\n  # set a delimiter to strip the\n  # string before lexing for increased\n  # performance. defaults to \"\\n\" which\n  # is fine for this example.\n\n  # self.pre_delimiter=nil # no string splitting\n  # before lexing\n\n  # ignore space & newline\n  rule(/[\\n\\s]/)\n\n  # operators are keywords, so we use\n  # stringrules to have one single\n  # dfa matching\n  rule(\"+\")                { {:PLS} }\n  rule(\"-\")                { {:SUB} }\n  rule(\"*\")                { {:MUL} }\n  rule(\"/\")                { {:DIV} }\n\n  # ints and floats need to be matched with\n  # regular expressions (doesn't use Regex but\n  # DFA::RegExp)\n  rule(/\\d+\\.\\d+/)         { |s| {:FLOAT, s} }\n  rule(/\\d+/)              { |s| {:INT,   s} }\n\n  # upon sighting of a '#' (and optionally trailing ' ')\n  # we go into :comment state and don't leave until we\n  # find a '\\n'\n  rule(/#\\s*/)             {     push_state(:comment) }\n  rule(/[^\\n]+/, :comment) { |t| {:COMMENT, t}        }\n  rule(\"\\n\", :comment)     {     pop_state            }\n\n  # calculate the dfa's for the string-rules\n  # will be called upon first `lex` call if\n  # not invoked here\n  finalize\nend\n\nsource = <<-source\n#\n# a simple calculation\n#\n\n4 + 4  # the first addition\n- 3.14 # a substraction\n* 3\n\nsource\n\npp CalcLexer.lex(source).tokens   # => [{:COMMENT, \"a simple calculation\"},\n                                  #     {:INT, \"4\"},\n                                  #     {:PLS},\n                                  #     {:INT, \"4\"},\n                                  #     {:COMMENT,\n                                  #      \"the first addition\"},\n                                  #     {:SUB},\n                                  #     {:FLOAT,\n                                  #      \"3.14\"},\n                                  #     {:COMMENT,\n                                  #      \"a substraction\"},\n                                  #     {:MUL},\n                                  #     {:INT, \"3\"}]\n```\n","summary":"<p>A Lexer Class based on <a href=\"https://github.com/ziprandom/crystal-dfa\" target=\"_blank\">crystal-dfa</a> the Crystal RegExp implementation of a Thompson NFA based DFA.</p>","class_methods":[{"id":"finalize-class-method","html_id":"finalize-class-method","name":"finalize","doc":"finalize the Lexer by creating dfas for the provided\nstring rules for fast keyword matching","summary":"<p>finalize the Lexer by creating dfas for the provided string rules for fast keyword matching</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L189","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L189","def":{"name":"finalize","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@strings.each do |state, hash|\n  litdfa = (DFA::RegExp.new(hash.map do |k, _|\n    Regex.escape(k)\n  end.join(\"|\"))).dfa\n  __temp_27 = state\n  @@rx[__temp_27]? || (@@rx[__temp_27] = Array(::Tuple(DFA::DFA::DState, Int32 | ::Nil)).new)\n  @@rx[state] << ({litdfa, @@callbacks.size + 1})\n  cb = ProcType.new do |string, env|\n    hash[string].try(&.call(string, env))\n  end\n  @@callbacks.unshift(cb)\nend\n@@is_finalized = true\n"}},{"id":"lex(string:String):Environment-class-method","html_id":"lex(string:String):Environment-class-method","name":"lex","doc":"lexes a string by continously matching the dfas\nagainst the string, yielding the callbacks with\nan instance of Environment","summary":"<p>lexes a string by continously matching the dfas against the string, yielding the callbacks with an instance of Environment</p>","abstract":false,"args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"}],"args_string":"(string : String) : Environment","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L203","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L203","def":{"name":"lex","args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Environment","visibility":"Public","body":"if @@is_finalized\nelse\n  finalize\nend\nenv = Environment.new\n@@split_lines ? (string.lines(false)).each do |line|\n  lex_string(line, env)\nend : lex_string(string, env)\nenv\n"}},{"id":"serialize-class-method","html_id":"serialize-class-method","name":"serialize","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/crystalize.cr#L7","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/crystalize.cr#L7","def":{"name":"serialize","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @@is_finalized\nelse\n  finalize\nend\nScannerSerializer.serialize(@@rx, @@raw_callbacks)\n"}},{"id":"serialize_to_file(path:String,wrap_module:Bool=false,module_name:String=&quot;&quot;)-class-method","html_id":"serialize_to_file(path:String,wrap_module:Bool=false,module_name:String=&amp;quot;&amp;quot;)-class-method","name":"serialize_to_file","doc":"Serializes the scanner and writes to *path*","summary":"<p>Serializes the scanner and writes to <em>path</em></p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"wrap_module","doc":null,"default_value":"false","external_name":"wrap_module","restriction":"Bool"},{"name":"module_name","doc":null,"default_value":"\"\"","external_name":"module_name","restriction":"String"}],"args_string":"(path : String, wrap_module : Bool = <span class=\"n\">false</span>, module_name : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/crystalize.cr#L13","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/crystalize.cr#L13","def":{"name":"serialize_to_file","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"wrap_module","doc":null,"default_value":"false","external_name":"wrap_module","restriction":"Bool"},{"name":"module_name","doc":null,"default_value":"\"\"","external_name":"module_name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ScannerSerializer.write_to_file(serialize, path, wrap_module, module_name)"}},{"id":"serialize_to_io(io,wrap_module:Bool=false,module_name:String=&quot;&quot;)-class-method","html_id":"serialize_to_io(io,wrap_module:Bool=false,module_name:String=&amp;quot;&amp;quot;)-class-method","name":"serialize_to_io","doc":"Serializes the scanner and writes to *io*","summary":"<p>Serializes the scanner and writes to <em>io</em></p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""},{"name":"wrap_module","doc":null,"default_value":"false","external_name":"wrap_module","restriction":"Bool"},{"name":"module_name","doc":null,"default_value":"\"\"","external_name":"module_name","restriction":"String"}],"args_string":"(io, wrap_module : Bool = <span class=\"n\">false</span>, module_name : String = <span class=\"s\">&quot;&quot;</span>)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/crystalize.cr#L18","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/crystalize.cr#L18","def":{"name":"serialize_to_io","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""},{"name":"wrap_module","doc":null,"default_value":"false","external_name":"wrap_module","restriction":"Bool"},{"name":"module_name","doc":null,"default_value":"\"\"","external_name":"module_name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ScannerSerializer.write_to_io(serialize, io, wrap_module, moudle_name)"}},{"id":"split_lines:Bool-class-method","html_id":"split_lines:Bool-class-method","name":"split_lines","doc":"In order to speed up lexing, the string might be split\nin single lines and therefore fed to the dfas in smaller\nchunks. this is enabled by default, but can be disabled\nwith this class setter","summary":"<p>In order to speed up lexing, the string might be split in single lines and therefore fed to the dfas in smaller chunks.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L89","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L89","def":{"name":"split_lines","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@@split_lines"}},{"id":"split_lines=(split_lines:Bool)-class-method","html_id":"split_lines=(split_lines:Bool)-class-method","name":"split_lines=","doc":"In order to speed up lexing, the string might be split\nin single lines and therefore fed to the dfas in smaller\nchunks. this is enabled by default, but can be disabled\nwith this class setter","summary":"<p>In order to speed up lexing, the string might be split in single lines and therefore fed to the dfas in smaller chunks.</p>","abstract":false,"args":[{"name":"split_lines","doc":null,"default_value":"","external_name":"split_lines","restriction":"Bool"}],"args_string":"(split_lines : Bool)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L89","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L89","def":{"name":"split_lines=","args":[{"name":"split_lines","doc":null,"default_value":"","external_name":"split_lines","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@split_lines = split_lines"}}],"constructors":[],"instance_methods":[],"macros":[{"id":"rule(expression,state=:default)-macro","html_id":"rule(expression,state=:default)-macro","name":"rule","doc":"\nDefines a lexing rule. The expression can either\nbe a string or a `DFA::RegExp` compatible expression.\nState indicates a Lexer State in which this Rule should\nbe applied. String Expressions for the same state get\ncombined in one alternating (..|..|..) DFA for faster\nrecognition. String Expressions should be used for\nspecial keywords and symbols like: def, true or \":\"\n","summary":"<p>Defines a lexing rule.</p>","abstract":false,"args":[{"name":"expression","doc":null,"default_value":"","external_name":"expression","restriction":""},{"name":"state","doc":null,"default_value":":default","external_name":"state","restriction":""}],"args_string":"(expression, state = :default)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L179","def":{"name":"rule","args":[{"name":"expression","doc":null,"default_value":"","external_name":"expression","restriction":""},{"name":"state","doc":null,"default_value":":default","external_name":"state","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"      \n{% if expression.is_a?(RegexLiteral) %}\n        rex_rule({{ expression.source }}, {{ state }}) {{ block }}\n      {% else %}\n        string_rule({{ expression }}, {{ state }}) {{ block }}\n      {% end %}\n\n    \n"}}],"types":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Scanner/Environment","path":"CLTK/Scanner/Environment.html","kind":"class","full_name":"CLTK::Scanner::Environment","name":"Environment","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/scanner.cr","line_number":96,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Scanner","kind":"class","full_name":"CLTK::Scanner","name":"Scanner"},"doc":"\nUsed to keep track of the Lexing State. Used\nas context for token callback yields and\ngets returned by the lexer\n","summary":"<p>Used to keep track of the Lexing State.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"add_token(token:Token,size:Int32)-instance-method","html_id":"add_token(token:Token,size:Int32)-instance-method","name":"add_token","doc":"add a token at the current position\ndoesn't advance the @offset index","summary":"<p>add a token at the current position doesn't advance the @offset index</p>","abstract":false,"args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"Token"},{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Int32"}],"args_string":"(token : Token, size : Int32)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L127","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L127","def":{"name":"add_token","args":[{"name":"token","doc":null,"default_value":"","external_name":"token","restriction":"Token"},{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@tokens << token\n@positions << StreamPosition.new(position: @offset, size: size)\n"}},{"id":"advance_position(count:Int32)-instance-method","html_id":"advance_position(count:Int32)-instance-method","name":"advance_position","doc":"advance the offset by count","summary":"<p>advance the offset by count</p>","abstract":false,"args":[{"name":"count","doc":null,"default_value":"","external_name":"count","restriction":"Int32"}],"args_string":"(count : Int32)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L133","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L133","def":{"name":"advance_position","args":[{"name":"count","doc":null,"default_value":"","external_name":"count","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@offset = @offset + count"}},{"id":"map(&block)-instance-method","html_id":"map(&amp;block)-instance-method","name":"map","doc":"yield the given block for each token and it's\nposition and returns the results in an array","summary":"<p>yield the given block for each token and it's position and returns the results in an array</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L139","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L139","def":{"name":"map","args":[],"double_splat":null,"splat_index":null,"yields":2,"block_arg":null,"return_type":"","visibility":"Public","body":"i = -1\n@tokens.map_with_index do |token, index|\n  with self yield token, @positions[index]\nend\n"}},{"id":"offset:Int32-instance-method","html_id":"offset:Int32-instance-method","name":"offset","doc":"current lexing position","summary":"<p>current lexing position</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L106","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L106","def":{"name":"offset","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@offset"}},{"id":"pop_state-instance-method","html_id":"pop_state-instance-method","name":"pop_state","doc":"pop the last state from the stack","summary":"<p>pop the last state from the stack</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L112","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L112","def":{"name":"pop_state","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@states.pop\nnil\n"}},{"id":"positions:Array({position:Int32,size:Int32})-instance-method","html_id":"positions:Array({position:Int32,size:Int32})-instance-method","name":"positions","doc":"positions for lexed tokens","summary":"<p>positions for lexed tokens</p>","abstract":false,"args":[],"args_string":" : Array({position: Int32, size: Int32})","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L104","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L104","def":{"name":"positions","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@positions"}},{"id":"push_state(state:Symbol)-instance-method","html_id":"push_state(state:Symbol)-instance-method","name":"push_state","doc":"push a new lexing state to the stack","summary":"<p>push a new lexing state to the stack</p>","abstract":false,"args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"Symbol"}],"args_string":"(state : Symbol)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L110","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L110","def":{"name":"push_state","args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@states.push(state)\nnil\n"}},{"id":"state-instance-method","html_id":"state-instance-method","name":"state","doc":"get the currently active lexing state","summary":"<p>get the currently active lexing state</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L108","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L108","def":{"name":"state","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@states.last"}},{"id":"tokens:Array({Symbol}|{Symbol,String?})-instance-method","html_id":"tokens:Array({Symbol}|{Symbol,String?})-instance-method","name":"tokens","doc":"the lexed tokens","summary":"<p>the lexed tokens</p>","abstract":false,"args":[],"args_string":" : Array({Symbol} | {Symbol, String?})","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L102","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L102","def":{"name":"tokens","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@tokens"}},{"id":"tokens_with_positions-instance-method","html_id":"tokens_with_positions-instance-method","name":"tokens_with_positions","doc":"returns an array of all lexed\ntokens and their positions","summary":"<p>returns an array of all lexed tokens and their positions</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L121","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr#L121","def":{"name":"tokens_with_positions","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@tokens.zip(@positions)"}}],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Scanner/LexerCompatibility","path":"CLTK/Scanner/LexerCompatibility.html","kind":"module","full_name":"CLTK::Scanner::LexerCompatibility","name":"LexerCompatibility","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cltk/scanner.cr","line_number":151,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Scanner","kind":"class","full_name":"CLTK::Scanner","name":"Scanner"},"doc":"\nwrap lex and #lex to return the Tokens\nwe expect from a CLTK::Lexer\n","summary":"<p>wrap lex and #lex to return the Tokens we expect from a CLTK::Lexer </p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Scanner/ProcType","path":"CLTK/Scanner/ProcType.html","kind":"alias","full_name":"CLTK::Scanner::ProcType","name":"ProcType","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cltk/scanner.cr","line_number":78,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":true,"aliased":"Proc(String, CLTK::Scanner::Environment, (Tuple(Symbol) | Tuple(Symbol, String | Nil) | Nil))","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Scanner","kind":"class","full_name":"CLTK::Scanner","name":"Scanner"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Scanner/StreamPosition","path":"CLTK/Scanner/StreamPosition.html","kind":"alias","full_name":"CLTK::Scanner::StreamPosition","name":"StreamPosition","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cltk/scanner.cr","line_number":76,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":true,"aliased":"NamedTuple(position: Int32, size: Int32)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Scanner","kind":"class","full_name":"CLTK::Scanner","name":"Scanner"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Scanner/Token","path":"CLTK/Scanner/Token.html","kind":"alias","full_name":"CLTK::Scanner::Token","name":"Token","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cltk/scanner.cr","line_number":75,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/scanner.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":true,"aliased":"(Tuple(Symbol) | Tuple(Symbol, String | Nil))","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Scanner","kind":"class","full_name":"CLTK::Scanner","name":"Scanner"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/ScannerSerializer","path":"CLTK/ScannerSerializer.html","kind":"class","full_name":"CLTK::ScannerSerializer","name":"ScannerSerializer","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/lexer/crystalize.cr","line_number":2,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/crystalize.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK","kind":"module","full_name":"CLTK","name":"CLTK"},"doc":null,"summary":null,"class_methods":[{"id":"serialize(rx,raw_callbacks)-class-method","html_id":"serialize(rx,raw_callbacks)-class-method","name":"serialize","doc":"Collects all necessary data and makes it serializable","summary":"<p>Collects all necessary data and makes it serializable</p>","abstract":false,"args":[{"name":"rx","doc":null,"default_value":"","external_name":"rx","restriction":""},{"name":"raw_callbacks","doc":null,"default_value":"","external_name":"raw_callbacks","restriction":""}],"args_string":"(rx, raw_callbacks)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/crystalize.cr#L63","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/crystalize.cr#L63","def":{"name":"serialize","args":[{"name":"rx","doc":null,"default_value":"","external_name":"rx","restriction":""},{"name":"raw_callbacks","doc":null,"default_value":"","external_name":"raw_callbacks","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"dfa_states = collect_dfa_states(rx)\ndfa_states = transform_dfa_states(dfa_states)\ncallback_data = collect_callbacks(raw_callbacks)\n{dfa_states: dfa_states, callback_data: callback_data}\n"}},{"id":"write_to_file(data,path:String,wrap_module,module_name)-class-method","html_id":"write_to_file(data,path:String,wrap_module,module_name)-class-method","name":"write_to_file","doc":"writes *data* to *path*, and wraps into module *module_name* if *wrap_module* is true","summary":"<p>writes <em>data</em> to <em>path</em>, and wraps into module <em>module_name</em> if <em>wrap_module</em> is true</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"wrap_module","doc":null,"default_value":"","external_name":"wrap_module","restriction":""},{"name":"module_name","doc":null,"default_value":"","external_name":"module_name","restriction":""}],"args_string":"(data, path : String, wrap_module, module_name)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/crystalize.cr#L79","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/crystalize.cr#L79","def":{"name":"write_to_file","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"wrap_module","doc":null,"default_value":"","external_name":"wrap_module","restriction":""},{"name":"module_name","doc":null,"default_value":"","external_name":"module_name","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"File.open(path, mode: \"w\") do |file|\n  write_to_io(data, file, wrap_module, module_name)\nend"}},{"id":"write_to_io(data,io,wrap_module,module_name)-class-method","html_id":"write_to_io(data,io,wrap_module,module_name)-class-method","name":"write_to_io","doc":"writes *data* to *io*, and wraps into module *module_name* if *wrap_module* is true","summary":"<p>writes <em>data</em> to <em>io</em>, and wraps into module <em>module_name</em> if <em>wrap_module</em> is true</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""},{"name":"wrap_module","doc":null,"default_value":"","external_name":"wrap_module","restriction":""},{"name":"module_name","doc":null,"default_value":"","external_name":"module_name","restriction":""}],"args_string":"(data, io, wrap_module, module_name)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/crystalize.cr#L86","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/crystalize.cr#L86","def":{"name":"write_to_io","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""},{"name":"wrap_module","doc":null,"default_value":"","external_name":"wrap_module","restriction":""},{"name":"module_name","doc":null,"default_value":"","external_name":"module_name","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"dfa_table = data[:dfa_states]\ncallbacks = data[:callback_data][:callbacks]\nstring_callbacks = data[:callback_data][:string_callbacks]\ntoken_value = TokenValue.to_s\nwrite_to_io(io, dfa_table, callbacks, string_callbacks, wrap_module, module_name, token_value)\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/TheKingsJrester/cltk/CLTK/ScannerSerializer/Callback","path":"CLTK/ScannerSerializer/Callback.html","kind":"alias","full_name":"CLTK::ScannerSerializer::Callback","name":"Callback","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cltk/lexer/crystalize.cr","line_number":9,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/crystalize.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":true,"aliased":"NamedTuple(arg: String | Nil, body: String)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/ScannerSerializer","kind":"class","full_name":"CLTK::ScannerSerializer","name":"ScannerSerializer"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/ScannerSerializer/DFAStateHash","path":"CLTK/ScannerSerializer/DFAStateHash.html","kind":"alias","full_name":"CLTK::ScannerSerializer::DFAStateHash","name":"DFAStateHash","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cltk/lexer/crystalize.cr","line_number":7,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/crystalize.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":true,"aliased":"Hash(Symbol, Hash(UInt64, NamedTuple(accept: Bool, next: Array(NamedTuple(atom: Tuple(Int32, Int32), state: UInt64)) | Nil, callback: Int32 | Nil)))","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/ScannerSerializer","kind":"class","full_name":"CLTK::ScannerSerializer","name":"ScannerSerializer"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/ScannerSerializer/DFAStates","path":"CLTK/ScannerSerializer/DFAStates.html","kind":"alias","full_name":"CLTK::ScannerSerializer::DFAStates","name":"DFAStates","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cltk/lexer/crystalize.cr","line_number":3,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/crystalize.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":true,"aliased":"Hash(Symbol, Hash(UInt64, Tuple(DFA::DFA::DState, Int32 | Nil)))","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/ScannerSerializer","kind":"class","full_name":"CLTK::ScannerSerializer","name":"ScannerSerializer"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/ScannerSerializer/DStateType","path":"CLTK/ScannerSerializer/DStateType.html","kind":"alias","full_name":"CLTK::ScannerSerializer::DStateType","name":"DStateType","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cltk/lexer/crystalize.cr","line_number":5,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer/crystalize.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":true,"aliased":"NamedTuple(accept: Bool, next: Array(NamedTuple(atom: Tuple(Int32, Int32), state: UInt64)) | Nil, callback: Int32 | Nil)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK/ScannerSerializer","kind":"class","full_name":"CLTK::ScannerSerializer","name":"ScannerSerializer"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Serializer","path":"CLTK/Serializer.html","kind":"class","full_name":"CLTK::Serializer","name":"Serializer","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/parser/crystalize.cr","line_number":2,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/crystalize.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK","kind":"module","full_name":"CLTK","name":"CLTK"},"doc":null,"summary":null,"class_methods":[{"id":"serialize(parser:CLTK::Parser)-class-method","html_id":"serialize(parser:CLTK::Parser)-class-method","name":"serialize","doc":null,"summary":null,"abstract":false,"args":[{"name":"parser","doc":null,"default_value":"","external_name":"parser","restriction":"CLTK::Parser"}],"args_string":"(parser : CLTK::Parser)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/crystalize.cr#L3","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/crystalize.cr#L3","def":{"name":"serialize","args":[{"name":"parser","doc":null,"default_value":"","external_name":"parser","restriction":"CLTK::Parser"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/StreamPosition","path":"CLTK/StreamPosition.html","kind":"class","full_name":"CLTK::StreamPosition","name":"StreamPosition","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/streamposition.cr","line_number":4,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/streamposition.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK","kind":"module","full_name":"CLTK","name":"CLTK"},"doc":"The StreamPosition class is used to indicate the position of a token or\nother text inside a stream.","summary":"<p>The StreamPosition class is used to indicate the position of a token or other text inside a stream.</p>","class_methods":[],"constructors":[{"id":"new(stream_offset=0,line_number=0,line_offset=0,length=0,file_name:String?=nil)-class-method","html_id":"new(stream_offset=0,line_number=0,line_offset=0,length=0,file_name:String?=nil)-class-method","name":"new","doc":"Instantiates a new StreamPosition object with the values specified.\n\n@param [Integer]\t\tstream_offset\tThe position from the beginning of the stream.\n@param [Integer]\t\tline_number\tThe number of newlines since the beginning of the file.\n@param [Integer]\t\tline_offset\tThe offset of this token from the beginning of the current line.\n@param [Integer]\t\tlength\t\tThe length of the text of the token.\n@param [String, nil]\tfile_name\t\tThe name of the file being lexed.","summary":"<p>Instantiates a new StreamPosition object with the values specified.</p>","abstract":false,"args":[{"name":"stream_offset","doc":null,"default_value":"0","external_name":"stream_offset","restriction":""},{"name":"line_number","doc":null,"default_value":"0","external_name":"line_number","restriction":""},{"name":"line_offset","doc":null,"default_value":"0","external_name":"line_offset","restriction":""},{"name":"length","doc":null,"default_value":"0","external_name":"length","restriction":""},{"name":"file_name","doc":null,"default_value":"nil","external_name":"file_name","restriction":"String | ::Nil"}],"args_string":"(stream_offset = <span class=\"n\">0</span>, line_number = <span class=\"n\">0</span>, line_offset = <span class=\"n\">0</span>, length = <span class=\"n\">0</span>, file_name : String? = <span class=\"n\">nil</span>)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/streamposition.cr#L32","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/streamposition.cr#L32","def":{"name":"new","args":[{"name":"stream_offset","doc":null,"default_value":"0","external_name":"stream_offset","restriction":""},{"name":"line_number","doc":null,"default_value":"0","external_name":"line_number","restriction":""},{"name":"line_offset","doc":null,"default_value":"0","external_name":"line_offset","restriction":""},{"name":"length","doc":null,"default_value":"0","external_name":"length","restriction":""},{"name":"file_name","doc":null,"default_value":"nil","external_name":"file_name","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(stream_offset, line_number, line_offset, length, file_name)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/streamposition.cr#L5","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/streamposition.cr#L5","def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nif clone.responds_to?(:finalize)\n  GC.add_finalizer(clone)\nend\nclone\n"}},{"id":"file_name:String?-instance-method","html_id":"file_name:String?-instance-method","name":"file_name","doc":"@return [String]","summary":"<p>@return [String]</p>","abstract":false,"args":[],"args_string":" : String?","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/streamposition.cr#L19","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/streamposition.cr#L19","def":{"name":"file_name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@file_name"}},{"id":"length:Int32-instance-method","html_id":"length:Int32-instance-method","name":"length","doc":"@return [Integer]","summary":"<p>@return [Integer]</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/streamposition.cr#L16","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/streamposition.cr#L16","def":{"name":"length","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@length"}},{"id":"length=(length)-instance-method","html_id":"length=(length)-instance-method","name":"length=","doc":"@return [Integer]","summary":"<p>@return [Integer]</p>","abstract":false,"args":[{"name":"length","doc":null,"default_value":"","external_name":"length","restriction":""}],"args_string":"(length)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/streamposition.cr#L16","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/streamposition.cr#L16","def":{"name":"length=","args":[{"name":"length","doc":null,"default_value":"","external_name":"length","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@length = length"}},{"id":"line_number:Int32-instance-method","html_id":"line_number:Int32-instance-method","name":"line_number","doc":"@return [Integer]","summary":"<p>@return [Integer]</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/streamposition.cr#L10","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/streamposition.cr#L10","def":{"name":"line_number","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@line_number"}},{"id":"line_offset:Int32-instance-method","html_id":"line_offset:Int32-instance-method","name":"line_offset","doc":"@return [Integer]","summary":"<p>@return [Integer]</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/streamposition.cr#L13","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/streamposition.cr#L13","def":{"name":"line_offset","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@line_offset"}},{"id":"line_offset=(line_offset)-instance-method","html_id":"line_offset=(line_offset)-instance-method","name":"line_offset=","doc":"@return [Integer]","summary":"<p>@return [Integer]</p>","abstract":false,"args":[{"name":"line_offset","doc":null,"default_value":"","external_name":"line_offset","restriction":""}],"args_string":"(line_offset)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/streamposition.cr#L13","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/streamposition.cr#L13","def":{"name":"line_offset=","args":[{"name":"line_offset","doc":null,"default_value":"","external_name":"line_offset","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@line_offset = line_offset"}},{"id":"start:Int32-instance-method","html_id":"start:Int32-instance-method","name":"start","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/streamposition.cr#L21","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/streamposition.cr#L21","def":{"name":"start","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@line_offset"}},{"id":"stream_offset:Int32-instance-method","html_id":"stream_offset:Int32-instance-method","name":"stream_offset","doc":"@return [Integer]","summary":"<p>@return [Integer]</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/streamposition.cr#L7","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/streamposition.cr#L7","def":{"name":"stream_offset","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@stream_offset"}},{"id":"stream_offset=(stream_offset)-instance-method","html_id":"stream_offset=(stream_offset)-instance-method","name":"stream_offset=","doc":"@return [Integer]","summary":"<p>@return [Integer]</p>","abstract":false,"args":[{"name":"stream_offset","doc":null,"default_value":"","external_name":"stream_offset","restriction":""}],"args_string":"(stream_offset)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/streamposition.cr#L7","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/streamposition.cr#L7","def":{"name":"stream_offset=","args":[{"name":"stream_offset","doc":null,"default_value":"","external_name":"stream_offset","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@stream_offset = stream_offset"}}],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Token","path":"CLTK/Token.html","kind":"class","full_name":"CLTK::Token","name":"Token","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/token.cr","line_number":14,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/token.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK","kind":"module","full_name":"CLTK","name":"CLTK"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(type:String|Symbol,value:TokenValue=nil,position:StreamPosition?=nil)-class-method","html_id":"new(type:String|Symbol,value:TokenValue=nil,position:StreamPosition?=nil)-class-method","name":"new","doc":"Instantiates a new Token object with the values specified.\n\n@param [Symbol]\t\t\t\ttype\t\tA symbol representing the type of this Token.\n@param [Object, nil]\t\t\tvalue\tA value associated with this token.\n@param [StreamPosition, nil]\tposition\tThe position of the token in a stream.","summary":"<p>Instantiates a new Token object with the values specified.</p>","abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"String | Symbol"},{"name":"value","doc":null,"default_value":"nil","external_name":"value","restriction":"TokenValue"},{"name":"position","doc":null,"default_value":"nil","external_name":"position","restriction":"StreamPosition | ::Nil"}],"args_string":"(type : String | Symbol, value : TokenValue = <span class=\"n\">nil</span>, position : StreamPosition? = <span class=\"n\">nil</span>)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/token.cr#L29","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/token.cr#L29","def":{"name":"new","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"String | Symbol"},{"name":"value","doc":null,"default_value":"nil","external_name":"value","restriction":"TokenValue"},{"name":"position","doc":null,"default_value":"nil","external_name":"position","restriction":"StreamPosition | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(type, value, position)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other)-instance-method","html_id":"==(other)-instance-method","name":"==","doc":"Compares one token to another.  This only tests the token's *type*\nand *value* and not the location of the token in its source.\n\n@param [Token] other Another Token to compare to.\n\n@return [Boolean]","summary":"<p>Compares one token to another.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/token.cr#L41","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/token.cr#L41","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if other.is_a?(Token)\n  (@type == other.type) && (@value == other.value)\nelse\n  false\nend"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/token.cr#L49","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/token.cr#L49","def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self"}},{"id":"position:CLTK::StreamPosition?-instance-method","html_id":"position:CLTK::StreamPosition?-instance-method","name":"position","doc":"@return [StreamPosition] StreamPosition object associated with this token.","summary":"<p>@return [StreamPosition] StreamPosition object associated with this token.</p>","abstract":false,"args":[],"args_string":" : CLTK::StreamPosition?","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/token.cr#L22","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/token.cr#L22","def":{"name":"position","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@position"}},{"id":"to_s-instance-method","html_id":"to_s-instance-method","name":"to_s","doc":"@return [String] String representing the tokens *type* and *value*.","summary":"<p>@return [String] String representing the tokens <em>type</em> and <em>value</em>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/token.cr#L54","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/token.cr#L54","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if value\n  \"#{@type}(#{@value})\"\nelse\n  @type.to_s\nend"}},{"id":"type:String|Symbol-instance-method","html_id":"type:String|Symbol-instance-method","name":"type","doc":"@return [Symbol]","summary":"<p>@return [Symbol]</p>","abstract":false,"args":[],"args_string":" : String | Symbol","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/token.cr#L16","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/token.cr#L16","def":{"name":"type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@type"}},{"id":"value:String?-instance-method","html_id":"value:String?-instance-method","name":"value","doc":"@return [Symbol]","summary":"<p>@return [Symbol]</p>","abstract":false,"args":[],"args_string":" : String?","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/token.cr#L19","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/token.cr#L19","def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@value"}}],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/TokenValue","path":"CLTK/TokenValue.html","kind":"alias","full_name":"CLTK::TokenValue","name":"TokenValue","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cltk/token.cr","line_number":11,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/token.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":true,"aliased":"(String | Nil)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK","kind":"module","full_name":"CLTK","name":"CLTK"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/CLTK/Type","path":"CLTK/Type.html","kind":"alias","full_name":"CLTK::Type","name":"Type","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cltk/parser/type.cr","line_number":4,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/parser/type.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":true,"aliased":"(Array(CLTK::Type) | CLTK::ASTNode | String | Nil)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/TheKingsJrester/cltk/CLTK","kind":"module","full_name":"CLTK","name":"CLTK"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/TheKingsJrester/cltk/Object","path":"Object.html","kind":"class","full_name":"Object","name":"Object","abstract":true,"superclass":null,"ancestors":[],"locations":[{"filename":"cltk/cfg.cr","line_number":6,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr"},{"filename":"lib/msgpack/src/message_pack/to_msgpack.cr","line_number":3,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/lib/msgpack/src/message_pack/to_msgpack.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"`Object` is the base type of all Crystal objects.","summary":"<p><code><a href=\"Object.html\">Object</a></code> is the base type of all Crystal objects.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"in?(collection:Array|Set)-instance-method","html_id":"in?(collection:Array|Set)-instance-method","name":"in?","doc":null,"summary":null,"abstract":false,"args":[{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Array | Set"}],"args_string":"(collection : Array | Set)","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L7","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/cfg.cr#L7","def":{"name":"in?","args":[{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Array | Set"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"collection.includes?(self)"}}],"macros":[],"types":[]},{"html_id":"github.com/TheKingsJrester/cltk/StringScanner","path":"StringScanner.html","kind":"class","full_name":"StringScanner","name":"StringScanner","abstract":false,"superclass":{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/TheKingsJrester/cltk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/TheKingsJrester/cltk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cltk/lexer.cr","line_number":9,"url":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer.cr"}],"repository_name":"github.com/TheKingsJrester/cltk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"`StringScanner` provides for lexical scanning operations on a `String`.\n\n### Example\n\n```\nrequire \"string_scanner\"\n\ns = StringScanner.new(\"This is an example string\")\ns.eos? # => false\n\ns.scan(/\\w+/) # => \"This\"\ns.scan(/\\w+/) # => nil\ns.scan(/\\s+/) # => \" \"\ns.scan(/\\s+/) # => nil\ns.scan(/\\w+/) # => \"is\"\ns.eos?        # => false\n\ns.scan(/\\s+/) # => \" \"\ns.scan(/\\w+/) # => \"an\"\ns.scan(/\\s+/) # => \" \"\ns.scan(/\\w+/) # => \"example\"\ns.scan(/\\s+/) # => \" \"\ns.scan(/\\w+/) # => \"string\"\ns.eos?        # => true\n\ns.scan(/\\s+/) # => nil\ns.scan(/\\w+/) # => nil\n```\n\nScanning a string means remembering the position of a _scan offset_, which is\njust an index. Scanning moves the offset forward, and matches are sought\nafter the offset; usually immediately after it.\n\n### Method Categories\n\nMethods that advance the scan offset:\n* `#scan`\n* `#scan_until`\n* `#skip`\n* `#skip_until`\n\nMethods that look ahead:\n* `#peek`\n* `#check`\n* `#check_until`\n\nMethods that deal with the position of the offset:\n* `#offset`\n* `#offset=`\n* `#eos?`\n* `#reset`\n* `#terminate`\n\nMethods that deal with the last match:\n* `#[]`\n* `#[]?`\n\nMiscellaneous methods:\n* `#inspect`\n* `#string`","summary":"<p><code><a href=\"StringScanner.html\">StringScanner</a></code> provides for lexical scanning operations on a <code>String</code>.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"last_match:Regex::MatchData?-instance-method","html_id":"last_match:Regex::MatchData?-instance-method","name":"last_match","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Regex::MatchData?","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer.cr#L10","source_link":"https://github.com/TheKingsJrester/cltk/blob/95a1d19dbad11a7c22b15aa5a6b77f09ac5b5a3f/src/cltk/lexer.cr#L10","def":{"name":"last_match","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@last_match"}}],"macros":[],"types":[]}]}}